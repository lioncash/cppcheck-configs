<?xml version="1.0"?>
<def format="2">
    <!-- - - - - -->
    <!-- Defines -->
    <!-- - - - - -->

    <!-- Disassembler.h -->
    <define name="LLVMDisassembler_VariantKind_None" value="0"/>
    <define name="LLVMDisassembler_VariantKind_ARM_HI16" value="1"/>
    <define name="LLVMDisassembler_VariantKind_ARM_LO16" value="2"/>
    <define name="LLVMDisassembler_VariantKind_ARM64_PAGE" value="1"/>
    <define name="LLVMDisassembler_VariantKind_ARM64_PAGEOFF" value="2"/>
    <define name="LLVMDisassembler_VariantKind_ARM64_GOTPAGE" value="3"/>
    <define name="LLVMDisassembler_VariantKind_ARM64_GOTPAGEOFF" value="4"/>
    <define name="LLVMDisassembler_VariantKind_ARM64_TLVP" value="5"/>
    <define name="LLVMDisassembler_VariantKind_ARM64_TLVOFF" value="6"/>

    <define name="LLVMDisassembler_ReferenceType_InOut_None" value="0"/>
    <define name="LLVMDisassembler_ReferenceType_In_Branch" value="1"/>
    <define name="LLVMDisassembler_ReferenceType_In_PCrel_Load" value="2"/>
    <define name="LLVMDisassembler_ReferenceType_In_ARM64_ADRP" value="0x100000001"/>
    <define name="LLVMDisassembler_ReferenceType_In_ARM64_ADDXri" value="0x100000002"/>
    <define name="LLVMDisassembler_ReferenceType_In_ARM64_LDRXui" value="0x100000003"/>
    <define name="LLVMDisassembler_ReferenceType_In_ARM64_LDRXl" value="0x100000004"/>
    <define name="LLVMDisassembler_ReferenceType_In_ARM64_ADR" value="0x100000005"/>
    <define name="LLVMDisassembler_ReferenceType_Out_SymbolStub" value="1"/>
    <define name="LLVMDisassembler_ReferenceType_Out_LitPool_SymAddr" value="2"/>
    <define name="LLVMDisassembler_ReferenceType_Out_LitPool_CstrAddr" value="3"/>
    <define name="LLVMDisassembler_ReferenceType_Out_Objc_CFString_Ref" value="4"/>
    <define name="LLVMDisassembler_ReferenceType_Out_Objc_Message" value="5"/>
    <define name="LLVMDisassembler_ReferenceType_Out_Objc_Message_Ref" value="6"/>
    <define name="LLVMDisassembler_ReferenceType_Out_Objc_Selector_Ref" value="7"/>
    <define name="LLVMDisassembler_ReferenceType_Out_Objc_Class_Ref" value="8"/>
    <define name="LLVMDisassembler_ReferenceType_DeMangled_Name" value="9"/>

    <define name="LLVMDisassembler_Option_UseMarkup" value="1"/>
    <define name="LLVMDisassembler_Option_PrintImmHex" value="2"/>
    <define name="LLVMDisassembler_Option_AsmPrinterVariant" value="4"/>
    <define name="LLVMDisassembler_Option_SetInstrComments" value="8"/>
    <define name="LLVMDisassembler_Option_PrintLatency" value="16"/>

    <!-- - - - - -  -->
    <!-- Data types -->
    <!-- - - - - -  -->

    <!-- Analysis.h -->
    <podtype name="LLVMVerifierFailureAction"/>

    <!-- Core.h -->
    <podtype name="LLVMAtomicOrdering"/>
    <podtype name="LLVMAtomicRMWBinOp"/>
    <podtype name="LLVMAttributeIndex" sign="u"/>
    <podtype name="LLVMCallConv"/>
    <podtype name="LLVMDiagnosticHandler"/>
    <podtype name="LLVMDiagnosticSeverity"/>
    <podtype name="LLVMDLLStorageClass"/>
    <podtype name="LLVMIntPredicate"/>
    <podtype name="LLVMLandingPadClauseTy"/>
    <podtype name="LLVMLinkage"/>
    <podtype name="LLVMOpcode"/>
    <podtype name="LLVMRealPredicate"/>
    <podtype name="LLVMThreadLocalMode"/>
    <podtype name="LLVMTypeKind"/>
    <podtype name="LLVMValueKind"/>
    <podtype name="LLVMVisibility"/>
    <podtype name="LLVMYieldCallback"/>

    <!-- DebugInfo.h -->
    <podtype name="LLVMDIFlags" sign="s"/>
    <podtype name="LLVMDWARFEmissionKind" sign="s"/>
    <podtype name="LLVMDWARFSourceLanguage" sign="s"/>

    <!-- Disassembler.h -->
    <podtype name="LLVMDisasmContextRef"/>
    <podtype name="LLVMOpInfo1"/>
    <podtype name="LLVMOpInfoCallback"/>
    <podtype name="LLVMOpInfoSymbol1"/>
    <podtype name="LLVMSymbolLookupCallback"/>

    <!-- ErrorHandling.h -->
    <podtype name="LLVMFatalErrorHandler"/>

    <!-- ExecutionEngine.h -->
    <podtype name="LLVMExecutionEngineRef"/>
    <podtype name="LLVMGenericValueRef"/>
    <podtype name="LLVMMCJITCompilerOptions"/>
    <podtype name="LLVMMCJITMemoryManagerRef"/>
    <podtype name="LLVMMemoryManagerAllocateCodeSectionCallback"/>
    <podtype name="LLVMMemoryManagerAllocateDataSectionCallback"/>
    <podtype name="LLVMMemoryManagerDestroyCallback"/>
    <podtype name="LLVMMemoryManagerFinalizeMemoryCallback"/>

    <!-- Linker.h -->
    <podtype name="LLVMLinkerMode">
        <warn severity="warning">Deprecated enum 'LLVMLinkerMode' used.
Deprecated enum 'LLVMLinkerMode' used. This enum is provided for backwards compatibility only and has no effect.
        </warn>
    </podtype>

    <!-- LinkTimeOptimizer.h -->
    <podtype name="llvm_lto_t"/>
    <podtype name="llvm_lto_status_t"/>

    <!-- lto.h -->
    <podtype name="lto_bool_t"/>
    <podtype name="lto_code_gen_t"/>
    <podtype name="lto_codegen_diagnostic_severity_t"/>
    <podtype name="lto_codegen_model"/>
    <podtype name="lto_debug_model"/>
    <podtype name="lto_diagnostic_handler_t"/>
    <podtype name="lto_module_t"/>
    <podtype name="LTOObjectBuffer"/>
    <podtype name="lto_symbol_attributes"/>
    <podtype name="thinlto_code_gen_t"/>

    <!-- Object.h -->
    <podtype name="LLVMObjectFileRef"/>
    <podtype name="LLVMRelocationIteratorRef"/>
    <podtype name="LLVMSectionIteratorRef"/>
    <podtype name="LLVMSymbolIteratorRef"/>

    <!-- OrcBindings.h -->
    <podtype name="LLVMOrcErrorCode"/>
    <podtype name="LLVMOrcJITStackRef"/>
    <podtype name="LLVMOrcLazyCompileCallbackFn"/>
    <podtype name="LLVMOrcModuleHandle" sign="u" size="4"/>
    <podtype name="LLVMOrcSymbolResolverFn"/>
    <podtype name="LLVMOrcTargetAddress" sign="u" size="8"/>
    <podtype name="LLVMSharedModuleRef"/>

    <!-- Target.h -->
    <podtype name="LLVMByteOrdering"/>
    <podtype name="LLVMTargetDataRef"/>
    <podtype name="LLVMTargetLibraryInfoRef"/>

    <!-- TargetMachine.h -->
    <podtype name="LLVMCodeGenFileType"/>
    <podtype name="LLVMCodeGenOptLevel"/>
    <podtype name="LLVMCodeModel"/>
    <podtype name="LLVMRelocMode"/>
    <podtype name="LLVMTargetMachineRef"/>
    <podtype name="LLVMTargetRef"/>

    <!-- Types.h -->
    <podtype name="LLVMAttributeRef"/>
    <podtype name="LLVMBasicBlockRef"/>
    <podtype name="LLVMBool" sign="s"/>
    <podtype name="LLVMBuilderRef"/>
    <podtype name="LLVMContextRef"/>
    <podtype name="LLVMDiagnosticInfoRef"/>
    <podtype name="LLVMDIBuilderRef"/>
    <podtype name="LLVMMemoryBufferRef"/>
    <podtype name="LLVMMetadataRef"/>
    <podtype name="LLVMModuleProviderRef"/>
    <podtype name="LLVMModuleRef"/>
    <podtype name="LLVMPassManagerRef"/>
    <podtype name="LLVMPassRegistryRef"/>
    <podtype name="LLVMTypeRef"/>
    <podtype name="LLVMUseRef"/>
    <podtype name="LLVMValueRef"/>

    <!-- Transforms/PassManagerBuilder.h -->
    <podtype name="LLVMPassManagerBuilderRef"/>

    <!-- - - - - -  -->
    <!-- Functions  -->
    <!-- - - - - -  -->

    <!-- Header: Analysis.h -->
    <function name="LLVMVerifyModule">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="LLVMVerifyFunction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMViewFunctionCFG,LLVMViewFunctionCFGOnly">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- BitReader.h -->
    <function name="LLVMParseBitcode">
        <warn severity="warning">Deprecated function 'LLVMParseBitcode' used.
Deprecated function 'LLVMParseBitcode' used. It is recommended to migrate to 'LLVMParseBitcode2'.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="LLVMParseBitcode2">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMParseBitcodeInContext">
        <warn severity="warning">Deprecated function 'LLVMParseBitcodeInContext' used.
Deprecated function 'LLVMParseBitcodeInContext' used. It is recommended to migrate to 'LLVMParseBitcodeInContext2'.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
        <arg nr="4"><not-bool/></arg>
    </function>
    <function name="LLVMParseBitcodeInContext2">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMGetBitcodeModuleInContext">
        <warn severity="warning">Deprecated function 'LLVMGetBitcodeModuleInContext' used.
Deprecated function 'LLVMGetBitcodeModuleInContext' used. It is recommended to migrate to 'LLVMGetBitcodeModuleInContext2'.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
        <arg nr="4"><not-bool/></arg>
    </function>
    <function name="LLVMGetBitcodeModuleInContext2">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMGetBitcodeModule">
        <warn severity="warning">Deprecated function 'LLVMGetBitcodeModule' used.
Deprecated function 'LLVMGetBitcodeModule' used. It is recommended to migrate to 'LLVMGetBitcodeModule2'.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="LLVMGetBitcodeModule2">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>

    <!-- BitWriter.h -->
    <memory>
        <alloc init="true">LLVMWriteBitcodeToMemoryBuffer</alloc>
        <dealloc>LLVMDisposeMemoryBuffer</dealloc>
    </memory>
    <function name="LLVMWriteBitcodeToFD">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-uninit/></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>
    <function name="LLVMWriteBitcodeToFile">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMWriteBitcodeToFileHandle">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMWriteBitcodeToMemoryBuffer">
        <use-retval/>
        <returnValue type="LLVMMemoryBufferRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Core.h -->
    <memory>
        <alloc init="true">LLVMCreateMessage</alloc>
        <alloc init="true">LLVMGetDiagInfoDescription</alloc>
        <dealloc>LLVMDisposeMessage</dealloc>
    </memory>
    <memory>
        <alloc init="true">LLVMContextCreate</alloc>
        <dealloc>LLVMContextDispose</dealloc>
    </memory>
    <function name="LLVMInitializeCore">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMShutdown">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMCreateMessage">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMDisposeMessage">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>

    <!-- DebugInfo.h -->
    <memory>
        <alloc init="true">LLVMCreateDIBuilder</alloc>
        <alloc init="true">LLVMCreateDIBuilderDisallowUnresolved</alloc>
        <dealloc>LLVMDisposeDIBuilder</dealloc>
    </memory>
    <function name="LLVMDebugMetadataVersion">
        <const/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMGetModuleDebugMetadataVersion">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMStripModuleDebugInfo">
        <leak-ignore/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMCreateDIBuilder,LLVMCreateDIBuilderDisallowUnresolved">
        <use-retval/>
        <returnValue type="LLVMDIBuilderRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDisposeDIBuilder">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMDIBuilderFinalize">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDIBuilderCreateCompileUnit">
        <leak-ignore/>
        <returnValue type="LLVMMetadataRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="6"><not-uninit/></arg>
        <arg nr="7"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="8"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="9"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="10"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="11"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="12"><not-bool/><not-uninit/></arg>
        <arg nr="13"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="14"><not-uninit/></arg>
        <arg nr="15"><not-uninit/></arg>
    </function>
    <function name="LLVMDIBuilderCreateFile">
        <leak-ignore/>
        <returnValue type="LLVMMetadataRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMDIBuilderCreateDebugLocation">
        <leak-ignore/>
        <returnValue type="LLVMMetadataRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Context functions (part of Core.h) -->
    <function name="LLVMContextCreate">
        <returnValue type="LLVMContextRef"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMContextDispose">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMGetGlobalContext">
        <use-retval/>
        <returnValue type="LLVMContextRef"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMContextSetDiagnosticHandler">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMContextGetDiagnosticHandler">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMDiagnosticHandler"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMContextGetDiagnosticContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMContextSetYieldCallback">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMGetDiagInfoDescription">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetDiagInfoSeverity">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMDiagnosticSeverity"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetMDKindIDInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetMDKindID,LLVMGetEnumAttributeKindForName">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetLastEnumAttributeKind">
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMCreateEnumAttribute">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMAttributeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetEnumAttributeKind">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetEnumAttributeValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="uint64_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMCreateStringAttribute">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMAttributeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="5"/></arg>
        <arg nr="5"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetStringAttributeKind,LLVMGetStringAttributeValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMIsEnumAttribute,LLVMIsStringAttribute">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Module functions (part of Core.h) -->
    <memory>
        <alloc init="true">LLVMModuleCreateWithName</alloc>
        <alloc init="true">LLVMModuleCreateWithNameInContext</alloc>
        <alloc init="true">LLVMCloneModule</alloc>
        <dealloc>LLVMModuleDispose</dealloc>
    </memory>
    <memory>
        <alloc init="true">LLVMPrintModuleToString</alloc>
        <dealloc>LLVMDisposeMessage</dealloc>
    </memory>
    <function name="LLVMModuleCreateWithName">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMModuleRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMModuleCreateWithNameInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMModuleRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMCloneModule">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMModuleRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDisposeModule">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMGetModuleIdentifier">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMSetModuleIdentifier">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetSourceFileName">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMSetSourceFileName">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetDataLayoutStr">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetDataLayout">
        <warn severity="warning">Deprecated function 'LLVMGetDataLayout' used.
Deprecated function 'LLVMGetDataLayout' used. This function was deprecated in differential D17283. Consider migrating to 'LLVMGetDataLayoutStr' instead.

For more information, see: https://reviews.llvm.org/D17283
        </warn>
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetDataLayout">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMGetTarget">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetTarget">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMDumpModule">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMPrintModuleToFile">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMPrintModuleToString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetModuleInlineAsm">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMGetModuleContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMContextRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetTypeByName">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMGetNamedMetadataNumOperands">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMGetNamedMetadataNumOperands">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMAddNamedMetadataOperand">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="LLVMAddFunction">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetNamedFunction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMGetFirstFunction,LLVMGetLastFunction,LLVMGetNextFunction,LLVMGetPreviousFunction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Type functions (part of Core.h) -->
    <memory>
        <alloc init="true">LLVMPrintTypeToString</alloc>
        <dealloc>LLVMDisposeMessage</dealloc>
    </memory>
    <function name="LLVMGetTypeKind">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="LLVMTypeKind"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMTypeIsSized">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetTypeContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMContextRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDumpType">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMPrintTypeToString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMInt1TypeInContext,LLVMInt8TypeInContext,LLVMInt16TypeInContext,LLVMInt32TypeInContext,LLVMInt64TypeInContext,LLVMInt128TypeInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMIntTypeInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMInt1Type,LLVMInt8Type,LLVMInt16Type,LLVMInt32Type,LLVMInt64Type,LLVMInt128Type">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMIntType">
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetIntTypeWidth">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMHalfTypeInContext,LLVMFloatTypeInContext,LLVMDoubleTypeInContext,LLVMX86FP80TypeInContext,LLVMFP128TypeInContext,LLVMPPCFP128TypeInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMHalfType,LLVMFloatType,LLVMDoubleType,LLVMX86FP80Type,LLVMFP128Type,LLVMPPCFP128Type">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
    </function>
    <function name="LLVMFunctionType">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>
    <function name="LLVMIsFunctionVarArg">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetReturnType">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMCountParamTypes">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetParamTypes">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMStructTypeInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>
    <function name="LLVMStructType">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="LLVMStructCreateNamed">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMGetStructName">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMStructSetBody">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>
    <function name="LLVMCountStructElementTypes">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetStructElementTypes">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMStructGetTypeAtIndex">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMIsPackedStruct,LLVMIsOpaqueStruct">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetElementType">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetSubtypes">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMGetNumContainedTypes,LLVMGetArrayLength,LLVMGetPointerAddressSpace,LLVMGetVectorSize">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMArrayType,LLVMPointerType,LLVMVectorType">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMVoidTypeInContext,LLVMLabelTypeInContext,LLVMX86MMXTypeInContext,LLVMTokenTypeInContext,LLVMMetadataTypeInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMVoidType,LLVMLabelType,LLVMX86MMXType">
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Value functions (part of Core.h) -->
    <memory>
        <alloc init="true">LLVMPrintValueToString</alloc>
        <dealloc>LLVMDisposeMessage</dealloc>
    </memory>
    <function name="LLVMTypeOf">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetValueKind">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="LLVMValueKind"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetValueName">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetValueName">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMDumpValue">
        <leak-ignore/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMPrintValueToString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMReplaceAllUsesWith">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMIsConstant,LLVMIsUndef,">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMIsAMDNode,LLVMIsAMDString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetFirstUse,LLVMGetNextUse">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMUseRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetUser,LLVMGetUsedValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetOperand">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetOperand">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMUseRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMSetOperand">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetNumOperands">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Value constant functions (part of Core.h) -->
    <function name="LLVMConstNull,LLVMConstAllOnes,LLVMGetUndef,LLVMConstPointerNull">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMIsNull">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstInt">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="LLVMConstIntOfArbitraryPrecision">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstIntOfString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>2,8,10,16,36</valid></arg>
    </function>
    <function name="LLVMConstIntOfStringAndSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>2,8,10,16,36</valid></arg>
    </function>
    <function name="LLVMConstReal">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMConstRealOfString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMConstRealOfStringAndSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMConstIntGetZExtValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned long long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstIntGetSExtValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="long long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstRealGetDouble">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMConstStringInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>
    <function name="LLVMConstString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="LLVMIsConstantString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetAsString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMConstStructInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>
    <function name="LLVMConstStruct">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="LLVMConstArray,LLVMConstNamedStruct">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetElementAsConstant">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMConstVector">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetConstOpcode">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMOpcode"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMAlignOf,LLVMSizeOf">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstNeg,LLVMConstNSWNeg,LLVMConstNUWNeg,LLVMConstFNeg">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstNot">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstAdd,LLVMConstNSWAdd,LLVMConstNUWAdd,LLVMConstFAdd">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstSub,LLVMConstNSWSub,LLVMConstNUWSub,LLVMConstFSub">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstMul,LLVMConstNSWMul,LLVMConstNUWMul,LLVMConstFMul">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstUDiv,LLVMConstSDiv,LLVMConstExactUDiv,LLVMConstExactSDiv,LLVMConstFDiv">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstURem,LLVMConstSRem,LLVMConstExactFRem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstAnd,LLVMConstOr,LLVMConstXor,LLVMConstShl,LLVMConstLShr,LLVMConstAShr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstICmp,LLVMConstFCmp">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstGEP,LLVMConstInBoundsGEP">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMConstTrunc,LLVMConstSExt,LLVMConstZExt,LLVMConstFPTrunc,LLVMConstFPExt">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstUIToFP,LLVMConstSIToFP,LLVMConstFPToUI,LLVMConstFPToSI,LLVMConstPtrToInt,LLVMConstIntToPtr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstBitCast,LLVMConstAddrSpaceCast,LLVMConstZExtOrBitCast,LLVMConstSExtOrBitCast,LLVMConstTruncOrBitCast,LLVMConstPointerCast,LLVMConstFPCast">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstIntCast">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="LLVMConstSelect">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstExtractElement">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstInsertElement">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstShuffleVector">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMConstExtractValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMConstInsertValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMConstInlineAsm">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-uninit/></arg>
        <arg nr="5"><not-uninit/></arg>
    </function>
    <function name="LLVMBlockAddress">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetGlobalParent">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMModuleRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMIsDeclaration">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetLinkage">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMLinkage"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetLinkage">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMGetSection">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetSection">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMGetVisibility">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMVisibility"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetVisibility">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMGetDLLStorageClass">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMDLLStorageClass"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetDLLStorageClass">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMHasUnnamedAddr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetUnnamedAddr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="LLVMGetAlignment">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetAlignment">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMAddGlobal">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMAddGlobalInAddressSpace">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetNamedGlobal">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMGetFirstGlobal,LLVMGetLastGlobal,LLVMGetNextGlobal,LLVMGetPreviousGlobal">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetInitializer,">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDeleteGlobal">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetInitializer">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMIsThreadLocal,LLVMIsGlobalConstant,LLVMIsExternallyInitialized">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetThreadLocal,LLVMSetGlobalConstant,LLVMSetExternallyInitialized">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="LLVMSetThreadLocalMode">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMAddAlias">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDeleteFunction">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMHasPersonalityFn">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetPersonalityFn">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetPersonalityFn">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetIntrinsicID,LLVMGetFunctionCallConv">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetFunctionCallConv">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetGC">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetGC">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMAddAttributeAtIndex">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetAttributeCountAtIndex">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetAttributesAtIndex">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMGetEnumAttributeAtIndex">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMAttributeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetStringAttributeAtIndex">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMAttributeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="4"/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMRemoveEnumAttributeAtIndex">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMRemoveStringAttributeAtIndex">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="4"/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMAddTargetDependentFunctionAttr">
        <leak-ignore/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>

    <!-- Metadata functions (part of Core.h) -->
    <function name="LLVMMDStringInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMMDString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMMDNodeInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMMDNode">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMMetadataAsValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMValueAsMetadata">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMMetadataRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetMDString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMGetMDNodeNumOperands">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetMDNodeOperands">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>

    <!-- Basic block functions (part of Core.h) -->
    <function name="LLVMBasicBlockAsValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMValueIsBasicBlock">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMValueAsBasicBlock">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBasicBlockRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetBasicBlockName">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetBasicBlockParent,LLVMGetBasicBlockTerminator">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMCountBasicBlocks">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetBasicBlocks">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMGetFirstBasicBlock,LLVMGetLastBasicBlock,LLVMGetNextBasicBlock,LLVMGetPreviousBasicBlock,LLVMGetEntryBasicBlock">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBasicBlockRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMAppendBasicBlockInContext">
        <leak-ignore/>
        <returnValue type="LLVMBasicBlockRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMAppendBasicBlock">
        <leak-ignore/>
        <returnValue type="LLVMBasicBlockRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMInsertBasicBlockInContext">
        <leak-ignore/>
        <returnValue type="LLVMBasicBlockRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMInsertBasicBlock">
        <leak-ignore/>
        <returnValue type="LLVMBasicBlockRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMDeleteBasicBlock">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMRemoveBasicBlockFromParent">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMMoveBasicBlockBefore,LLVMMoveBasicBlockAfter">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetFirstInstruction,LLVMGetLastInstruction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Core instruction functions (part of Core.h) -->
    <function name="LLVMHasMetadata">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetMetadata">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMSetMetadata">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMGetInstructionParent">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBasicBlockRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetNextInstruction,LLVMGetPreviousInstruction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMInstructionRemoveFromParent,LLVMInstructionEraseFromParent">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetInstructionOpcode">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMOpcode"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetICmpPredicate">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMIntPredicate"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetFCmpPredicate">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMRealPredicate"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMInstructionClone">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Instruction call site and invocation functions (part of Core.h) -->
    <function name="LLVMGetNumArgOperands,LLVMGetInstructionCallConv">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetInstructionCallConv">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMSetInstrParamAlignment">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>1:</valid></arg>
    </function>
    <function name="LLVMAddCallSiteAttribute">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetCallSiteAttributeCount">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetCallSiteAttributes">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMGetCallSiteEnumAttribute">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMAttributeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetCallSiteStringAttribute">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMAttributeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><minsize type="argvalue" arg="4"/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMRemoveCallSiteEnumAttribute">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMRemoveCallSiteStringAttribute">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="4"/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetCalledValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMIsTailCall">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetTailCall">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMGetNormalDest,LLVMGetUnwindDest">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBasicBlockRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetNormalDest,LLVMSetReturnDest">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Instruction terminator functions (part of Core.h) -->
    <function name="LLVMGetNumSuccessors">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetSuccessor">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBasicBlockRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMSetSuccessor">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMIsConditional">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetCondition">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetCondition">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetSwitchDefaultDest">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBasicBlockRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Instruction alloca functions (part of Core.h) -->
    <function name="LLVMGetAllocatedType">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Instruction GEP functions (part of Core.h) -->
    <function name="LLVMIsInBounds">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetIsInBounds">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>

    <!-- Instruction Phi node functions (part of Core.h) -->
    <function name="LLVMAddIncoming">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMCountIncoming">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetIncomingValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMGetIncomingBlock">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBasicBlockRef"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>

    <!-- Instruction insert value functions (part of Core.h) -->
    <function name="LLVMGetNumIndices">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetIndices">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const unsigned*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Instruction builder functions -->
    <memory>
        <alloc init="true">LLVMCreateBuilder</alloc>
        <alloc init="true">LLVMCreateBuilderInContext</alloc>
        <dealloc>LLVMDisposeBuilder</dealloc>
    </memory>
    <function name="LLVMCreateBuilderInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBuilderRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMCreateBuilder">
        <use-retval/>
        <returnValue type="LLVMBuilderRef"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMDisposeBuilder">
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMPositionBuilder">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMPositionBuilderBefore,LLVMPositionBuilderAtEnd">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetInsertBlock">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBasicBlockRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMClearInsertionPosition">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMInsertIntoBuilder">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMInsertIntoBuilderWithName">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMSetCurrentDebugLocation">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMGetCurrentDebugLocation">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetInstDebugLocation">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMBuildRetVoid">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMBuildRet">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMBuildAggregateRet">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMBuildBr">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMBuildCondBr">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMBuildSwitch">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMBuildIndirectBr">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMBuildInvoke">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="7"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildLandingPad">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMBuildResume">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMBuildUnreachable">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMAddCase">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMAddDestination">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetNumClauses">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetClause">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMAddClause">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMIsCleanup">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetCleanup">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="LLVMBuildAdd,LLVMBuildNSWAdd,LLVMBuildNUWAdd,LLVMBuildFAddLLVMBuildSub,LLVMBuildNSWSub,LLVMBuildNUWSub,LLVMBuildFSub,LLVMBuildMul,LLVMBuildNSWMul,LLVMBuildNUWMul,LLVMBuildFMul,LLVMBuildUDiv,LLVMBuildExactUDiv,LLVMBuildSDiv,LLVMBuildExactSDiv,LLVMBuildFDiv,LLVMBuildURem,LLVMBuildSRem,LLVMBuildFRem,LLVMBuildShl,LLVMBuildLShr,LLVMBuildAShr,LLVMBuildAnd,LLVMBuildOr,LLVMBuildXor">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildBinOp">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildNeg,LLVMBuildNSWNeg,LLVMBuildNUWNeg,LLVMBuildFNeg,LLVMBuildNot">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildMalloc,LLVMBuildAlloca">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildArrayMalloc,LLVMBuildArrayAlloca">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildFree">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMBuildLoad">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildStore">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMBuildGEP,LLVMBuildInBoundsGEP">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildStructGEP">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildGlobalString,LLVMBuildGlobalStringPtr">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMGetVolatile">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetVolatile">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="LLVMGetOrdering">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMAtomicOrdering"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetOrdering">
        <leak-ignore/>
        <returnValue type="LLVMAtomicOrdering"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMBuildTrunc,LLVMBuildZExt,LLVMBuildSExt,LLVMBuildFPToUI,LLVMBuildFPToSI,LLVMBuildUIToFP,LLVMBuildSIToFP,LLVMBuildFPTrunc,LLVMBuildFPExt,LLVMBuildPtrToInt,LLVMBuildIntToPtr,LLVMBuildBitCast,LLVMBuildAddrSpaceCast,LLVMBuildZExtOrBitCast,LLVMBuildSExtOrBitCast,LLVMBuildTruncOrBitCast,LLVMBuildPointerCast,LLVMBuildIntCast,LLVMBuildFPCast">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildCast,LLVMBuildICmp,LLVMBuildFCmp">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildPhi">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildCall">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildSelect">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildVAArg">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildExtractElement,LLVMBuildExtractValue">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildInsertElement,LLVMBuildInsertValue">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildShuffleVector">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildIsNull,LLVMBuildIsNotNull">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildPtrDiff">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildFence">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMBuildAtomicRMW">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-uninit/></arg>
    </function>
    <function name="LLVMBuildAtomicCmpXchg">
        <leak-ignore/>
        <returnValue type="LLVMValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-uninit/></arg>
        <arg nr="7"><not-uninit/></arg>
    </function>
    <function name="LLVMIsAtomicSingleThread">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetAtomicSingleThread">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="LLVMGetCmpXchgSuccessOrdering,LLVMGetCmpXchgFailureOrdering">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMAtomicOrdering"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetCmpXchgSuccessOrdering,LLVMSetCmpXchgFailureOrdering">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>

    <!-- Module provider functions (part of Core.h) -->
    <memory>
        <alloc init="true">LLVMCreateModuleProviderForExistingModule</alloc>
        <dealloc>LLVMDisposeModuleProvider</dealloc>
    </memory>
    <function name="LLVMCreateModuleProviderForExistingModule">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMModuleProviderRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDisposeModuleProvider">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Memory buffer functions (Part of Core.h) -->
    <memory>
        <alloc init="true">LLVMCreateMemoryBufferWithMemoryRange</alloc>
        <alloc init="true">LLVMCreateMemoryBufferWithMemoryRangeCopy</alloc>
        <dealloc>LLVMDisposeMemoryBuffer</dealloc>
    </memory>
    <function name="LLVMCreateMemoryBufferWithContentsOfFile">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMCreateMemoryBufferWithMemoryRange">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMMemoryBufferRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>
    <function name="LLVMCreateMemoryBufferWithMemoryRangeCopy">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMMemoryBufferRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMCreateMemoryBufferWithSTDIN">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMDisposeMemoryBuffer">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetBufferSize">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="size_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetBufferStart">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Pass registry functions (part of Core.h) -->
    <function name="LLVMGetGlobalPassRegistry">
        <use-retval/>
        <returnValue type="LLVMPassRegistryRef"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Pass manager functions (part of Core.h) -->
    <memory>
        <alloc init="true">LLVMCreatePassManager</alloc>
        <alloc init="true">LLVMCreateFunctionPassManager</alloc>
        <alloc init="true">LLVMCreateFunctionPassManagerForModule</alloc>
        <dealloc>LLVMDisposePassManager</dealloc>
    </memory>
    <function name="LLVMCreatePassManager">
        <use-retval/>
        <returnValue type="LLVMPassManagerRef"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMCreateFunctionPassManagerForModule">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMPassManagerRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMCreateFunctionPassManager">
        <warn severity="warning">Deprecated function 'LLVMCreateFunctionPassManager' used.
Deprecated function 'LLVMCreateFunctionPassManager' used. This function was deprecated in commit df7df075b723e926e51555bf5aff6e231279a479. It is recommended to use LLVMCreateFunctionPassManagerForModule instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMPassManagerRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDisposePassManager">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMRunPassManager">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMInitializeFunctionPassManager,LLVMFinalizeFunctionPassManager">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMRunFunctionPassManager">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Threading functions (part of Core.h) -->
    <function name="LLVMStartMultithreaded">
        <warn severity="warning">Deprecated function 'LLVMStartMultithreaded' used.
Deprecated function 'LLVMStartMultithreaded' used. This function was deprecated in commit 39ea80cc564b22f46a2ae85450fdde35e2a59e89.

Multithreading can only be enabled/disabled with the compile-time define 'LLVM_ENABLE_THREADS'.
        </warn>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMStopMultithreaded">
        <warn severity="warning">Deprecated function 'LLVMStopMultithreaded' used.
Deprecated function 'LLVMStopMultithreaded' used. This function was deprecated in commit 39ea80cc564b22f46a2ae85450fdde35e2a59e89.

Multithreading can only be enabled/disabled with the compile-time define 'LLVM_ENABLE_THREADS'.
        </warn>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMIsMultithreaded">
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Disassembler functions -->
    <memory>
        <alloc init="true">LLVMCreateDisasm</alloc>
        <alloc init="true">LLVMCreateDisasmCPU</alloc>
        <alloc init="true">LLVMCreateDisasmCPUFeatures</alloc>
        <dealloc>LLVMDisasmDispose</dealloc>
    </memory>
    <function name="LLVMCreateDisasm">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMDisasmContextRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMCreateDisasmCPU">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMDisasmContextRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMCreateDisasmCPUFeatures">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMDisasmContextRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-uninit/></arg>
        <arg nr="7"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMDisasmDispose">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMDisasmInstruction">
        <leak-ignore/>
        <returnValue type="size_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-null/><minsize type="argvalue" arg="6"/></arg>
        <arg nr="6"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>

    <!-- Execution engine functions -->
    <memory>
        <alloc init="true">LLVMCreateGenericValueOfInt</alloc>
        <alloc init="true">LLVMCreateGenericValueOfPointer</alloc>
        <alloc init="true">LLVMCreateGenericValueOfFloat</alloc>
        <alloc init="true">LLVMRunFunction</alloc>
        <dealloc>LLVMDisposeGenericValue</dealloc>
    </memory>
    <memory>
        <alloc init="true">LLVMCreateSimpleMCJITMemoryManager</alloc>
        <dealloc>LLVMDisposeMCJITMemoryManager</dealloc>
    </memory>
    <function name="LLVMLinkInMCJIT,LLVMLinkInInterpreter">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMCreateGenericValueOfInt">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMGenericValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="LLVMCreateGenericValueOfPointer">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMGenericValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/></arg>
    </function>
    <function name="LLVMCreateGenericValueOfFloat">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMGenericValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMGenericValueIntWidth">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGenericValueToInt">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned long long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGenericValueToPointer">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGenericValueToFloat">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDisposeGenericValue">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMCreateExecutionEngineForModule,LLVMCreateInterpreterForModule,LLVMCreateJITCompilerForModule">
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
        <arg nr="1"></arg>
    </function>
    <function name="LLVMInitializeMCJITCompilerOptions">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMCreateMCJITCompilerForModule">
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMDisposeExecutionEngine">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMRunStaticConstructors,LLVMRunStaticDestructors">
        <leak-ignore/>
        <returnValue type="void"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMRunFunctionAsMain">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMRunFunction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMGenericValueRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMFreeMachineCodeForFunction">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMAddModule">
        <leak-ignore/> <!-- TODO: See if this causes false positives -->
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMRemoveModule">
        <leak-ignore/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
        <arg nr="4"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMFindFunction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="LLVMRecompileAndRelinkFunction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetExecutionEngineTargetData">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTargetDataRef"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetExecutionEngineTargetMachine">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTargetMachineRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMAddGlobalMapping">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetPointerToGlobal">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetGlobalValueAddress,LLVMGetFunctionAddress">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="uint64_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMCreateSimpleMCJITMemoryManager">
        <use-retval/>
        <returnValue type="LLVMMCJITMemoryManagerRef"/>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDisposeMCJITMemoryManager">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Initialization routines -->
    <function name="LLVMInitializeCore,LLVMInitializeTransformUtils,LLVMInitializeScalarOpts,LLVMInitializeObjCARCOpts,LLVMInitializeVectorization,LLVMInitializeInstCombine,LLVMInitializeIPO,LLVMInitializeInstrumentation,LLVMInitializeAnalysis,LLVMInitializeIPA,LLVMInitializeCodeGen,LLVMInitializeTarget">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- lto.h -->
    <memory>
        <alloc init="true">lto_module_create</alloc>
        <alloc init="true">lto_module_create_from_fd</alloc>
        <alloc init="true">lto_module_create_from_fd_at_offset</alloc>
        <alloc init="true">lto_module_create_from_memory</alloc>
        <alloc init="true">lto_module_create_from_memory_with_path</alloc>
        <alloc init="true">lto_module_create_in_local_context</alloc>
        <alloc init="true">lto_module_create_in_codegen_context</alloc>
        <dealloc>lto_module_dispose</dealloc>
    </memory>
    <memory>
        <alloc init="true">lto_codegen_create</alloc>
        <alloc init="true">lto_codegen_create_in_local_context</alloc>
        <dealloc>lto_codegen_dispose</dealloc>
    </memory>
    <function name="lto_get_version,lto_get_error_message">
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="lto_module_is_object_file">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_bool_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="lto_module_is_object_file_for_target">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_bool_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="lto_module_has_objc_category,lto_module_is_object_file_in_memory">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_bool_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="lto_module_is_object_file_in_memory_for_target">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_bool_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="lto_module_create">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_module_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="lto_module_create_from_memory">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_module_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="lto_module_create_from_memory_with_path,lto_module_create_in_local_context ">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_module_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="lto_module_create_in_codegen_context">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_module_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="lto_module_create_from_fd">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_module_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="lto_module_create_from_fd_at_offset">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_module_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="lto_module_dispose">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="lto_module_get_target_triple,lto_module_get_linkeropts">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="lto_module_set_target_triple">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="lto_module_get_num_symbols">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="lto_module_get_symbol_name">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="lto_module_get_symbol_attribute">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_symbol_attributes"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="lto_codegen_set_diagnostic_handler">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="lto_codegen_create,lto_codegen_create_in_local_context">
        <use-retval/>
        <returnValue type="lto_code_gen_t"/>
        <noreturn>false</noreturn>
    </function>
    <function name="lto_codegen_dispose">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="lto_codegen_add_module">
        <leak-ignore/>
        <returnValue type="lto_bool_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="lto_codegen_set_module">
        <leak-ignore/> <!-- TODO: See if this causes false-positives -->
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="lto_codegen_set_debug_model,lto_codegen_set_pic_model">
        <leak-ignore/>
        <returnValue type="lto_bool_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="lto_codegen_set_cpu,lto_codegen_set_assembler_path">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="lto_codegen_set_assembler_args">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="lto_codegen_add_must_preserve_symbol">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="lto_codegen_write_merged_modules">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_bool_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="lto_codegen_compile">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="lto_codegen_compile_to_file">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_bool_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="lto_codegen_optimize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_bool_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="lto_codegen_compile_optimized">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="lto_api_version">
        <use-retval/>
        <returnValue type="unsigned int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="lto_codegen_debug_options">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="lto_initialize_disassembler">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="lto_codegen_set_should_internalize,lto_codegen_set_should_embed_uselists">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>

    <!-- LinkTimeOptimizer.h -->
    <memory>
        <alloc init="true">llvm_create_optimizer</alloc>
        <dealloc>llvm_destroy_optimizer</dealloc>
    </memory>
    <function name="llvm_create_optimizer">
        <use-retval/>
        <returnValue type="llvm_lto_t"/>
        <noreturn>false</noreturn>
    </function>
    <function name="llvm_destroy_optimizer">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="llvm_read_object_file,llvm_optimize_modules">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="llvm_lto_status_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>

    <!-- ThinLTO  (part of lto.h) -->
    <memory>
        <alloc init="true">thinlto_create_codegen</alloc>
        <dealloc>thinlto_codegen_dispose</dealloc>
    </memory>
    <function name="thinlto_create_codegen">
        <use-retval/>
        <returnValue type="thinlto_code_gen_t"/>
        <noreturn>false</noreturn>
    </function>
    <function name="thinlto_codegen_dispose">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="thinlto_codegen_add_module">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="4"/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="thinlto_codegen_process">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="thinlto_module_get_num_objects,thinlto_module_get_num_object_files">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="thinlto_module_get_object">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LTOObjectBuffer"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="thinlto_codegen_set_pic_model">
        <leak-ignore/>
        <returnValue type="lto_bool_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="thinlto_codegen_set_savetemps_dir,thinlto_set_generated_objects_dir">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="thinlto_codegen_set_cpu">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="thinlto_codegen_disable_codegen,thinlto_codegen_set_codegen_only">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="thinlto_debug_options">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="lto_module_is_thinlto">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="lto_bool_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="thinlto_codegen_add_must_preserve_symbol,thinlto_codegen_add_cross_referenced_symbol">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>

    <!-- Object file reading and writing functions -->
    <memory>
        <alloc init="true">LLVMCreateObjectFile</alloc>
        <dealloc>LLVMDisposeObjectFile</dealloc>
    </memory>
    <memory>
        <alloc init="true">LLVMGetSections</alloc>
        <dealloc>LLVMDisposeSectionIterator</dealloc>
    </memory>
    <memory>
        <alloc init="true">LLVMGetSymbols</alloc>
        <dealloc>LLVMDisposeSymbolIterator</dealloc>
    </memory>
    <memory>
        <alloc init="true">LLVMGetRelocations</alloc>
        <dealloc>LLVMDisposeRelocationIterator</dealloc>
    </memory>
    <function name="LLVMCreateObjectFile">
        <use-retval/>
        <returnValue type="LLVMObjectFileRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDisposeObjectFile">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMGetSections">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMSectionIteratorRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDisposeSectionIterator">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMIsSectionIteratorAtEnd">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMMoveToNextSection">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMMoveToContainingSection">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetSymbols">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMSymbolIteratorRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDisposeSymbolIterator">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMIsSymbolIteratorAtEnd">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMMoveToNextSymbol">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetSectionName,LLVMGetSectionContents">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetSectionSize,LLVMGetSectionAddress">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="uint64_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetSectionContainsSymbol">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetRelocations">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMRelocationIteratorRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMDisposeRelocationIterator">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMIsRelocationIteratorAtEnd">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMMoveToNextRelocation">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetSymbolName,LLVMGetRelocationTypeName,LLVMGetRelocationValueString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMGetSymbolAddress,LLVMGetSymbolSize,LLVMGetRelocationOffset,LLVMGetRelocationType">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="uint64_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Target information functions -->
    <memory>
        <alloc init="true">LLVMCreateTargetData</alloc>
        <dealloc>LLVMDisposeTargetData</dealloc>
    </memory>
    <memory>
        <alloc init="true">LLVMCopyStringRepOfTargetData</alloc>
        <dealloc>LLVMDisposeMessage</dealloc>
    </memory>
    <function name="LLVMInitializeAllTargetInfos,LLVMInitializeAllTargets,LLVMInitializeAllTargetMCs,LLVMInitializeAllAsmPrinters,LLVMInitializeAllAsmParsers,LLVMInitializeAllDisassemblers">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMInitializeNativeTarget,LLVMInitializeNativeAsmParser,LLVMInitializeNativeAsmPrinter,LLVMInitializeNativeDisassembler">
        <use-retval/>
        <returnValue type="LLVMBool"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMGetModuleDataLayout">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTargetDataRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMSetModuleDataLayout">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMCreateTargetData">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTargetDataRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="LLVMDisposeTargetData">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMAddTargetLibraryInfo">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMCopyStringRepOfTargetData">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMByteOrder">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="enum LLVMByteOrdering"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMPointerSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMPointerSizeForAS">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMIntPtrType">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMIntPtrTypeForAS">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMIntPtrTypeInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMIntPtrTypeForASInContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="LLVMTypeRef"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMSizeOfTypeInBits,LLVMStoreSizeOfType,LLVMABISizeOfType">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned long long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMABIAlignmentOfType,LLVMCallFrameAlignmentOfType,LLVMPreferredAlignmentOfType,LLVMPreferredAlignmentOfGlobal">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMElementAtOffset">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMOffsetOfElement">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned long long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>

    <!-- Transforms/IPO.h -->
    <function name="LLVMAddArgumentPromotionPass,LLVMAddConstantMergePass,LLVMAddCalledValuePropagationPass,LLVMAddDeadArgEliminationPass,LLVMAddFunctionAttrsPass,LLVMAddFunctionInliningPass,LLVMAddAlwaysInlinerPass,LLVMAddGlobalDCEPass,LLVMAddGlobalOptimizerPass,LLVMAddIPConstantPropagationPass,LLVMAddPruneEHPass,LLVMAddIPSCCPPass,LLVMAddInternalizePass,LLVMAddStripDeadPrototypesPass,LLVMAddStripSymbolsPass">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Transforms/PassManagerBuilder.h -->
    <memory>
        <alloc init="true">LLVMPassManagerBuilderCreate</alloc>
        <dealloc>LLVMPassManagerBuilderDispose</dealloc>
    </memory>
    <function name="LLVMPassManagerBuilderCreate">
        <use-retval/>
        <returnValue type="LLVMPassManagerBuilderRef"/>
        <noreturn>false</noreturn>
    </function>
    <function name="LLVMPassManagerBuilderDispose">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="LLVMPassManagerBuilderSetOptLevel">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:3</valid></arg>
    </function>
    <function name="LLVMPassManagerBuilderSetSizeLevel">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:2</valid></arg>
    </function>
    <function name="LLVMPassManagerBuilderSetDisableUnitAtATime,LLVMPassManagerBuilderSetDisableUnrollLoops,LLVMPassManagerBuilderSetDisableSimplifyLibCalls">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="LLVMPassManagerBuilderUseInlinerWithThreshold">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="LLVMPassManagerBuilderPopulateFunctionPassManager,LLVMPassManagerBuilderPopulateModulePassManager">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMPassManagerBuilderPopulateLTOPassManager">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-uninit/></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>

    <!-- Transforms/Scalar.h -->
    <function name="LLVMAddAggressiveDCEPass,LLVMAddBitTrackingDCEPass,LLVMAddAlignmentFromAssumptionsPass,LLVMAddCFGSimplificationPass,LLVMAddDeadStoreEliminationPass,LLVMAddScalarizerPass,LLVMAddMergedLoadStoreMotionPass,LLVMAddGVNPass,LLVMAddNewGVNPass,LLVMAddIndVarSimplifyPass,LLVMAddInstructionCombiningPass,LLVMAddJumpThreadingPass,LLVMAddLICMPass,LLVMAddLoopDeletionPass,LLVMAddLoopIdiomPass,LLVMAddLoopRotatePass,LLVMAddLoopRerollPass,LLVMAddLoopUnrollPass,LLVMAddLoopUnswitchPass,LLVMAddMemCpyOptPass,LLVMAddPartiallyInlineLibCallsPass,LLVMAddLowerSwitchPass,LLVMAddPromoteMemoryToRegisterPass,LLVMAddReassociatePass,LLVMAddSCCPPass,LLVMAddScalarReplAggregatesPass,LLVMAddScalarReplAggregatesPassSSA,LLVMAddScalarReplAggregatesPassWithThreshold,LLVMAddSimplifyLibCallsPass,LLVMAddTailCallEliminationPass,LLVMAddConstantPropagationPass,LLVMAddDemoteMemoryToRegisterPass,LLVMAddVerifierPass,LLVMAddCorrelatedValuePropagationPass,LLVMAddEarlyCSEPass,LLVMAddEarlyCSEMemSSAPass,LLVMAddLowerExpectIntrinsicPass,LLVMAddTypeBasedAliasAnalysisPass,LLVMAddScopedNoAliasAAPass,LLVMAddBasicAliasAnalysisPass">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Transforms/Vectorize.h -->
    <function name="LLVMAddBBVectorizePass">
        <warn severity="warning">Deprecated function 'LLVMAddBBVectorizePass' used.
Deprecated function 'LLVMAddBBVectorizePass' used. It is recommended to use 'LLVMAddSLPVectorizePass' instead.
        </warn>
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="LLVMAddLoopVectorizePass,LLVMAddSLPVectorizePass">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
</def>
