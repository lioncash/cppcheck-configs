<?xml version="1.0"?>

<!-- Config file for the Python 3 C API (assumes Python 3.6 and bits of 3.7) -->

<def format="2">
    <!-- - - - - -->
    <!-- Defines -->
    <!-- - - - - -->

    <!-- boolobject.h -->
    <define name="PyBool_Check(x)" value="(Py_TYPE(x) == &amp;PyBool_Type)"/>
    <define name="Py_False" value="((PyObject *) &amp;_Py_FalseStruct)"/>
    <define name="Py_True" value="((PyObject *) &amp;_Py_TrueStruct)"/>
    <define name="Py_RETURN_FALSE" value="return Py_INCREF(Py_False), Py_False"/>
    <define name="Py_RETURN_TRUE" value="return Py_INCREF(Py_True), Py_True"/>

    <!-- bytearrayobject.h -->
    <define name="PyByteArray_Check(self)" value="PyObject_TypeCheck(self, &amp;PyByteArray_Type)"/>
    <define name="PyByteArray_CheckExact(self)" value="(Py_TYPE(self) == &amp;PyByteArray_Type)"/>
    <define name="PyByteArray_AS_STRING(self)" value="(assert(PyByteArray_Check(self)),Py_SIZE(self) ? ((PyByteArrayObject *)(self))-&gt;ob_start : _PyByteArray_empty_string)"/>
    <define name="PyByteArray_GET_SIZE(self)" value="(assert(PyByteArray_Check(self)), Py_SIZE(self))"/>

    <!-- cellobject.h -->
    <define name="PyCell_Check(op)" value="(Py_TYPE(op) == &amp;PyCell_Type)"/>
    <define name="PyCell_GET(op)" value="(((PyCellObject *)(op))-&gt;ob_ref)"/>
    <define name="PyCell_SET(op, v)" value="(((PyCellObject *)(op))->ob_ref = v)"/>

    <!-- classobject.h -->
    <define name="PyInstanceMethod_Check(op)" value="((op)->ob_type == &amp;PyInstanceMethod_Type)"/>
    <define name="PyInstanceMethod_GET_FUNCTION(meth)" value="(((PyInstanceMethodObject *)meth) -&gt; func)"/>
    <define name="PyMethod_Check(op)" value="((op)-&gt;ob_type == &amp;PyMethod_Type)"/>
    <define name="PyMethod_GET_FUNCTION(meth)" value="(((PyMethodObject *)meth) -&gt; im_func)"/>
    <define name="PyMethod_GET_SELF(meth)" value="(((PyMethodObject *)meth) -&gt; im_self)"/>

    <!-- code.h -->
    <define name="CO_OPTIMIZED" value="0x0001"/>
    <define name="CO_NEWLOCALS" value="0x0002"/>
    <define name="CO_VARARGS" value="0x0004"/>
    <define name="CO_VARKEYWORDS" value="0x0008"/>
    <define name="CO_NESTED" value="0x0010"/>
    <define name="CO_GENERATOR" value="0x0020"/>
    <define name="CO_NOFREE" value="0x0040"/>
    <define name="CO_COROUTINE" value="0x0080"/>
    <define name="CO_ITERABLE_COROUTINE" value="0x0100"/>
    <define name="CO_ASYNC_GENERATOR" value="0x0200"/>
    <define name="CO_FUTURE_DIVISION" value="0x2000"/>
    <define name="CO_FUTURE_ABSOLUTE_IMPORT" value="0x4000"/>
    <define name="CO_FUTURE_WITH_STATEMENT" value="0x8000"/>
    <define name="CO_FUTURE_PRINT_FUNCTION" value="0x10000"/>
    <define name="CO_FUTURE_UNICODE_LITERALS" value="0x20000"/>
    <define name="CO_FUTURE_BARRY_AS_BDFL" value="0x40000"/>
    <define name="CO_FUTURE_GENERATOR_STOP" value="0x80000"/>
    <define name="CO_CELL_NOT_AN_ARG" value="(-1)"/>
    <define name="CO_MAXBLOCKS" value="20"/>
    <define name="PyCode_Check(op)" value="(Py_TYPE(op) == &amp;PyCode_Type)"/>
    <define name="PyCode_GetNumFree(op)" value="(PyTuple_GET_SIZE((op)-&gt;co_freevars))"/>

    <!-- complexobject.h -->
    <define name="PyComplex_Check(op)" value="PyObject_TypeCheck(op, &amp;PyComplex_Type)"/>
    <define name="PyComplex_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyComplex_Type)"/>

    <!-- datetime.h -->
    <define name="_PyDateTime_DATE_DATASIZE" value="4"/>
    <define name="_PyDateTime_TIME_DATASIZE" value="6"/>
    <define name="_PyDateTime_DATETIME_DATASIZE" value="10"/>
    <define name="_PyTZINFO_HEAD" value="PyObject_HEAD Py_hash_t hashcode; char hastzinfo;"/>
    <define name="_PyDateTime_TIMEHEAD" value="_PyTZINFO_HEAD unsigned char data[_PyDateTime_TIME_DATASIZE];"/>
    <define name="_PyDateTime_DATETIMEHEAD" value="_PyTZINFO_HEAD unsigned char data[_PyDateTime_DATETIME_DATASIZE];"/>
    <define name="PyDateTime_GET_YEAR(o)" value="((((PyDateTime_Date*)o)-&gt;data[0] &lt;&lt; 8) | ((PyDateTime_Date*)o)-&gt;data[1])"/>
    <define name="PyDateTime_GET_MONTH(o)" value="(((PyDateTime_Date*)o)-&gt;data[2])"/>
    <define name="PyDateTime_GET_DAY(o)" value="(((PyDateTime_Date*)o)-&gt;data[3])"/>
    <define name="PyDateTime_DATE_GET_HOUR(o)" value="(((PyDateTime_DateTime*)o)-&gt;data[4])"/>
    <define name="PyDateTime_DATE_GET_MINUTE(o)" value="(((PyDateTime_DateTime*)o)-&gt;data[5])"/>
    <define name="PyDateTime_DATE_GET_SECOND(o)" value="(((PyDateTime_DateTime*)o)-&gt;data[6])"/>
    <define name="PyDateTime_DATE_GET_MICROSECOND(o)" value="((((PyDateTime_DateTime*)o)-&gt;data[7] &lt;&lt; 16) | (((PyDateTime_DateTime*)o)-&gt;data[8] &lt;&lt; 8) | ((PyDateTime_DateTime*)o)-&gt;data[9])"/>
    <define name="PyDateTime_DATE_GET_FOLD(o)" value="(((PyDateTime_DateTime*)o)-&gt;fold)"/>

    <define name="PyDateTime_TIME_GET_HOUR(o)" value="(((PyDateTime_Time*)o)-&gt;data[0])"/>
    <define name="PyDateTime_TIME_GET_MINUTE(o)" value="(((PyDateTime_Time*)o)-&gt;data[1])"/>
    <define name="PyDateTime_TIME_GET_SECOND(o)" value="(((PyDateTime_Time*)o)-&gt;data[2])"/>
    <define name="PyDateTime_TIME_GET_MICROSECOND(o)" value="((((PyDateTime_Time*)o)-&gt;data[3] &lt;&lt; 16) | (((PyDateTime_Time*)o)-&gt;data[4] &lt;&lt; 8) | ((PyDateTime_Time*)o)-&gt;data[5])"/>
    <define name="PyDateTime_TIME_GET_FOLD(o)" value="(((PyDateTime_Time*)o)-&gt;fold)"/>

    <define name="PyDateTime_DELTA_GET_DAYS(o)" value="(((PyDateTime_Delta*)o)-&gt;days)"/>
    <define name="PyDateTime_DELTA_GET_SECONDS(o)" value="(((PyDateTime_Delta*)o)-&gt;seconds)"/>
    <define name="PyDateTime_DELTA_GET_MICROSECONDS(o)" value="(((PyDateTime_Delta*)o)-&gt;microseconds)"/>

    <define name="PyDateTime_IMPORT" value="PyDateTimeAPI = (PyDateTime_CAPI *)PyCapsule_Import(PyDateTime_CAPSULE_NAME, 0)"/>

    <define name="PyDate_Check(op)" value="PyObject_TypeCheck(op, PyDateTimeAPI-&gt;DateType)"/>
    <define name="PyDate_CheckExact(op)" value="(Py_TYPE(op) == PyDateTimeAPI-&gt;DateType)"/>

    <define name="PyDateTime_Check(op)" value="PyObject_TypeCheck(op, PyDateTimeAPI-&gt;DateTimeType)"/>
    <define name="PyDateTime_CheckExact(op)" value="(Py_TYPE(op) == PyDateTimeAPI-&gt;DateTimeType)"/>

    <define name="PyTime_Check(op)" value="PyObject_TypeCheck(op, PyDateTimeAPI-&gt;TimeType)"/>
    <define name="PyTime_CheckExact(op)" value="(Py_TYPE(op) == PyDateTimeAPI-&gt;TimeType)"/>

    <define name="PyDelta_Check(op)" value="PyObject_TypeCheck(op, PyDateTimeAPI-&gt;DeltaType)"/>
    <define name="PyDelta_CheckExact(op)" value="(Py_TYPE(op) == PyDateTimeAPI-&gt;DeltaType)"/>

    <define name="PyTZInfo_Check(op)" value="PyObject_TypeCheck(op, PyDateTimeAPI-&gt;TZInfoType)"/>
    <define name="PyTZInfo_CheckExact(op)" value="(Py_TYPE(op) == PyDateTimeAPI-&gt;TZInfoType)"/>

    <define name="PyDate_FromDate(year, month, day)" value="PyDateTimeAPI-&gt;Date_FromDate(year, month, day, PyDateTimeAPI-&gt;DateType)"/>
    <define name="PyDateTime_FromDateAndTime(year, month, day, hour, min, sec, usec)" value="PyDateTimeAPI-&gt;DateTime_FromDateAndTime(year, month, day, hour,min, sec, usec, Py_None, PyDateTimeAPI-&gt;DateTimeType)"/>
    <define name="PyDateTime_FromDateAndTimeAndFold(year, month, day, hour, min, sec, usec, fold)" value="PyDateTimeAPI-&gt;DateTime_FromDateAndTimeAndFold(year, month, day, hour, min, sec, usec, Py_None, fold, PyDateTimeAPI-&gt;DateTimeType)"/>
    <define name="PyTime_FromTime(hour, minute, second, usecond)" value="PyDateTimeAPI-&gt;Time_FromTime(hour, minute, second, usecond, Py_None, PyDateTimeAPI-&gt;TimeType)"/>
    <define name="PyTime_FromTimeAndFold(hour, minute, second, usecond, fold)" value="PyDateTimeAPI-&gt;Time_FromTimeAndFold(hour, minute, second, usecond, Py_None, fold, PyDateTimeAPI-&gt;TimeType)"/>
    <define name="PyDelta_FromDSU(days, seconds, useconds)" value="PyDateTimeAPI-&gt;Delta_FromDelta(days, seconds, useconds, 1, PyDateTimeAPI-&gt;DeltaType)"/>
    <define name="PyDateTime_FromTimestamp(args)" value="PyDateTimeAPI-&gt;DateTime_FromTimestamp((PyObject*) (PyDateTimeAPI-&gt;DateTimeType), args, NULL)"/>
    <define name="PyDate_FromTimestamp(args)" value="PyDateTimeAPI-&gt;Date_FromTimestamp((PyObject*) (PyDateTimeAPI-&gt;DateType), args)"/>

    <!-- descrobject.h -->
    <define name="PyWrapperFlag_KEYWORDS" value="1"/>
    <define name="PyDescr_COMMON" value="PyDescrObject d_common"/>
    <define name="PyDescr_TYPE(x)" value="(((PyDescrObject *)(x))-&gt;d_type)"/>
    <define name="PyDescr_NAME(x)" value="(((PyDescrObject *)(x))-&gt;d_name)"/>

    <!-- errcode.h -->
    <define name="E_OK" value="10"/>
    <define name="E_EOF" value="11"/>
    <define name="E_INTR" value="12"/>
    <define name="E_TOKEN" value="13"/>
    <define name="E_SYNTAX" value="14"/>
    <define name="E_NOMEM" value="15"/>
    <define name="E_DONE" value="16"/>
    <define name="E_ERROR" value="17"/>
    <define name="E_TABSPACE" value="18"/>
    <define name="E_OVERFLOW" value="19"/>
    <define name="E_TOODEEP" value="20"/>
    <define name="E_DEDENT" value="21"/>
    <define name="E_DECODE" value="22"/>
    <define name="E_EOFS" value="23"/>
    <define name="E_EOLS" value="24"/>
    <define name="E_LINECONT" value="25"/>
    <define name="E_IDENTIFIER" value="26"/>
    <define name="E_BADSINGLE" value="27"/>

    <!-- floatobject.h -->
    <define name="PyFloat_Check(op)" value="PyObject_TypeCheck(op, &amp;PyFloat_Type)"/>
    <define name="PyFloat_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyFloat_Type)"/>
    <define name="Py_RETURN_NAN" value="return PyFloat_FromDouble(Py_NAN)"/>
    <define name="Py_RETURN_INF(sign)" value="do if(copysign(1.,sign) == 1.) { return PyFloat_FromDouble(Py_HUGE_VAL); } else { return PyFloat_FromDouble(-Py_HUGE_VAL); } while (0)"/>
    <define name="PyFloat_AS_DOUBLE(op)" value="(((PyFloatObject *)(op))-&gt;ob_fval)"/>

    <!-- frameobject.h -->
    <define name="PyFrame_Check(op)" value="(Py_TYPE(op) == &amp;PyFrame_Type)"/>

    <!-- funcobject.h -->
    <define name="PyFunction_Check" value="(Py_TYPE(op) == &amp;PyFunction_Type)"/>
    <define name="PyFunction_GET_CODE(func)" value="(((PyFunctionObject *)func) -&gt; func_code)"/>
    <define name="PyFunction_GET_GLOBAL(func)" value="(((PyFunctionObject *)func) -&gt; func_globals)"/>
    <define name="PyFunction_GET_MODULE(func)" value="(((PyFunctionObject *)func) -&gt; func_module)"/>
    <define name="PyFunction_GET_DEFAULTS(func)" value="(((PyFunctionObject *)func) -&gt; func_defaults)"/>
    <define name="PyFunction_GET_KW_DEFAULTS(func)" value="(((PyFunctionObject *)func) -&gt; func_kwdefaults)"/>
    <define name="PyFunction_GET_CLOSURE(func)" value="(((PyFunctionObject *)func) -&gt; func_closure)"/>
    <define name="PyFunction_GET_ANNOTATIONS(func)" value="(((PyFunctionObject *)func) -&gt; func_annotations)"/>

    <!-- genobject.h -->
    <define name="PyGen_Check(op)" value="PyObject_TypeCheck(op, &amp;PyGen_Type)"/>
    <define name="PyGen_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyGen_Type)"/>
    <define name="PyCoro_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyCoro_Type)"/>
    <define name="PyAsyncGen_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyAsyncGen_Type)"/>

    <!-- iterobject.h -->
    <define name="PySeqIter_Check(op)" value="(Py_TYPE(op) == &amp;PySeqIter_Type)"/>
    <define name="PyCallIter_Check(op)" value="(Py_TYPE(op) == &amp;PyCallIter_Type)"/>

    <!-- listobject.h -->
    <define name="PyList_Check(op)" value="PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)"/>
    <define name="PyList_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyList_Type)"/>

    <define name="PyList_GET_ITEM(op, i)" value="(((PyListObject *)(op))-&gt;ob_item[i])"/>
    <define name="PyList_SET_ITEM(op, i, v)" value="(((PyListObject *)(op))-&gt;ob_item[i] = (v))"/>
    <define name="PyList_GET_SIZE(op)" value="Py_SIZE(op)"/>
    <define name="_PyList_ITEMS(op)" value="(((PyListObject *)(op))-&gt;ob_item)"/>

    <!-- longobject.h -->
    <define name="PyLong_Check(op)" value="PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LONG_SUBCLASS)"/>
    <define name="PyLong_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyLong_Type)"/>
    <define name="PyLong_AS_LONG(op)" value="PyLong_AsLong(op)"/>

    <!-- memoryobject.h -->
    <define name="PyMemoryView_Check(op)" value="(Py_TYPE(op) == &amp;PyMemoryView_Type)"/>
    <define name="PyMemoryView_GET_BUFFER(op)" value="(&amp;((PyMemoryViewObject *)(op))-&gt;view)"/>
    <define name="PyMemoryView_GET_BASE(op)" value="(((PyMemoryViewObject *)(op))-&gt;view.obj)"/>

    <define name="_Py_MANAGED_BUFFER_RELEASED" value="0x001"/>
    <define name="_Py_MANAGED_BUFFER_FREE_FORMAT" value="0x002"/>

    <define name="_Py_MEMORYVIEW_RELEASED" value="0x001"/>
    <define name="_Py_MEMORYVIEW_C" value="0x002"/>
    <define name="_Py_MEMORYVIEW_FORTRAN" value="0x004"/>
    <define name="_Py_MEMORYVIEW_SCALAR" value="0x008"/>
    <define name="_Py_MEMORYVIEW_PIL" value="0x010"/>

    <!-- methodobject.h -->
    <define name="METH_VARARGS" value="0x0001"/>
    <define name="METH_KEYWORDS" value="0x0002"/>
    <define name="METH_NOARGS" value="0x0004"/>
    <define name="METH_O" value="0x0008"/>
    <define name="METH_CLASS" value="0x0010"/>
    <define name="METH_STATIC" value="0x0020"/>
    <define name="METH_COEXIST" value="0x0040"/>
    <define name="METH_FASTCALL" value="0x0080"/>

    <define name="PyCFunction_New(ML, SELF)" value="PyCFunction_NewEx((ML), (SELF), NULL)"/>
    <define name="PyCFunction_GET_FUNCTION(func)" value="(((PyCFunctionObject *)func) -&gt; m_ml -&gt; ml_meth)"/>
    <define name="PyCFunction_GET_SELF(func)" value="(((PyCFunctionObject *)func) -&gt; m_ml -&gt; ml_flags &amp; METH_STATIC ? NULL : ((PyCFunctionObject *)func) -&gt; m_self)"/>
    <define name="PyCFunction_GET_FLAGS(func)" value="(((PyCFunctionObject *)func) -&gt; m_ml -&gt; ml_flags)"/>

    <define name="PyCFunction_Check(op)" value="(Py_TYPE(op) == &amp;PyCFunction_Type)"/>

    <!-- moduleobject.h -->
    <define name="PyModule_Check(op)" value="PyObject_TypeCheck(op, &amp;PyModule_Type)"/>
    <define name="PyModule_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyModule_Type)"/>
    <define name="PyModuleDef_HEAD_INIT" value="{PyObject_HEAD_INIT(NULL), NULL, 0, NULL,}"/>

    <define name="Py_mod_create" value="1"/>
    <define name="Py_mod_exec" value="2"/>

    <!-- object.h -->
    <define name="_PyObject_HEAD_EXTRA" value=""/>
    <define name="_PyObject_EXTRA_INIT" value=""/>
    <define name="PyObject_HEAD" value="PyObject ob_base;"/>
    <define name="PyObject_HEAD_INIT(type)" value="{ _PyObject_EXTRA_INIT 1, type },"/>
    <define name="PyVarObject_HEAD_INIT(type, size)" value="{ PyObject_HEAD_INIT(type) size },"/>
    <define name="PyObject_VAR_HEAD" value="PyObject ob_base;"/>
    <define name="Py_INVALID_SIZE" value="(Py_ssize_t)-1"/>

    <define name="Py_REFCNT(ob)" value="(((PyObject*)(ob))-&gt;ob_refcnt)"/>
    <define name="Py_TYPE(ob)" value="(((PyObject*)(ob))-&gt;ob_type)"/>
    <define name="Py_SIZE(ob)" value="(((PyVarObject*)(ob))-&gt;ob_size)"/>

    <define name="PyBUF_MAX_NDIM" value="64"/>

    <define name="PyBUF_SIMPLE" value="0"/>
    <define name="PyBUF_WRITABLE" value="0x0001"/>

    <define name="PyBUF_WRITEABLE" value="PyBUF_WRITABLE"/>
    <define name="PyBUF_FORMAT" value="0x0004"/>
    <define name="PyBUF_ND" value="0x0008"/>
    <define name="PyBUF_STRIDES" value="(0x0010 | PyBUF_ND)"/>
    <define name="PyBUF_C_CONTIGUOUS" value="(0x0020 | PyBUF_STRIDES)"/>
    <define name="PyBUF_F_CONTIGUOUS" value="(0x0040 | PyBUF_STRIDES)"/>
    <define name="PyBUF_ANY_CONTIGUOUS" value="(0x0080 | PyBUF_STRIDES)"/>
    <define name="PyBUF_INDIRECT" value="(0x0100 | PyBUF_STRIDES)"/>

    <define name="PyBUF_CONTIG" value="(PyBUF_ND | PyBUF_WRITABLE)"/>
    <define name="PyBUF_CONTIG_RO" value="(PyBUF_ND)"/>

    <define name="PyBUF_STRIDED" value="(PyBUF_STRIDES | PyBUF_WRITABLE)"/>
    <define name="PyBUF_STRIDED_RO" value="(PyBUF_STRIDES)"/>

    <define name="PyBUF_RECORDS" value="(PyBUF_STRIDES | PyBUF_WRITABLE | PyBUF_FORMAT)"/>
    <define name="PyBUF_RECORDS_RO" value="(PyBUF_STRIDES | PyBUF_FORMAT)"/>

    <define name="PyBUF_FULL" value="(PyBUF_INDIRECT | PyBUF_WRITABLE | PyBUF_FORMAT)"/>
    <define name="PyBUF_FULL_RO" value="(PyBUF_INDIRECT | PyBUF_FORMAT)"/>

    <define name="PyBUF_READ" value="0x100"/>
    <define name="PyBUF_WRITE" value="0x200"/>

    <define name="PyHeapType_GET_MEMBERS(etype)" value="((PyMemberDef *)(((char *)etype) + Py_TYPE(etype)-&gt;tp_basicsize))"/>
    <define name="PyObject_TypeCheck(ob, tp)" value="(Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))"/>
    <define name="PyType_Check(op)" value="PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)"/>
    <define name="PyType_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyType_Type)"/>

    <define name="Py_PRINT_RAW" value="1"/>

    <define name="Py_TPFLAGS_HEAPTYPE" value="(1UL &lt;&lt; 9)"/>
    <define name="Py_TPFLAGS_BASETYPE" value="(1UL &lt;&lt; 10)"/>
    <define name="Py_TPFLAGS_READY" value="(1UL &lt;&lt; 12)"/>
    <define name="Py_TPFLAGS_READYING" value="(1UL &lt;&lt; 13)"/>
    <define name="Py_TPFLAGS_HAVE_GC" value="(1UL &lt;&lt; 14)"/>
    <define name="Py_TPFLAGS_HAVE_STACKLESS_EXTENSION" value="(3UL &lt;&lt; 15)"/>

    <define name="Py_TPFLAGS_HAVE_VERSION_TAG" value="(1UL &lt;&lt; 18)"/>
    <define name="Py_TPFLAGS_VALID_VERSION_TAG" value="(1UL &lt;&lt; 19)"/>

    <define name="Py_TPFLAGS_IS_ABSTRACT" value="(1UL &lt;&lt; 20)"/>

    <define name="Py_TPFLAGS_LONG_SUBCLASS" value="(1UL &lt;&lt; 24)"/>
    <define name="Py_TPFLAGS_LIST_SUBCLASS" value="(1UL &lt;&lt; 25)"/>
    <define name="Py_TPFLAGS_TUPLE_SUBCLASS" value="(1UL &lt;&lt; 26)"/>
    <define name="Py_TPFLAGS_BYTES_SUBCLASS" value="(1UL &lt;&lt; 27)"/>
    <define name="Py_TPFLAGS_UNICODE_SUBCLASS" value="(1UL &lt;&lt; 28)"/>
    <define name="Py_TPFLAGS_DICT_SUBCLASS" value="(1UL &lt;&lt; 29)"/>
    <define name="Py_TPFLAGS_BASE_EXC_SUBCLASS" value="(1UL &lt;&lt; 30)"/>
    <define name="Py_TPFLAGS_TYPE_SUBCLASS" value="(1UL &lt;&lt; 31)"/>
    <define name="Py_TPFLAGS_DEFAULT" value="(Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | Py_TPFLAGS_HAVE_VERSION_TAG | 0)"/>
    <define name="Py_TPFLAGS_HAVE_FINALIZE" value="(1UL &lt;&lt; 0)"/>

    <define name="PyType_HasFeature(t,f)" value="(((t)-&gt;tp_flags &amp; (f)) != 0)"/>
    <define name="PyType_FastSubclass(t,f)" value="PyType_HasFeature(t,f)"/>

    <define name="_Py_INC_REFTOTAL" value=""/>
    <define name="_Py_DEC_REFTOTAL" value=""/>
    <define name="_Py_REF_DEBUG_COMMA" value=""/>
    <define name="_Py_CHECK_REFCNT(OP)" value=";"/>
    <define name="_Py_DEBUG_PRINT_TOTAL_REFS()" value=""/>

    <define name="_Py_INC_TPALLOCS(OP)" value=""/>
    <define name="_Py_INC_TPFREES(OP)" value=""/>
    <define name="_Py_DEC_TPFREES(OP)" value=""/>
    <define name="_Py_COUNT_ALLOCS_COMMA" value=""/>

    <define name="_Py_NewReference(op)" value="_Py_INC_TPALLOCS(op) _Py_COUNT_ALLOCS_COMMA _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA Py_REFCNT(op) = 1)"/>
    <podtype name="_Py_ForgetReference(op)" value="_Py_INC_TPFREES(op)"/>
    <define name="_Py_Dealloc(op)" value="(_Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA (*Py_TYPE(op)-&gt;tp_dealloc)((PyObject *)(op)))"/>

    <define name="Py_INCREF(op)" value="_Py_INC_REFTOTAL _Py_REF_DEBUG_COMMA ((PyObject *)(op))-&gt;ob_refcnt++)"/>
    <define name="Py_DECREF(op)" value="do { PyObject *_py_decref_tmp = (PyObject *)(op); if (_Py_DEC_REFTOTAL  _Py_REF_DEBUG_COMMA --(_py_decref_tmp)-&gt;ob_refcnt != 0) _Py_CHECK_REFCNT(_py_decref_tmp) else _Py_Dealloc(_py_decref_tmp); } while (0)"/>
    <define name="Py_CLEAR(op)" value="do { PyObject *_py_tmp = (PyObject *)(op); if (_py_tmp != NULL) { (op) = NULL; Py_DECREF(_py_tmp); }} while (0)"/>
    <define name="Py_XINCREF(op)" value="do { PyObject *_py_xincref_tmp = (PyObject *)(op); if (_py_xincref_tmp != NULL) Py_INCREF(_py_xincref_tmp); } while (0)"/>
    <define name="Py_XDECREF(op)" value="do { PyObject *_py_xdecref_tmp = (PyObject *)(op); if (_py_xdecref_tmp != NULL) Py_DECREF(_py_xdecref_tmp); } while (0)"/>
    <define name="Py_SETREF(op, op2)" value="do { PyObject *_py_tmp = (PyObject *)(op); (op) = (op2); Py_DECREF(_py_tmp); } while (0)"/>
    <define name="Py_XSETREF(op, op2)" value="do { PyObject *_py_tmp = (PyObject *)(op); (op) = (op2); Py_XDECREF(_py_tmp); } while (0)"/>

    <define name="Py_None" value="(&amp;_Py_NoneStruct)"/>
    <define name="Py_RETURN_NONE" value="return Py_INCREF(Py_None), Py_None"/>

    <define name="Py_NotImplemented" value="(&amp;_Py_NotImplementedStruct)"/>
    <define name="Py_RETURN_NOTIMPLEMENTED" value="return Py_INCREF(Py_NotImplemented), Py_NotImplemented"/>

    <define name="Py_LT" value="0"/>
    <define name="Py_LE" value="1"/>
    <define name="Py_EQ" value="2"/>
    <define name="Py_NE" value="3"/>
    <define name="Py_GT" value="4"/>
    <define name="Py_GE" value="5"/>

    <define name="PyTrash_UNWIND_LEVEL" value="50"/>

    <define name="Py_TRASHCAN_SAFE_BEGIN(op)" value="do { PyThreadState *_tstate = PyThreadState_GET(); if (_tstate-&gt;trash_delete_nesting &lt; PyTrash_UNWIND_LEVEL) { ++_tstate-&gt;trash_delete_nesting;"/>
    <define name="Py_TRASHCAN_SAFE_END(op)" value="--_tstate-&gt;trash_delete_nesting; if (_tstate-&gt;trash_delete_later &amp;&amp; _tstate-&gt;trash_delete_nesting &lt;= 0) _PyTrash_thread_destroy_chain(); else _PyTrash_thread_deposit_object((PyObject*)op); } while (0)"/>

    <!-- objimpl.h -->
    <define name="PyObject_MALLOC" value="PyObject_Malloc"/>
    <define name="PyObject_REALLOC" value="PyObject_Realloc"/>
    <define name="PyObject_FREE" value="PyObject_Free"/>
    <define name="PyObject_Del" value="PyObject_Free"/>
    <define name="PyObject_DEL" value="PyObject_Free"/>

    <define name="PyObject_New(type, typeobj)" value="( (type *) _PyObject_New(typeobj) )"/>
    <define name="PyObject_NewVar(type, typeobj, n)" value="( (type *) _PyObject_NewVar((typeobj), (n)) )"/>
    <define name="PyObject_INIT(op, typeobj)" value="( Py_TYPE(op) = (typeobj), _Py_NewReference((PyObject *)(op)), (op) )"/>
    <define name="PyObject_INIT_VAR(op, typeobj, size)" value="( Py_SIZE(op) = (size), PyObject_INIT((op), (typeobj)) )"/>
    <define name="_PyObject_SIZE(typeobj)" value="( (typeobj)-&gt;tp_basicsize )"/>

    <define name="_PyObject_VAR_SIZE(typeobj, nitems)" value="_Py_SIZE_ROUND_UP((typeobj)-&gt;tp_basicsize + (nitems)*(typeobj)-&gt;tp_itemsize, SIZEOF_VOID_P)"/>
    <define name="PyObject_NEW(type, typeobj)" value="( (type *) PyObject_Init((PyObject *) PyObject_MALLOC( _PyObject_SIZE(typeobj) ), (typeobj)) )"/>
    <define name="PyObject_NEW_VAR(type, typeobj, n)" value="( (type *) PyObject_InitVar((PyVarObject *) PyObject_MALLOC(_PyObject_VAR_SIZE((typeobj),(n)) ),(typeobj), (n)) )"/>

    <!-- pycapsule.h -->
    <define name="PyCapsule_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyCapsule_Type)"/>

    <!-- pyctype.h -->
    <define name="PY_CTF_LOWER" value="0x01"/>
    <define name="PY_CTF_UPPER" value="0x02"/>
    <define name="PY_CTF_ALPHA" value="(PY_CTF_LOWER|PY_CTF_UPPER)"/>
    <define name="PY_CTF_DIGIT" value="0x04"/>
    <define name="PY_CTF_ALNUM" value="(PY_CTF_ALPHA|PY_CTF_DIGIT)"/>
    <define name="PY_CTF_SPACE" value="0x08"/>
    <define name="PY_CTF_XDIGIT" value="0x10"/>

    <define name="Py_ISLOWER(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_LOWER)"/>
    <define name="Py_ISUPPER(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_UPPER)"/>
    <define name="Py_ISALPHA(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_ALPHA)"/>
    <define name="Py_ISDIGIT(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_DIGIT)"/>
    <define name="Py_ISXDIGIT(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_XDIGIT)"/>
    <define name="Py_ISALNUM(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_ALNUM)"/>
    <define name="Py_ISSPACE(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_SPACE)"/>

    <define name="Py_TOLOWER(c)" value="(_Py_ctype_tolower[Py_CHARMASK(c)])"/>
    <define name="Py_TOUPPER(c)" value="(_Py_ctype_toupper[Py_CHARMASK(c)])"/>

    <!-- pymacro.h -->
    <define name="Py_MIN(x, y)" value="(((x) &gt; (y)) ? (y) : (x))"/>
    <define name="Py_MAX(x, y)" value="(((x) &gt; (y)) ? (x) : (y))"/>
    <define name="Py_ABS(x)" value="((x) &lt; 0 ? -(x) : (x))"/>
    <define name="_Py_XSTRINGIFY(x)" value="#x"/>
    <define name="Py_STRINGIFY(x)" value="_Py_XSTRINGIFY(x)"/>
    <define name="Py_MEMBER_SIZE(type, member)" value="sizeof(((type *)0)-&gt;member)"/>
    <define name="Py_CHARMASK(c)" value="((unsigned char)((c) &amp; 0xff))"/>
    <define name="Py_ARRAY_LENGTH(array)" value="(sizeof(array) / sizeof((array)[0]))"/>
    <define name="Py_UNUSED(name)" value="_unused_ ## name"/>
    <define name="_Py_SIZE_ROUND_DOWN(n, a)" value="((size_t)(n) &amp; ~(size_t)((a) - 1))"/>
    <define name="_Py_SIZE_ROUND_UP(n, a)" value="(((size_t)(n) + (size_t)((a) - 1)) &amp; ~(size_t)((a) - 1))"/>
    <define name="_Py_ALIGN_DOWN(p, a)" value="((void *)((uintptr_t)(p) &amp; ~(uintptr_t)((a) - 1)))"/>
    <define name="_Py_ALIGN_UP(p, a)" value="((void *)(((uintptr_t)(p) + (uintptr_t)((a) - 1)) &amp; ~(uintptr_t)((a) - 1)))"/>
    <define name="_Py_IS_ALIGNED(p, a)" value="(!((uintptr_t)(p) &amp; (uintptr_t)((a) - 1)))"/>

    <!-- pymath.h -->
    <define name="Py_MATH_PIl" value="3.1415926535897932384626433832795029L"/>
    <define name="Py_MATH_PI" value="3.14159265358979323846"/>
    <define name="Py_MATH_El" value="2.7182818284590452353602874713526625L"/>
    <define name="Py_MATH_E" value="2.7182818284590452354"/>
    <define name="Py_MATH_TAU" value="6.2831853071795864769252867665590057683943L"/>

    <define name="Py_IS_NAN(X)" value="isnan(X)"/>
    <define name="Py_IS_INFINITY(X)" value="isinf(X)"/>
    <define name="Py_IS_FINITE(X)" value="isfinite(X)"/>
    <define name="Py_HUGE_VAL" value="HUGE_VAL"/>
    <define name="Py_NAN" value="(Py_HUGE_VAL * 0.)"/>
    <define name="Py_OVERFLOWED(X)" value="((X) != 0.0 &amp;&amp; (errno == ERANGE || (X) == Py_HUGE_VAL || (X) == -Py_HUGE_VAL))"/>

    <!-- pymem.h -->
    <define name="PyMem_MALLOC(n)" value="((size_t)(n) &gt; (size_t)PY_SSIZE_T_MAX ? NULL : malloc((n) ? (n) : 1))"/>
    <define name="PyMem_REALLOC(n)" value="((size_t)(n) &gt; (size_t)PY_SSIZE_T_MAX ? NULL : realloc((n) ? (n) : 1))"/>
    <define name="PyMem_FREE" value="free"/>

    <define name="PyMem_New(type, n)" value="( ((size_t)(n) &gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL : ( (type *) PyMem_Malloc((n) * sizeof(type)) ) )"/>
    <define name="PyMem_NEW(type, n)" value="( ((size_t)(n) &gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL : ( (type *) PyMem_MALLOC((n) * sizeof(type)) ) )"/>

    <define name="PyMem_Resize(p, type, n)" value="( (p) = ((size_t)(n) &gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL : (type *) PyMem_Realloc((p), (n) * sizeof(type)) )"/>
    <define name="PyMem_RESIZE(p, type, n)" value="( (p) = ((size_t)(n) &gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL : (type *) PyMem_REALLOC((p), (n) * sizeof(type)) )"/>

    <define name="PyMem_Del" value="PyMem_Free"/>
    <define name="PyMem_DEL" value="PyMem_FREE"/>

    <!-- pyport.h -->
    <define name="Py_PROTO(x)" value="x">
        <warn severity="warning">Obsolete define 'Py_PROTO' used.
Obsolete define 'Py_PROTO' used. This define should not be used. It's intended for backward compatibility only.
        </warn>
    </define>
    <define name="Py_FPROTO(x)" value="Py_PROTO(x)">
        <warn severity="warning">Obsolete define 'Py_FPROTO' used.
Obsolete define 'Py_FPROTO' used. This define should not be used. It's intended for backward compatibility only.
        </warn>
    </define>

    <define name="PY_LONG_LONG" value="long long"/>
    <define name="PY_LLONG_MIN" value="LLONG_MIN"/>
    <define name="PY_LLONG_MAX" value="LLONG_MAX"/>
    <define name="PY_ULLONG_MAX" value="ULLONG_MAX"/>

    <define name="PY_INT32_T" value="int32_t"/>
    <define name="PY_INT64_T" value="int64_t"/>
    <define name="PY_UINT32_T" value="uint32_t"/>
    <define name="PY_UINT64_T" value="uint64_t"/>

    <define name="PY_SIZE_MAX" value="SIZE_MAX"/>

    <define name="SIZEOF_PY_HASH_T" value="SIZEOF_SIZE_T"/>
    <define name="SIZEOF_PY_UHASH_T" value="SIZEOF_SIZE_T"/>

    <define name="PY_SSIZE_T_MAX" value="((Py_ssize_t)(((size_t)-1)&gt;&gt;1))"/>
    <define name="PY_SSIZE_T_MIN" value="(-PY_SSIZE_T_MAX-1)"/>

    <define name="Py_LOCAL(type)" value="static type"/>
    <define name="Py_LOCAL_INLINE(type)" value="static inline type"/>

    <define name="Py_MEMCPY" value="memcpy">
        <warn severity="warning">Unnecessary macro 'Py_MEMCPY' used.
Unnecessary macro 'Py_MEMCPY' used. Historically this macro was used to work around memcpy performance on Windows. However, now it's sufficient to simply replace usages of this macro with memcpy.

See https://bugs.python.org/issue28126 for more information.
        </warn>
    </define>

    <define name="Py_ARITHMETIC_RIGHT_SHIFT(TYPE, I, J)" value="((I) &lt; 0 ? -1-((-1-(I)) &gt;&gt; (J)) : (I) &gt;&gt; (J))"/>

    <define name="Py_FORCE_EXPANSION(X)" value="X"/>

    <define name="Py_SAFE_DOWNCAST(VALUE, WIDE, NARROW)" value="(NARROW)(VALUE)"/>

    <define name="_Py_SET_EDOM_FOR_NAN(X)" value=";"/>

    <define name="Py_SET_ERRNO_ON_MATH_ERROR(X)" value="do { if (errno == 0) { if ((X) == Py_HUGE_VAL || (X) == -Py_HUGE_VAL) errno = ERANGE; else _Py_SET_EDOM_FOR_NAN(X) } } while (0)"/>
    <define name="Py_SET_ERANGE_IF_OVERFLOW(X)" value="Py_SET_ERRNO_ON_MATH_ERROR(X)"/>

    <define name="Py_ADJUST_ERANGE1(X)" value="do { if (errno == 0) { if ((X) == Py_HUGE_VAL || (X) == -Py_HUGE_VAL) errno = ERANGE; } else if (errno == ERANGE &amp;&amp; (X) == 0.0) errno = 0; } while (0)"/>
    <define name="Py_ADJUST_ERANGE2(X, Y)" value="do { if ((X) == Py_HUGE_VAL || (X) == -Py_HUGE_VAL || (Y) == Py_HUGE_VAL || (Y) == -Py_HUGE_VAL) { if (errno == 0) errno = ERANGE; } else if (errno == ERANGE) errno = 0; } while (0)"/>

    <define name="PyAPI_FUNC(RTYPE)" value="RTYPE"/>
    <define name="PyAPI_DATA(RTYPE)" value="extern RTYPE"/>
    <define name="DL_EXPORT(RTYPE)" value="RTYPE">
        <warn severity="warning">Deprecated macro 'DL_EXPORT' used.
Deprecated macro 'DL_EXPORT' used.
        </warn>
    </define>
    <define name="DL_IMPORT(RTYPE)" value="RTYPE">
        <warn severity="warning">Deprecated macro 'DL_IMPORT' used.
Deprecated macro 'DL_IMPORT' used.
        </warn>
    </define>

    <define name="Py_GCC_ATTRIBUTE(x)" value=""/>
    <define name="Py_ALIGNED(x)" value=""/>

    <define name="Py_LL(x)" value="x##LL"/>
    <define name="Py_ULL(x)" value="Py_LL(x##U)"/>

    <define name="Py_VA_COPY" value="va_copy"/>

    <define name="PY_BIG_ENDIAN" value="0"/>
    <define name="PY_LITTLE_ENDIAN" value="1"/>

    <!-- pystate.h -->
    <define name="MAX_CO_EXTRA_USERS" value="255"/>

    <define name="PyTrace_CALL" value="0"/>
    <define name="PyTrace_EXCEPTION" value="1"/>
    <define name="PyTrace_LINE" value="2"/>
    <define name="PyTrace_RETURN" value="3"/>
    <define name="PyTrace_C_CALL" value="4"/>
    <define name="PyTrace_C_EXCEPTION" value="5"/>
    <define name="PyTrace_C_RETURN" value="6"/>

    <define name="PyThreadState_GET()" value="(_PyThreadState_Current)"/>

    <!-- pystrcmp.h -->
    <define name="PyOS_strnicmp" value="PyOS_mystrnicmp"/>
    <define name="PyOS_stricmp" value="PyOS_mystricmp"/>

    <!-- pystrtod.h -->
    <define name="Py_DTSF_SIGN" value="0x01 "/>
    <define name="Py_DTSF_ADD_DOT_0" value="0x02 "/>
    <define name="Py_DTSF_ALT" value="0x04 "/>

    <define name="Py_DTST_FINITE" value="0"/>
    <define name="Py_DTST_INFINITE" value="1"/>
    <define name="Py_DTST_NAN" value="2"/>

    <!-- pythread.h -->
    <define name="NOWAIT_LOCK" value="0"/>
    <define name="WAIT_LOCK" value="1"/>

    <define name="PY_TIMEOUT_T" value="long long"/>
    <define name="PY_TIMEOUT_MAX" value="PY_LLONG_MAX"/>

    <define name="PYTHREAD_INVALID_THREAD_ID" value="((unsigned long)-1)"/>
    <define name="Py_tss_NEEDS_INIT" value="{0}"/>

    <!-- rangeobject.h -->
    <define name="PyRange_Check(op)" value="(Py_TYPE(op) == &amp;PyRange_Type)"/>

    <!-- setobject.h -->
    <define name="PySet_MINSIZE" value="8"/>
    <define name="PySet_GET_SIZE(so)" value="(assert(PyAnySet_Check(so)),(((PySetObject *)(so))-&gt;used))"/>
    <define name="PyFrozenSet_CheckExact(ob)" value="(Py_TYPE(ob) == &amp;PyFrozenSet_Type)"/>
    <define name="PyAnySet_CheckExact(ob)" value="(Py_TYPE(ob) == &amp;PySet_Type || Py_TYPE(ob) == &amp;PyFrozenSet_Type)"/>
    <define name="PyAnySet_Check(ob)" value="(Py_TYPE(ob) == &amp;PySet_Type || Py_TYPE(ob) == &amp;PyFrozenSet_Type || PyType_IsSubtype(Py_TYPE(ob), &amp;PySet_Type) || PyType_IsSubtype(Py_TYPE(ob), &amp;PyFrozenSet_Type))"/>
    <define name="PySet_Check(ob)" value="(Py_TYPE(ob) == &amp;PySet_Type || PyType_IsSubtype(Py_TYPE(ob), &amp;PySet_Type))"/>
    <define name="PyFrozenSet_Check(ob)" value="(Py_TYPE(ob) == &amp;PyFrozenSet_Type || PyType_IsSubtype(Py_TYPE(ob), &amp;PyFrozenSet_Type))"/>

    <!-- structmember.h -->
    <define name="T_SHORT" value="0"/>
    <define name="T_INT" value="1"/>
    <define name="T_LONG" value="2"/>
    <define name="T_FLOAT" value="3"/>
    <define name="T_DOUBLE" value="4"/>
    <define name="T_STRING" value="5"/>
    <define name="T_OBJECT" value="6"/>
    <define name="T_CHAR" value="7"/>
    <define name="T_BYTE" value="8"/>
    <define name="T_UBYTE" value="9"/>
    <define name="T_USHORT" value="10"/>
    <define name="T_UINT" value="11"/>
    <define name="T_ULONG" value="12"/>
    <define name="T_STRING_INPLACE" value="13"/>
    <define name="T_BOOL" value="14"/>

    <define name="T_OBJECT_EX" value="16"/>
    <define name="T_LONGLONG" value="17"/>
    <define name="T_ULONGLONG" value="18"/>

    <define name="T_PYSSIZET" value="19"/>
    <define name="T_NONE" value="20"/>

    <define name="READONLY" value="1"/>
    <define name="READ_RESTRICTED" value="2"/>
    <define name="PY_WRITE_RESTRICTED" value="4"/>
    <define name="RESTRICTED" value="(READ_RESTRICTED | PY_WRITE_RESTRICTED)"/>

    <!-- structseq.h -->
    <define name="PyStructSequence_SET_ITEM(op, i, v)" value="PyTuple_SET_ITEM(op, i, v)"/>
    <define name="PyStructSequence_GET_ITEM(op, i)" value="PyTuple_GET_ITEM(op, i)"/>

    <!-- symtable.h -->
    <define name="PySTEntry_Check(op)" value="(Py_TYPE(op) == &amp;PySTEntry_Type)"/>

    <!-- - - - - -  -->
    <!-- Data types -->
    <!-- - - - - -  -->

    <!-- bytearrayobject.h -->
    <podtype name="PyByteArrayObject"/>

    <!-- cellobject.h -->
    <podtype name="PyCellObject"/>

    <!-- classobject.h -->
    <podtype name="PyInstanceMethodObject"/>
    <podtype name="PyMethodObject"/>

    <!-- code.h -->
    <podtype name="_Py_CODEUNIT" sign="u" size="2"/>
    <podtype name="PyAddrPair"/>
    <podtype name="PyCodeObject"/>

    <!-- complexobject.h -->
    <podtype name="Py_complex"/>
    <podtype name="PyComplexObject"/>

    <!-- datetime.h -->
    <podtype name="_PyDateTime_BaseDateTime"/>
    <podtype name="_PyDateTime_BaseTime"/>
    <podtype name="_PyDateTime_BaseTZInfo"/>
    <podtype name="PyDateTime_CAPI"/>
    <podtype name="PyDateTime_Date"/>
    <podtype name="PyDateTime_DateTime"/>
    <podtype name="PyDateTime_Delta"/>
    <podtype name="PyDateTime_Time"/>
    <podtype name="PyDateTime_TZInfo"/>

    <!-- descrobject.h -->
    <podtype name="PyDescrObject"/>
    <podtype name="PyGetSetDef"/>
    <podtype name="PyGetSetDescrObject"/>
    <podtype name="PyMemberDescrObject"/>
    <podtype name="PyMethodDescrObject"/>
    <podtype name="PyWrapperDescrObject"/>

    <!-- floatobject.h -->
    <podtype name="PyFloatObject"/>

    <!-- frameobject.h -->
    <podtype name="PyFrameObject"/>
    <podtype name="PyTryBlock"/>

    <!-- funcobject.h -->
    <podtype name="PyFunctionObject"/>

    <!-- genobject.h -->
    <podtype name="PyAsyncGenObject"/>
    <podtype name="PyCoroObject"/>
    <podtype name="PyGenObject"/>

    <!-- listobject.h -->
    <podtype name="PyListObject"/>

    <!-- longobject.h -->
    <podtype name="PyLongObject"/>

    <!-- memoryobject.h -->
    <podtype name="PyMemoryViewObject"/>

    <!-- methodobject.h -->
    <podtype name="_PyCFunctionFast"/>
    <podtype name="_PyCFunctionFastWithKeywords"/>
    <podtype name="PyCFunction"/>
    <podtype name="PyCFunctionObject"/>
    <podtype name="PyCFunctionWithKeywords"/>
    <podtype name="PyMethodDef"/>
    <podtype name="PyNoArgsFunction"/>

    <!-- moduleobject.h -->
    <podtype name="PyModuleDef"/>
    <podtype name="PyModuleDef_Base"/>
    <podtype name="PyModuleDef_Slot"/>

    <!-- node.h -->
    <podtype name="node"/>

    <!-- object.h -->
    <podtype name="PyAsyncMethods"/>
    <podtype name="Py_buffer"/>
    <podtype name="PyBufferProcs"/>
    <podtype name="PyHeapTypeObject"/>
    <podtype name="PyMappingMethods"/>
    <podtype name="PyNumberMethods"/>
    <podtype name="PyObject"/>
    <podtype name="PySequenceMethods"/>
    <podtype name="PyTypeObject"/>
    <podtype name="PyType_Slot"/>
    <podtype name="PyType_Spec"/>
    <podtype name="PyVarObject"/>

    <podtype name="allocfunc"/>
    <podtype name="binaryfunc"/>
    <podtype name="descrgetfunc"/>
    <podtype name="descrsetfunc"/>
    <podtype name="destructor"/>
    <podtype name="freefunc"/>
    <podtype name="getattrfunc"/>
    <podtype name="getattrofunc"/>
    <podtype name="getbufferproc"/>
    <podtype name="getiterfunc"/>
    <podtype name="hashfunc"/>
    <podtype name="initproc"/>
    <podtype name="inquiry"/>
    <podtype name="iternextfunc"/>
    <podtype name="lenfunc"/>
    <podtype name="newfunc"/>
    <podtype name="objobjargproc"/>
    <podtype name="objobjproc"/>
    <podtype name="printfunc"/>
    <podtype name="releasebufferproc"/>
    <podtype name="reprfunc"/>
    <podtype name="richcmpfunc"/>
    <podtype name="setattrfunc"/>
    <podtype name="setattrofunc"/>
    <podtype name="ssizeargfunc"/>
    <podtype name="ssizeobjargproc"/>
    <podtype name="ssizessizeargfunc"/>
    <podtype name="ssizessizeobjargproc"/>
    <podtype name="ternaryfunc"/>
    <podtype name="traverseproc"/>
    <podtype name="unaryfunc"/>
    <podtype name="visitproc"/>
    <podtype name="writebufferproc"/>

    <!-- objimpl.h -->
    <podtype name="PyGC_Head"/>
    <podtype name="PyObjectArenaAllocator"/>

    <!-- pyarena.h -->
    <podtype name="PyArena"/>

    <!-- pycapsule.h -->
    <podtype name="PyCapsule_Destructor"/>

    <!-- pyconfig.h -->
    <podtype name="ssize_t" sign="s"/>

    <!-- pyerrors.h -->
    <podtype name="PyBaseExceptionObject"/>
    <podtype name="PyEnvironmentErrorObject"/>
    <podtype name="PyImportErrorObject"/>
    <podtype name="PyOSErrorObject"/>
    <podtype name="PyStopIterationObject"/>
    <podtype name="PySyntaxErrorObject"/>
    <podtype name="PySystemExitObject"/>
    <podtype name="PyUnicodeErrorObject"/>
    <podtype name="PyWindowsErrorObject"/>

    <!-- pylifecycle.h -->
    <podtype name="PyOS_sighandler_t"/>

    <!-- pymem.h -->
    <podtype name="_PyTraceMalloc_domain_t" sign="u"/>
    <podtype name="PyMemAllocatorDomain"/>
    <podtype name="PyMemAllocatorEx"/>

    <!-- pyport.h -->
    <podtype name="Py_hash_t" size="s"/>
    <podtype name="Py_intptr_t" sign="s"/>
    <podtype name="Py_ssize_t" sign="s"/>
    <podtype name="Py_ssize_clean_t" sign="s"/>
    <podtype name="Py_uhash_t" sign="u"/>
    <podtype name="Py_uintptr_t" sign="u"/>

    <!-- pystate.h -->
    <podtype name="PyGILState_STATE"/>
    <podtype name="PyInterpreterState"/>
    <podtype name="PyThreadFrameGetter"/>
    <podtype name="PyThreadState"/>
    <podtype name="Py_tracefunc"/>

    <!-- pythread.h -->
    <podtype name="Py_tss_t"/>
    <podtype name="PyLockStatus"/>
    <podtype name="PyThread_type_lock"/>
    <podtype name="PyThread_type_sema"/>

    <!-- setobject.h -->
    <podtype name="PySetObject"/>

    <!-- structmember.h -->
    <podtype name="PyMemberDef"/>

    <!-- structseq.h -->
    <podtype name="PyStructSequence"/>
    <podtype name="PyStructSequence_Desc"/>
    <podtype name="PyStructSequence_Field"/>

    <!-- symtable.h -->
    <podtype name="PySTEntryObject"/>
    <podtype name="symtable"/>

    <!-- - - - - - -->
    <!-- Functions -->
    <!-- - - - - - -->

    <!-- Header: abstract.h | Source files: Objects/call.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_PyObject_FastCallDict</alloc>
        <alloc init="true">_PyMethodDef_RawFastCallDict</alloc>
        <alloc init="true">_PyCFunction_FastCallDict</alloc>
        <alloc init="true">_PyObject_FastCallKeywords</alloc>
        <alloc init="true">_PyFunction_FastCallDict</alloc>
        <alloc init="true">_PyFunction_FastCallKeywords</alloc>
        <alloc init="true">_PyMethodDef_RawFastCallKeywords</alloc>
        <alloc init="true">_PyCFunction_FastCallKeywords</alloc>
        <alloc init="true">_PyObject_FastCall_Prepend</alloc>
        <alloc init="true">_PyObject_CallFunction_SizeT</alloc>
        <alloc init="true">_PyObject_CallMethodId_SizeT></alloc>
        <alloc init="true">_PyObject_CallMethodIdObjArgs</alloc>
        <alloc init="true">_PyStack_AsDict</alloc>
        <alloc init="true">_PyStack_AsTuple</alloc>
        <alloc init="true">_PyStack_AsTupleSlice</alloc>
        <alloc init="true">PyEval_CallFunction</alloc>
        <alloc init="true">PyEval_CallMethod</alloc>
        <alloc init="true">PyEval_CallObjectWithKeywords</alloc>
        <alloc init="true">PyObject_Call</alloc>
        <alloc init="true">PyObject_CallFunction</alloc>
        <alloc init="true">PyObject_CallFunctionObjArgs</alloc>
        <alloc init="true">PyObject_CallMethod</alloc>
        <alloc init="true">PyObject_CallMethodObjArgs</alloc>
        <alloc init="true">PyObject_CallObject</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyObject_HasFastCall">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_CheckFunctionResult">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyObject_FastCallDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyMethodDef_RawFastCallDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyCFunction_FastCallDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyObject_FastCallKeywords">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_Call">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyFunction_FastCallDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyFunction_FastCallKeywords">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyMethodDef_RawFastCallKeywords">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyCFunction_FastCallKeywords">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_Call">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyEval_CallObjectWithKeywords">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_CallObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyObject_FastCall_Prepend">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_CallFunction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyEval_CallFunction">
        <warn severity="warning">Obsolescent function 'PyEval_CallFunction' used.
Obsolescent function 'PyEval_CallFunction' used. This function is only kept in the API for backwards compatibility.

Consider using 'PyObject_CallFunction' instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyObject_CallFunction_SizeT">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyObject_CallMethod">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyEval_CallMethod">
        <warn severity="warning">Obsolescent function 'PyEval_CallMethod' used.
Obsolescent function 'PyEval_CallMethod' used. This function is only kept in the API for backwards compatibility.

Consider using 'PyObject_CallMethod' instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyObject_CallMethodId">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyObject_CallMethodId_SizeT">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyObject_CallMethodObjArgs">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_CallMethodIdObjArgs">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_CallFunctionObjArgs">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyStack_AsTuple">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyStack_AsTupleSlice">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyStack_AsDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyStack_UnpackDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/></arg>
        <arg nr="5"><not-bool/><not-null/></arg>
    </function>

    <!-- Header: boolobject.h | Source file: Objects/boolobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyBool_FromLong</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyBool_FromLong">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: bytearrayobject.h | Source file: Objects/bytearrayobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyByteArray_FromObject</alloc>
        <alloc init="true">PyByteArray_FromStringAndSize</alloc>
        <alloc init="true">PyByteArray_Concat</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyByteArray_FromObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyByteArray_FromStringAndSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyByteArray_Concat">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyByteArray_Size">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyByteArray_AsString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyByteArray_Resize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: cellobject.h | Source file: Objects/cellobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyCell_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyCell_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCell_Get">
        <leak-ignore/>
        <use-retval/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCell_Set">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: classobject.h | Source file: Objects/classobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyInstanceMethod_New</alloc>
        <alloc init="true">PyMethod_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyMethod_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMethod_Self">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyInstanceMethod_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyInstanceMethod_Function">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMethod_ClearFreeList">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: code.h | Source file: Objects/codeobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyCode_New</alloc>
        <alloc init="true">PyCode_NewEmpty</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyCode_New">
        <use-retval/>
        <returnValue type="PyCodeObject*"/>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="7"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="8"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="9"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="10"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="11"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="12"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="13"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="14"><not-bool/><not-uninit/></arg>
        <arg nr="15"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCode_NewEmpty">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyCodeObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: complexobject.h | Source file: Objects/complexobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyComplex_FromCComplex</alloc>
        <alloc init="true">PyComplex_FromDoubles</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyComplex_FromCComplex">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
    </function>
    <function name="PyComplex_FromDoubles">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyComplex_RealAsDouble,PyComplex_ImagAsDouble">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyComplex_AsCComplex">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_complex"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_c_diff,_Py_c_pow,_Py_c_prod,_Py_c_quot,_Py_c_sum">
        <const/>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_complex"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="_Py_c_neg">
        <const/>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_complex"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
    </function>
    <function name="_Py_c_abs">
        <const/>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
    </function>

    <!-- Header: descrobject.h | Source file: Objects/descrobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyDescr_NewGetSet</alloc>
        <alloc init="true">PyDescr_NewMember</alloc>
        <alloc init="true">PyDescr_NewMethod</alloc>
        <alloc init="true">PyDescr_NewWrapper</alloc>
        <alloc init="true">PyDescr_NewClassMethod</alloc>
        <alloc init="true">PyWrapper_New</alloc>
        <alloc init="true">PyDictProxy_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyDescr_NewGetSet">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDescr_NewMember">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyDescr_NewMethod">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDescr_NewWrapper">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyDescr_NewClassMethod">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDictProxy_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyWrapper_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: fileobject.h | Source file: Objects/fileobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyFile_FromFd</alloc>
        <alloc init="true">PyFile_GetLine</alloc>
        <alloc init="true">PyFile_NewStdPrinter</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyFile_FromFd">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="6"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="7"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="8"><not-uninit/></arg>
    </function>
    <function name="PyFile_GetLine">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyFile_WriteObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyFile_WriteString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_AsFileDescriptor">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="Py_UniversalNewlineFgets">
        <leak-ignore/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"></arg>
    </function>
    <function name="PyFile_NewStdPrinter">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: fileutils.h | Source files: Python/fileutils.c -->
    <resource>
        <alloc init="true">_Py_open</alloc>
        <alloc init="true">_Py_open_noraise</alloc>
        <dealloc>close</dealloc>
    </resource>
    <resource>
        <alloc init="true">_Py_fopen</alloc>
        <alloc init="true">_Py_fopen_obj</alloc>
        <alloc init="true">_Py_wfopen</alloc>
        <dealloc>fclose</dealloc>
    </resource>
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_Py_device_encoding</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <memory>
        <alloc init="true">Py_DecodeLocale</alloc>
        <dealloc>PyMem_RawFree</dealloc>
    </memory>
    <memory>
        <alloc init="true">Py_EncodeLocale</alloc>
        <dealloc>PyMem_Free</dealloc>
    </memory>
    <function name="_Py_device_encoding">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="Py_DecodeLocale">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="wchar_t*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="Py_EncodeLocale">
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="_Py_time_t_to_FILE_TIME">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="_Py_fstat,_Py_fstat_noraise">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="_Py_stat">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="_Py_get_inheritable">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_set_inheritable">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="_Py_open,_Py_open_noraise">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_wfopen">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="FILE*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_Py_fopen,_Py_fopen_obj">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="FILE*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_Py_read">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-null/><valid>0:</valid></arg>
    </function>
    <function name="_Py_write,_Py_write_noraise">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_Py_wrealpath">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="wchar_t*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_Py_wgetcwd">
        <leak-ignore/>
        <returnValue type="wchar_t*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_Py_dup">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_get_blocking">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_set_blocking">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>

    <!-- Header: floatobject.h | Source files: Objects/floatobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyFloat_FromDouble</alloc>
        <alloc init="true">PyFloat_FromString</alloc>
        <alloc init="true">PyFloat_GetInfo</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyFloat_GetMax,PyFloat_GetMin">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
    </function>
    <function name="PyFloat_GetInfo">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyFloat_FromDouble">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyFloat_FromString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFloat_AsDouble">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyFloat_Init">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyFloat_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyFloat_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyFloat_DebugMallocStats">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyFloat_Pack2,_PyFloat_Pack4,_PyFloat_Pack8">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="_PyFloat_Unpack2,_PyFloat_Unpack4,_PyFloat_Unpack8">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>

    <!-- Header: frameobject.h | Source files: Objects/frameobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyFrame_New</alloc>
        <alloc init="true">_PyFrame_New_NoTrack</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyFrame_GetLineNumber">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyFrame_Init">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyFrame_New,_PyFrame_New_NoTrack">
        <use-retval/>
        <returnValue type="PyFrameObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFrame_BlockSetup">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyFrame_BlockPop">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyTryBlock*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFrame_FastToLocalsWithError">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFrame_FastToLocals">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFrame_LocalsToFast">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="PyFrame_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyFrame_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyFrame_DebugMallocStats">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: funcobject.h | Source files: Objects/funcobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyClassMethod_New</alloc>
        <alloc init="true">PyFunction_New</alloc>
        <alloc init="true">PyFunction_NewWithQualName</alloc>
        <alloc init="true">PyStaticMethod_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyFunction_NewWithQualName">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyFunction_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFunction_GetCode,PyFunction_GetGlobals,PyFunction_GetModule,PyFunction_GetDefaults,PyFunction_GetKwDefaults,PyFunction_GetClosure,PyFunction_GetAnnotations">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFunction_SetDefaults,PyFunction_SetKwDefaults,PyFunction_SetClosure,PyFunction_SetAnnotations">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyClassMethod_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStaticMethod_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: genobject.h | Source files: Objects/genobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_PyGen_Send</alloc>
        <alloc init="true">_PyGen_yf</alloc>
        <alloc init="true">_PyAsyncGenValueWrapperNew</alloc>
        <alloc init="true">PyAsyncGen_New</alloc>
        <alloc init="true">PyCoro_New</alloc>
        <alloc init="true">PyGen_NewWithQualName</alloc>
        <alloc init="true">PyGen_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyGen_Finalize">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyGen_Send">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyGen_yf">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyGen_SetStopIterationValue">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyGen_FetchStopIterationValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyGen_NewWithQualName">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyGen_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyGen_NeedsFinalizing">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyCoro_GetAwaitableIter">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCoro_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyAsyncGen_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyAsyncGen_ClearFreeLists">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyAsyncGen_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyAsyncGenValueWrapperNew">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: iterobject.h | Source files: Objects/iterobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PySeqIter_New</alloc>
        <alloc init="true">PyCallIter_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PySeqIter_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCallIter_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: listobject.h | Source files: Objects/listobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyList_New</alloc>
        <alloc init="true">PyList_GetSlice</alloc>
        <alloc init="true">PyList_AsTuple</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyList_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyList_Size">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_GetItem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyList_SetItem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_Insert">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_Append">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_GetSlice">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyList_SetSlice">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyList_Sort">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_Reverse">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_AsTuple">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"></arg>
    </function>

    <!-- Header: longobject.h | Source files: Objects/longobject.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">_PyLong_New</alloc>
        <alloc init="true">_PyLong_Copy</alloc>
        <alloc init="true">PyLong_FromLong></alloc>
        <alloc init="true">PyLong_FromUnsignedLong</alloc>
        <alloc init="true">PyLong_FromDouble</alloc>
        <alloc init="true">PyLong_FromVoidPtr</alloc>
        <alloc init="true">PyLong_FromUnsignedLongLong</alloc>
        <alloc init="true">PyLong_FromSsize_t</alloc>
        <alloc init="true">PyLong_FromSize_t</alloc>
        <alloc init="true">PyLong_FromString</alloc>
        <alloc init="true">PyLong_FromUnicode</alloc>
        <alloc init="true">PyLong_FromUnicodeObject</alloc>
        <alloc init="true">_PyLong_GCD</alloc>
        <alloc init="true">_PyLong_DivmodNear</alloc>
        <alloc init="true">PyLong_GetInfo</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyLong_New">
        <use-retval/>
        <returnValue type="PyLongObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyLong_Copy">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_FromLong,PyLong_FromUnsignedLong,PyLong_FromDouble,PyLong_FromLongLong,PyLong_FromVoidPtr,PyLong_FromUnsignedLongLong,PyLong_FromSsize_t,PyLong_FromSize_t">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsLongAndOverflow">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="PyLong_AsLong">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsSsize_t">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsUnsignedLong">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsSize_t">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="size_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsUnsignedLongMask">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsVoidPtr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsLongLong">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="long long*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsLongLongAndOverflow">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="long long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="PyLong_AsDouble">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsUnsignedLongLong,PyLong_AsUnsignedLongLongMask">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned long long*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_FromString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>2:36</valid></arg>
    </function>
    <function name="PyLong_FromUnicode">
        <warn severity="warning">Deprecated function 'PyLong_FromUnicode' used.
Deprecated function 'PyLong_FromUnicode' used. This function has been deprecated since Python 3.3 and is going to be removed in 4.0. This function is part of the old-style Py_UNICODE API.

Consider migrating to using 'PyLong_FromUnicodeObject' instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>2:36</valid></arg>
    </function>
    <function name="PyLong_FromUnicodeObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>2:36</valid></arg>
    </function>
    <function name="_PyLong_GCD">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyLong_DivmodNear">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_GetInfo">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyLong_Init">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyLong_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: memoryobject.h | Source files: Objects/memoryobject.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyMemoryView_FromMemory</alloc>
        <alloc init="true">PyMemoryView_FromObject</alloc>
        <alloc init="true">PyMemoryView_GetContiguous</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyMemoryView_FromMemory">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyMemoryView_FromObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMemoryView_GetContiguous">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: methodobject.h | Source files: Objects/methodobject.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyCFunction_New</alloc>
        <alloc init="true">PyCFunction_NewEx</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyCFunction_New">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_NewEx">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_GetFunction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_GetSelf">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_GetFlags">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyCFunction_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyCFunction_DebugMallocStats">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: moduleobject.h | Source files: Objects/moduleobject.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyModule_NewObject</alloc>
        <alloc init="true">PyModule_New</alloc>
        <alloc init="true">PyModule_Create</alloc>
        <alloc init="true">PyModule_Create2</alloc>
        <alloc init="true">PyModule_FromDefAndSpec</alloc>
        <alloc init="true">PyModule_FromDefAndSpec2</alloc>
        <alloc init="true">PyModule_GetNameObject</alloc>
        <alloc init="true">PyModule_GetFilenameObject</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyModuleDef_Init">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_NewObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_New">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyModule_Create">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_Create2">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyModule_FromDefAndSpec">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyModule_FromDefAndSpec2">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyModule_ExecDef">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_AddFunctions">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_SetDocString">
        <leak-ignore/>
        <use-retval/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyModule_GetDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetNameObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetName">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetFilenameObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetFilename">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetDef">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyModuleDef*"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetState">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: namespaceobject.h | Source files: Objects/namespaceobjects.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">_PyNamespace_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyNamespace_New">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: node.h | Source files: Parser/node.c, Parser/listnode.c -->
    <memory>
        <alloc init="true">PyNode_New</alloc>
        <dealloc>PyNode_Free</dealloc>
    </memory>
    <function name="PyNode_New">
        <use-retval/>
        <returnValue type="node*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyNode_Free">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyNode_AddChild">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyNode_SizeOf">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyNode_ListTree">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: object.h | Source file: Objects/object.c -->
    <!-- TODO: Should probably flag these as 'allocations' and 'deallocations'       -->
    <!--       even though they really affect the reference count of the give object -->
    <!--       Need to see if there's a decent way of tracking these.                -->
    <function name="Py_IncRef,Py_DecRef">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: objimpl.h | Source files: Objects/object.c -->
    <memory>
        <alloc init="false">PyObject_Malloc</alloc>
        <alloc init="true">PyObject_Calloc</alloc>
        <alloc init="true">_PyObject_New</alloc>
        <alloc init="true">_PyObject_NewVar</alloc>
        <dealloc>PyObject_Free</dealloc>
    </memory>
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyObject_Repr</alloc>
        <alloc init="true">PyObject_Str</alloc>
        <alloc init="true">PyObject_ASCII</alloc>
        <alloc init="true">PyObject_Bytes</alloc>
        <alloc init="true">PyObject_RichCompare</alloc>
        <alloc init="true">PyObject_GetAttrString</alloc>
        <alloc init="true">PyObject_GetAttr</alloc>
        <alloc init="true">PyObject_Dir</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyObject_Malloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyObject_Calloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>1:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyObject_Realloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_Py_GetAllocatedBlocks">
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyObject_Init">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_InitVar">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyVarObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyObject_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_NewVar">
        <use-retval/>
        <returnValue type="PyVarObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_CallFinalizer">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_CallFinalizerFromDealloc">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_Print">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_Repr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_Str">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_ASCII">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_Bytes">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_RichCompare">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_RichCompareBool">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_HashNotImplemented">
        <leak-ignore/>
        <returnValue type="Py_hash_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_Hash">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_hash_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_GetAttrString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyObject_HasAttrString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyObject_SetAttrString">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_GetAttr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_HasAttr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_SetAttr">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_SelfIter">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_GenericGetAttr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_GenericSetDict">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_IsTrue">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_Not">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCallable_Check">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_Dir">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_NewReference">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
    </function>
    <function name="_Py_ForgetReference">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_Dealloc">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_PrintReferences,_Py_PrintReferenceAddresses">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_GetObjects">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="Py_ReprEnter">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="Py_ReprLeave">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: osmodule.h | Source files: Modules/posixmodule.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyOS_FSPath</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyOS_FSPath">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: pyarena.h | Source file: Object/pyarena.c -->
    <memory>
        <alloc init="true">PyArena_New</alloc>
        <dealloc>PyArena_Free</dealloc>
    </memory>

    <function name="PyArena_New">
        <use-retval/>
        <returnValue type="PyArena*"/>
    </function>
    <function name="PyArena_Free">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyArena_Malloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyArena_AddPyObject">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: pycapsule.h | Source files: Objects/capsule.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyCapsule_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyCapsule_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_GetPointer">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyCapsule_GetDestructor">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyCapsule_Destructor"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_GetContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_GetName">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_Import">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_IsValid">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyCapsule_SetContext">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_SetDestructor">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_SetName">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyCapsule_SetPointer">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: pyerrors.h, warnings.h | Source files: Module/signalmodule.c, Python/errors.c, Python/_warnings.c, Python/pylifecycle.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyErr_NewException</alloc>
        <alloc init="true">PyErr_NewExceptionWithDoc</alloc>
        <alloc init="true">PyException_GetTraceback</alloc>
        <alloc init="true">PyException_GetContext</alloc>
        <alloc init="true">PyException_GetCause</alloc>
        <alloc init="true">PyUnicodeDecodeError_Create</alloc>
        <alloc init="true">PyUnicodeEncodeError_Create</alloc>
        <alloc init="true">PyUnicodeTranslateError_Create</alloc>
        <alloc init="true">PyUnicodeDecodeError_GetEncoding</alloc>
        <alloc init="true">PyUnicodeEncodeError_GetEncoding</alloc>
        <alloc init="true">PyUnicodeDecodeError_GetObject</alloc>
        <alloc init="true">PyUnicodeEncodeError_GetObject</alloc>
        <alloc init="true">PyUnicodeTranslateError_GetObject</alloc>
        <alloc init="true">PyUnicodeDecodeError_GetReason</alloc>
        <alloc init="true">PyUnicodeEncodeError_GetReason</alloc>
        <alloc init="true">PyUnicodeTranslateError_GetReason</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyErr_Clear">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_FatalError">
        <returnValue type="void"/>
        <noreturn>true</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_WriteUnraisable">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetString">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_SetObject">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyErr_Format">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><formatstr/><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_FormatV">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="PyErr_SetNone">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyErr_BadArgument">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_NoMemory">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_SetFromErrno">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetFromErrnoWithFilenameObject">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetFromErrnoWithFilenameObjects">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetFromErrnoWithFilename">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_SetFromWindowsErr">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetExcFromWindowsErr">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetFromWindowsErrWithFilename">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_SetExcFromWindowsErrWithFilenameObject">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetExcFromWindowsErrWithFilenameObjects">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetExcFromWindowsErrWithFilename">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_SetImportError">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SyntaxLocationObject">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SyntaxLocationEx">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SyntaxLocation">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_BadInternalCall">
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_WarnEx">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetImportErrorSubclass">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_WarnExplicitObject">
        <leak-ignore/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_WarnExplicit">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_WarnFormat">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_ResourceWarning">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyOS_snprintf">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><formatstr/><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyOS_vsnprintf">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/></arg>
    </function>
    <function name="PyErr_Occurred">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_ExceptionMatches">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_GivenExceptionMatches">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_Fetch">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="PyErr_Restore">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_NormalizeException">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="PyErr_GetExcInfo">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="PyErr_SetExcInfo">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_CheckSignals">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_SetInterrupt">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PySignal_SetWakeupFd">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_NewException">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_NewExceptionWithDoc">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyException_GetTraceback,PyException_GetContext,PyException_GetCause">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyException_SetTraceback">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyException_SetContext">
        <use-retval/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyException_SetCause">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_Create,PyUnicodeEncodeError_Create,PyUnicodeTranslateError_Create">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicodeDecodeError_GetEncoding,PyUnicodeEncodeError_GetEncoding">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_GetObject,PyUnicodeEncodeError_GetObject,PyUnicodeTranslateError_GetObject">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_GetStart,PyUnicodeEncodeError_GetStart,PyUnicodeTranslateError_GetStart">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="PyUnicodeDecodeError_SetStart,PyUnicodeEncodeError_SetStart,PyUnicodeTranslateError_SetStart">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_GetEnd,PyUnicodeEncodeError_GetEnd,PyUnicodeTranslateError_GetEnd">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="PyUnicodeDecodeError_SetEnd,PyUnicodeEncodeError_SetEnd,PyUnicodeTranslateError_SetEnd">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_GetReason,PyUnicodeEncodeError_GetReason,PyUnicodeTranslateError_GetReason">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_SetReason,PyUnicodeEncodeError_SetReason,PyUnicodeTranslateError_SetReason">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>

    <!-- Header: pylifecycle.h | Source files: PC/getpathp.c, Python/pylifecycle.c, Python/sysmodule.c -->
    <function name="Py_Initialize">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_InitializeEx">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/><valid>0:1</valid></arg>
    </function>
    <function name="Py_Finalize">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_FinalizeEx">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_IsInitialized">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_SetStandardStreamEncoding">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_SetProgramName">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_GetProgramName,Py_GetPrefix,Py_GetExecPrefix,Py_GetProgramFullPath,Py_GetPath,Py_GetPythonHome">
        <use-retval/>
        <returnValue type="wchar_t*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_SetPath">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="Py_GetVersion,Py_GetPlatform,Py_GetCopyright,Py_GetCompiler,Py_GetBuildInfo">
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PySys_SetArgv">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PySys_SetArgvEx">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="Py_SetPythonHome">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_FdIsInteractive">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_Exit">
        <returnValue type="void"/>
        <noreturn>true</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="Py_AtExit">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyOS_getsig">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyOS_sighandler_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyOS_setsig">
        <leak-ignore/>
        <returnValue type="PyOS_sighandler_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: pymem.h | Source file: Object/obmalloc.c -->
    <memory>
        <alloc init="false">PyMem_RawMalloc</alloc>
        <alloc init="true">PyMem_RawCalloc</alloc>
        <alloc init="true">PyMem_RawStrdup</alloc>
        <dealloc>PyMem_RawFree</dealloc>
    </memory>
    <memory>
        <alloc init="false">PyMem_Malloc</alloc>
        <alloc init="true">PyMem_Calloc</alloc>
        <alloc init="true">PyMem_Strdup</alloc>
        <dealloc>PyMem_Free</dealloc>
    </memory>

    <function name="_PyMem_SetupAllocators">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyMem_PymallocEnabled">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyTraceMalloc_Track">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyTraceMalloc_Untrack">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyTraceMalloc_GetTraceback">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_RawMalloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_RawCalloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>1:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_RawRealloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_RawFree">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyMem_Malloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_Calloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>1:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_Realloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_Free">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyMem_RawStrdup">
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyMem_Strdup">
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyMem_GetAllocator">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:2</valid></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="PyMem_SetAllocator">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:2</valid></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMem_SetupDebugHooks">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: pystrcmp.h | Source file: Python/pystrcmp.c -->
    <function name="PyOS_mystrnicmp">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyOS_mystricmp">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>

    <!-- Header: pystrhex.h | Source file: Python/pystrhex.c -->
    <function name="_Py_strhex,_Py_strhex_bytes">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>

    <!-- Header: pystrtod.h | Source file: Python/pystrtod.c -->
    <memory>
        <alloc init="true">PyOS_double_to_string</alloc>
        <dealloc>PyMem_Free</dealloc>
    </memory>
    <function name="PyOS_string_to_double">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="PyOS_double_to_string">
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/></arg>
    </function>
    <function name="PyOS_ascii_atof">
        <warn severity="warning">Obsolete function 'PyOS_ascii_atof' used.
Obsolete function 'PyOS_ascii_atof' used. This function is deprecated in Python 3.1 and removed in Python 3.2. 'PyOS_string_to_double' should be used instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyOS_ascii_formatd">
        <warn severity="warning">Obsolete function 'PyOS_ascii_formatd' used.
Obsolete function 'PyOS_ascii_formatd' used. This function is removed in Python 2.7 and 3.1. 'PyOS_double_to_string' should be used instead.
        </warn>
        <leak-ignore/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyOS_ascii_strtod">
        <warn severity="warning">Obsolete function 'PyOS_ascii_strtod' used.
Obsolete function 'PyOS_ascii_strtod' used. This function is deprecated in Python 2.7 and 3.1 and removed in Python 3.2. 'PyOS_string_to_double' should be used instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="_Py_parse_inf_or_nan">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="_Py_string_to_number_with_underscores">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/></arg>
        <arg nr="6"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: pythonrun | Source files: Python/pythonrun.c -->
    <function name="PyErr_Print">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_PrintEx">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
    </function>

    <!-- Header: pythread.h | Source files: -->
    <resource>
        <alloc init="true">PyThread_create_key</alloc>
        <dealloc>PyThread_delete_key</dealloc>
    </resource>
    <resource>
        <alloc init="true">PyThread_tss_alloc</alloc>
        <dealloc>PyThread_tss_free</dealloc>
    </resource>
    <function name="PyThread_create_key">
        <warn severity="warning">Deprecated function 'PyThread_create_key' used.
Deprecated function 'PyThread_create_key' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_delete_key">
        <warn severity="warning">Deprecated function 'PyThread_delete_key' used.
Deprecated function 'PyThread_delete_key' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThread_set_key_value">
        <warn severity="warning">Deprecated function 'PyThread_set_key_value' used.
Deprecated function 'PyThread_set_key_value' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThread_get_key_value">
        <warn severity="warning">Deprecated function 'PyThread_get_key_value' used.
Deprecated function 'PyThread_get_key_value' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThread_delete_key_value">
        <warn severity="warning">Deprecated function 'PyThread_delete_key_value' used.
Deprecated function 'PyThread_delete_key_value' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThread_ReInitTLS">
        <warn severity="warning">Deprecated function 'PyThread_ReInitTLS' used.
Deprecated function 'PyThread_ReInitTLS' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_tss_alloc">
        <use-retval/>
        <returnValue type="Py_tss_t*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_tss_free">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThread_tss_is_created">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThread_tss_create">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThread_tss_delete">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThread_tss_set">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThread_tss_get">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: setobject.h | Source files: Objects/setobject.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PySet_New</alloc>
        <alloc init="true">PyFrozenSet_New</alloc>
        <alloc init="true">PySet_Pop</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PySet_New,PyFrozenSet_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySet_Size">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySet_Clear">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySet_Contains">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySet_Discard">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySet_Add">
        <leak-ignore/> <!-- TODO: May need to remove this, unfortunately individual parameters can't be leak ignored :/ -->
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="PySet_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PySet_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PySet_Pop">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PySet_Update">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: structmember.h | Source file: Python/structmember.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyMember_GetOne</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyMember_GetOne">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMember_SetOne">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: structseq.h | Source files: Objects/structseq.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyStructSequence_New</alloc>
        <alloc init="true">PyStructSequence_NewType</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyStructSequence_InitType">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStructSequence_InitType2">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStructSequence_New">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStructSequence_NewType">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyTypeObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStructSequence_SetItem">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStructSequence_GetItem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
</def>
