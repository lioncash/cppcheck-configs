<?xml version="1.0"?>

<!-- Config file for the Python 3 C API (assumes Python 3.6 and bits of 3.7) -->

<def format="2">
    <!-- - - - - -->
    <!-- Defines -->
    <!-- - - - - -->

    <!-- abstract.h -->
    <define name="PyObject_DelAttrString(O,A)" value="PyObject_SetAttrString((O),(A), NULL)"/>
    <define name="PyObject_DelAttr(O,A)" value="PyObject_SetAttr((O),(A), NULL)"/>
    <define name="_PY_FASTCALL_SMALL_STACK" value="5"/>
    <define name="_PyObject_FastCall(func, args, nargs)" value="_PyObject_FastCallDict((func), (args), (nargs), NULL)"/>
    <define name="_PyObject_CallNoArg(func)" value="_PyObject_FastCallDict((func), NULL, 0, NULL)"/>
    <define name="PyObject_CheckBuffer(obj)" value="(((obj)-&gt;ob_type-&gt;tp_as_buffer != NULL) &amp;&amp; ((obj)-&gt;ob_type-&gt;tp_as_buffer-&gt;bf_getbuffer != NULL))"/>
    <define name="PyIter_Check(obj)" value="((obj)-&gt;ob_type-&gt;tp_iternext != NULL &amp;&amp; (obj)-&gt;ob_type-&gt;tp_iternext != &amp;_PyObject_NextNotImplemented)"/>

    <define name="PY_ITERSEARCH_COUNT" value="1"/>
    <define name="PY_ITERSEARCH_INDEX" value="2"/>
    <define name="PY_ITERSEARCH_CONTAINS" value="3"/>

    <define name="PyMapping_DelItem(O,K)" value="PyObject_DelItem((O),(K))"/>

    <!-- boolobject.h -->
    <define name="PyBool_Check(x)" value="(Py_TYPE(x) == &amp;PyBool_Type)"/>
    <define name="Py_False" value="((PyObject *) &amp;_Py_FalseStruct)"/>
    <define name="Py_True" value="((PyObject *) &amp;_Py_TrueStruct)"/>
    <define name="Py_RETURN_FALSE" value="return Py_INCREF(Py_False), Py_False"/>
    <define name="Py_RETURN_TRUE" value="return Py_INCREF(Py_True), Py_True"/>

    <!-- bytearrayobject.h -->
    <define name="PyByteArray_Check(self)" value="PyObject_TypeCheck(self, &amp;PyByteArray_Type)"/>
    <define name="PyByteArray_CheckExact(self)" value="(Py_TYPE(self) == &amp;PyByteArray_Type)"/>
    <define name="PyByteArray_AS_STRING(self)" value="(assert(PyByteArray_Check(self)),Py_SIZE(self) ? ((PyByteArrayObject *)(self))-&gt;ob_start : _PyByteArray_empty_string)"/>
    <define name="PyByteArray_GET_SIZE(self)" value="(assert(PyByteArray_Check(self)), Py_SIZE(self))"/>

    <!-- bytesobject.h -->
    <define name="PyBytes_Check(op)" value="PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_BYTES_SUBCLASS)"/>
    <define name="PyBytes_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyBytes_Type)"/>
    <define name="PyBytes_AS_STRING(op)" value="(assert(PyBytes_Check(op)), (((PyBytesObject *)(op))-&gt;ob_sval))"/>
    <define name="PyBytes_GET_SIZE(op)" value="(assert(PyBytes_Check(op)),Py_SIZE(op))"/>
    <define name="F_LJUST" value="(1&lt;&lt;0)"/>
    <define name="F_SIGN" value="(1&lt;&lt;1)"/>
    <define name="F_BLANK" value="(1&lt;&lt;2)"/>
    <define name="F_ALT" value="(1&lt;&lt;3)"/>
    <define name="F_ZERO" value="(1&lt;&lt;4)"/>

    <!-- cellobject.h -->
    <define name="PyCell_Check(op)" value="(Py_TYPE(op) == &amp;PyCell_Type)"/>
    <define name="PyCell_GET(op)" value="(((PyCellObject *)(op))-&gt;ob_ref)"/>
    <define name="PyCell_SET(op, v)" value="(((PyCellObject *)(op))->ob_ref = v)"/>

    <!-- ceval.h -->
    <define name="PyEval_CallObject(callable, arg)" value="PyEval_CallObjectWithKeywords(callable, arg, (PyObject *)NULL)"/>
    <define name="Py_EnterRecursiveCall(where)" value="(_Py_MakeRecCheck(PyThreadState_GET()-&gt;recursion_depth) &amp;&amp; _Py_CheckRecursiveCall(where))"/>
    <define name="Py_LeaveRecursiveCall()" value="do{ if(_Py_MakeEndRecCheck(PyThreadState_GET()-&gt;recursion_depth)) PyThreadState_GET()-&gt;overflowed = 0; } while(0)"/>
    <define name="_Py_RecursionLimitLowerWaterMark(limit)" value="(((limit) &gt; 200) ? ((limit) - 50) : (3 * ((limit) &gt;&gt; 2)))"/>
    <define name="_Py_MakeEndRecCheck(x)" value="(--(x) &lt; _Py_RecursionLimitLowerWaterMark(_Py_CheckRecursionLimit))"/>
    <define name="Py_ALLOW_RECURSION" value="do { unsigned char _old = PyThreadState_GET()-&gt;recursion_critical; PyThreadState_GET()-&gt;recursion_critical = 1;"/>
    <define name="Py_END_ALLOW_RECURSION" value="PyThreadState_GET()-&gt;recursion_critical = _old; } while(0);"/>
    <define name="Py_BEGIN_ALLOW_THREADS" value="{ PyThreadState *_save; _save = PyEval_SaveThread();"/>
    <define name="Py_BLOCK_THREADS" value="PyEval_RestoreThread(_save);"/>
    <define name="Py_UNBLOCK_THREADS" value="_save = PyEval_SaveThread();"/>
    <define name="Py_END_ALLOW_THREADS" value="PyEval_RestoreThread(_save); }"/>
    <define name="FVC_MASK" value="0x3"/>
    <define name="FVC_NONE" value="0x0"/>
    <define name="FVC_STR" value="0x1"/>
    <define name="FVC_REPR" value="0x2"/>
    <define name="FVC_ASCII" value="0x3"/>
    <define name="FVS_MASK" value="0x4"/>
    <define name="FVS_HAVE_SPEC" value="0x4"/>

    <!-- classobject.h -->
    <define name="PyInstanceMethod_Check(op)" value="((op)->ob_type == &amp;PyInstanceMethod_Type)"/>
    <define name="PyInstanceMethod_GET_FUNCTION(meth)" value="(((PyInstanceMethodObject *)meth) -&gt; func)"/>
    <define name="PyMethod_Check(op)" value="((op)-&gt;ob_type == &amp;PyMethod_Type)"/>
    <define name="PyMethod_GET_FUNCTION(meth)" value="(((PyMethodObject *)meth) -&gt; im_func)"/>
    <define name="PyMethod_GET_SELF(meth)" value="(((PyMethodObject *)meth) -&gt; im_self)"/>

    <!-- code.h -->
    <define name="CO_OPTIMIZED" value="0x0001"/>
    <define name="CO_NEWLOCALS" value="0x0002"/>
    <define name="CO_VARARGS" value="0x0004"/>
    <define name="CO_VARKEYWORDS" value="0x0008"/>
    <define name="CO_NESTED" value="0x0010"/>
    <define name="CO_GENERATOR" value="0x0020"/>
    <define name="CO_NOFREE" value="0x0040"/>
    <define name="CO_COROUTINE" value="0x0080"/>
    <define name="CO_ITERABLE_COROUTINE" value="0x0100"/>
    <define name="CO_ASYNC_GENERATOR" value="0x0200"/>
    <define name="CO_FUTURE_DIVISION" value="0x2000"/>
    <define name="CO_FUTURE_ABSOLUTE_IMPORT" value="0x4000"/>
    <define name="CO_FUTURE_WITH_STATEMENT" value="0x8000"/>
    <define name="CO_FUTURE_PRINT_FUNCTION" value="0x10000"/>
    <define name="CO_FUTURE_UNICODE_LITERALS" value="0x20000"/>
    <define name="CO_FUTURE_BARRY_AS_BDFL" value="0x40000"/>
    <define name="CO_FUTURE_GENERATOR_STOP" value="0x80000"/>
    <define name="CO_CELL_NOT_AN_ARG" value="(-1)"/>
    <define name="CO_MAXBLOCKS" value="20"/>
    <define name="PyCode_Check(op)" value="(Py_TYPE(op) == &amp;PyCode_Type)"/>
    <define name="PyCode_GetNumFree(op)" value="(PyTuple_GET_SIZE((op)-&gt;co_freevars))"/>

    <!-- compile.h -->
    <define name="PyCF_MASK" value="(CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_WITH_STATEMENT | CO_FUTURE_PRINT_FUNCTION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_BARRY_AS_BDFL | CO_FUTURE_GENERATOR_STOP)"/>"
    <define name="PyCF_MASK_OBSOLETE" value="(CO_NESTED)"/>
    <define name="PyCF_SOURCE_IS_UTF8" value="0x0100"/>
    <define name="PyCF_DONT_IMPLY_DEDENT" value="0x0200"/>
    <define name="PyCF_ONLY_AST" value="0x0400"/>
    <define name="PyCF_IGNORE_COOKIE" value="0x0800"/>

    <define name="FUTURE_NESTED_SCOPES" value="&quot;nested_scopes&quot;"/>
    <define name="FUTURE_GENERATORS" value="&quot;generators&quot;"/>
    <define name="FUTURE_DIVISION" value="&quot;division&quot;"/>
    <define name="FUTURE_ABSOLUTE_IMPORT" value="&quot;absolute_import&quot;"/>
    <define name="FUTURE_WITH_STATEMENT" value="&quot;with_statement&quot;"/>
    <define name="FUTURE_PRINT_FUNCTION" value="&quot;print_function&quot;"/>
    <define name="FUTURE_UNICODE_LITERALS" value="&quot;unicode_literals&quot;"/>
    <define name="FUTURE_BARRY_AS_BDFL" value="&quot;barry_as_FLUFL&quot;"/>
    <define name="FUTURE_GENERATOR_STOP" value="&quot;generator_stop&quot;"/>

    <define name="PyAST_Compile(mod, s, f, ar)" value="PyAST_CompileEx(mod, s, f, -1, ar)"/>

    <define name="PY_INVALID_STACK_EFFECT" value="INT_MAX"/>

    <define name="Py_single_input" value="256"/>
    <define name="Py_file_input" value="257"/>
    <define name="Py_eval_input" value="258"/>

    <!-- complexobject.h -->
    <define name="PyComplex_Check(op)" value="PyObject_TypeCheck(op, &amp;PyComplex_Type)"/>
    <define name="PyComplex_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyComplex_Type)"/>

    <!-- datetime.h -->
    <define name="_PyDateTime_DATE_DATASIZE" value="4"/>
    <define name="_PyDateTime_TIME_DATASIZE" value="6"/>
    <define name="_PyDateTime_DATETIME_DATASIZE" value="10"/>
    <define name="_PyTZINFO_HEAD" value="PyObject_HEAD Py_hash_t hashcode; char hastzinfo;"/>
    <define name="_PyDateTime_TIMEHEAD" value="_PyTZINFO_HEAD unsigned char data[_PyDateTime_TIME_DATASIZE];"/>
    <define name="_PyDateTime_DATETIMEHEAD" value="_PyTZINFO_HEAD unsigned char data[_PyDateTime_DATETIME_DATASIZE];"/>
    <define name="PyDateTime_GET_YEAR(o)" value="((((PyDateTime_Date*)o)-&gt;data[0] &lt;&lt; 8) | ((PyDateTime_Date*)o)-&gt;data[1])"/>
    <define name="PyDateTime_GET_MONTH(o)" value="(((PyDateTime_Date*)o)-&gt;data[2])"/>
    <define name="PyDateTime_GET_DAY(o)" value="(((PyDateTime_Date*)o)-&gt;data[3])"/>
    <define name="PyDateTime_DATE_GET_HOUR(o)" value="(((PyDateTime_DateTime*)o)-&gt;data[4])"/>
    <define name="PyDateTime_DATE_GET_MINUTE(o)" value="(((PyDateTime_DateTime*)o)-&gt;data[5])"/>
    <define name="PyDateTime_DATE_GET_SECOND(o)" value="(((PyDateTime_DateTime*)o)-&gt;data[6])"/>
    <define name="PyDateTime_DATE_GET_MICROSECOND(o)" value="((((PyDateTime_DateTime*)o)-&gt;data[7] &lt;&lt; 16) | (((PyDateTime_DateTime*)o)-&gt;data[8] &lt;&lt; 8) | ((PyDateTime_DateTime*)o)-&gt;data[9])"/>
    <define name="PyDateTime_DATE_GET_FOLD(o)" value="(((PyDateTime_DateTime*)o)-&gt;fold)"/>

    <define name="PyDateTime_TIME_GET_HOUR(o)" value="(((PyDateTime_Time*)o)-&gt;data[0])"/>
    <define name="PyDateTime_TIME_GET_MINUTE(o)" value="(((PyDateTime_Time*)o)-&gt;data[1])"/>
    <define name="PyDateTime_TIME_GET_SECOND(o)" value="(((PyDateTime_Time*)o)-&gt;data[2])"/>
    <define name="PyDateTime_TIME_GET_MICROSECOND(o)" value="((((PyDateTime_Time*)o)-&gt;data[3] &lt;&lt; 16) | (((PyDateTime_Time*)o)-&gt;data[4] &lt;&lt; 8) | ((PyDateTime_Time*)o)-&gt;data[5])"/>
    <define name="PyDateTime_TIME_GET_FOLD(o)" value="(((PyDateTime_Time*)o)-&gt;fold)"/>

    <define name="PyDateTime_DELTA_GET_DAYS(o)" value="(((PyDateTime_Delta*)o)-&gt;days)"/>
    <define name="PyDateTime_DELTA_GET_SECONDS(o)" value="(((PyDateTime_Delta*)o)-&gt;seconds)"/>
    <define name="PyDateTime_DELTA_GET_MICROSECONDS(o)" value="(((PyDateTime_Delta*)o)-&gt;microseconds)"/>

    <define name="PyDateTime_IMPORT" value="PyDateTimeAPI = (PyDateTime_CAPI *)PyCapsule_Import(PyDateTime_CAPSULE_NAME, 0)"/>

    <define name="PyDate_Check(op)" value="PyObject_TypeCheck(op, PyDateTimeAPI-&gt;DateType)"/>
    <define name="PyDate_CheckExact(op)" value="(Py_TYPE(op) == PyDateTimeAPI-&gt;DateType)"/>

    <define name="PyDateTime_Check(op)" value="PyObject_TypeCheck(op, PyDateTimeAPI-&gt;DateTimeType)"/>
    <define name="PyDateTime_CheckExact(op)" value="(Py_TYPE(op) == PyDateTimeAPI-&gt;DateTimeType)"/>

    <define name="PyTime_Check(op)" value="PyObject_TypeCheck(op, PyDateTimeAPI-&gt;TimeType)"/>
    <define name="PyTime_CheckExact(op)" value="(Py_TYPE(op) == PyDateTimeAPI-&gt;TimeType)"/>

    <define name="PyDelta_Check(op)" value="PyObject_TypeCheck(op, PyDateTimeAPI-&gt;DeltaType)"/>
    <define name="PyDelta_CheckExact(op)" value="(Py_TYPE(op) == PyDateTimeAPI-&gt;DeltaType)"/>

    <define name="PyTZInfo_Check(op)" value="PyObject_TypeCheck(op, PyDateTimeAPI-&gt;TZInfoType)"/>
    <define name="PyTZInfo_CheckExact(op)" value="(Py_TYPE(op) == PyDateTimeAPI-&gt;TZInfoType)"/>

    <define name="PyDate_FromDate(year, month, day)" value="PyDateTimeAPI-&gt;Date_FromDate(year, month, day, PyDateTimeAPI-&gt;DateType)"/>
    <define name="PyDateTime_FromDateAndTime(year, month, day, hour, min, sec, usec)" value="PyDateTimeAPI-&gt;DateTime_FromDateAndTime(year, month, day, hour,min, sec, usec, Py_None, PyDateTimeAPI-&gt;DateTimeType)"/>
    <define name="PyDateTime_FromDateAndTimeAndFold(year, month, day, hour, min, sec, usec, fold)" value="PyDateTimeAPI-&gt;DateTime_FromDateAndTimeAndFold(year, month, day, hour, min, sec, usec, Py_None, fold, PyDateTimeAPI-&gt;DateTimeType)"/>
    <define name="PyTime_FromTime(hour, minute, second, usecond)" value="PyDateTimeAPI-&gt;Time_FromTime(hour, minute, second, usecond, Py_None, PyDateTimeAPI-&gt;TimeType)"/>
    <define name="PyTime_FromTimeAndFold(hour, minute, second, usecond, fold)" value="PyDateTimeAPI-&gt;Time_FromTimeAndFold(hour, minute, second, usecond, Py_None, fold, PyDateTimeAPI-&gt;TimeType)"/>
    <define name="PyDelta_FromDSU(days, seconds, useconds)" value="PyDateTimeAPI-&gt;Delta_FromDelta(days, seconds, useconds, 1, PyDateTimeAPI-&gt;DeltaType)"/>
    <define name="PyDateTime_FromTimestamp(args)" value="PyDateTimeAPI-&gt;DateTime_FromTimestamp((PyObject*) (PyDateTimeAPI-&gt;DateTimeType), args, NULL)"/>
    <define name="PyDate_FromTimestamp(args)" value="PyDateTimeAPI-&gt;Date_FromTimestamp((PyObject*) (PyDateTimeAPI-&gt;DateType), args)"/>

    <!-- descrobject.h -->
    <define name="PyWrapperFlag_KEYWORDS" value="1"/>
    <define name="PyDescr_COMMON" value="PyDescrObject d_common"/>
    <define name="PyDescr_TYPE(x)" value="(((PyDescrObject *)(x))-&gt;d_type)"/>
    <define name="PyDescr_NAME(x)" value="(((PyDescrObject *)(x))-&gt;d_name)"/>

    <!-- dictobject.h -->
    <define name="PyDict_Check(op)" value="PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_DICT_SUBCLASS)"/>
    <define name="PyDict_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyDict_Type)"/>
    <define name="PyDictKeys_Check(op)" value="PyObject_TypeCheck(op, &amp;PyDictKeys_Type)"/>
    <define name="PyDictItems_Check(op)" value="PyObject_TypeCheck(op, &amp;PyDictItems_Type)"/>
    <define name="PyDictValues_Check(op)" value="PyObject_TypeCheck(op, &amp;PyDictValues_Type)"/>
    <define name="PyDictViewSet_Check(op)" value="(PyDictKeys_Check(op) || PyDictItems_Check(op))"/>
    <define name="PyDict_GET_SIZE(mp)" value="(assert(PyDict_Check(mp)),((PyDictObject *)mp)-&gt;ma_used)"/>
    <define name="_PyDict_HasSplitTable(d)" value="((d)-&gt;ma_values != NULL)"/>

    <!-- errcode.h -->
    <define name="E_OK" value="10"/>
    <define name="E_EOF" value="11"/>
    <define name="E_INTR" value="12"/>
    <define name="E_TOKEN" value="13"/>
    <define name="E_SYNTAX" value="14"/>
    <define name="E_NOMEM" value="15"/>
    <define name="E_DONE" value="16"/>
    <define name="E_ERROR" value="17"/>
    <define name="E_TABSPACE" value="18"/>
    <define name="E_OVERFLOW" value="19"/>
    <define name="E_TOODEEP" value="20"/>
    <define name="E_DEDENT" value="21"/>
    <define name="E_DECODE" value="22"/>
    <define name="E_EOFS" value="23"/>
    <define name="E_EOLS" value="24"/>
    <define name="E_LINECONT" value="25"/>
    <define name="E_IDENTIFIER" value="26"/>
    <define name="E_BADSINGLE" value="27"/>

    <!-- floatobject.h -->
    <define name="PyFloat_Check(op)" value="PyObject_TypeCheck(op, &amp;PyFloat_Type)"/>
    <define name="PyFloat_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyFloat_Type)"/>
    <define name="Py_RETURN_NAN" value="return PyFloat_FromDouble(Py_NAN)"/>
    <define name="Py_RETURN_INF(sign)" value="do if(copysign(1.,sign) == 1.) { return PyFloat_FromDouble(Py_HUGE_VAL); } else { return PyFloat_FromDouble(-Py_HUGE_VAL); } while (0)"/>
    <define name="PyFloat_AS_DOUBLE(op)" value="(((PyFloatObject *)(op))-&gt;ob_fval)"/>

    <!-- frameobject.h -->
    <define name="PyFrame_Check(op)" value="(Py_TYPE(op) == &amp;PyFrame_Type)"/>

    <!-- funcobject.h -->
    <define name="PyFunction_Check" value="(Py_TYPE(op) == &amp;PyFunction_Type)"/>
    <define name="PyFunction_GET_CODE(func)" value="(((PyFunctionObject *)func) -&gt; func_code)"/>
    <define name="PyFunction_GET_GLOBAL(func)" value="(((PyFunctionObject *)func) -&gt; func_globals)"/>
    <define name="PyFunction_GET_MODULE(func)" value="(((PyFunctionObject *)func) -&gt; func_module)"/>
    <define name="PyFunction_GET_DEFAULTS(func)" value="(((PyFunctionObject *)func) -&gt; func_defaults)"/>
    <define name="PyFunction_GET_KW_DEFAULTS(func)" value="(((PyFunctionObject *)func) -&gt; func_kwdefaults)"/>
    <define name="PyFunction_GET_CLOSURE(func)" value="(((PyFunctionObject *)func) -&gt; func_closure)"/>
    <define name="PyFunction_GET_ANNOTATIONS(func)" value="(((PyFunctionObject *)func) -&gt; func_annotations)"/>

    <!-- genobject.h -->
    <define name="PyGen_Check(op)" value="PyObject_TypeCheck(op, &amp;PyGen_Type)"/>
    <define name="PyGen_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyGen_Type)"/>
    <define name="PyCoro_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyCoro_Type)"/>
    <define name="PyAsyncGen_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyAsyncGen_Type)"/>

    <!-- import.h -->
    <define name="PyImport_ImportModuleEx(n, g, l, f)" value="PyImport_ImportModuleLevel(n, g, l, f, 0)"/>

    <!-- iterobject.h -->
    <define name="PySeqIter_Check(op)" value="(Py_TYPE(op) == &amp;PySeqIter_Type)"/>
    <define name="PyCallIter_Check(op)" value="(Py_TYPE(op) == &amp;PyCallIter_Type)"/>

    <!-- listobject.h -->
    <define name="PyList_Check(op)" value="PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LIST_SUBCLASS)"/>
    <define name="PyList_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyList_Type)"/>

    <define name="PyList_GET_ITEM(op, i)" value="(((PyListObject *)(op))-&gt;ob_item[i])"/>
    <define name="PyList_SET_ITEM(op, i, v)" value="(((PyListObject *)(op))-&gt;ob_item[i] = (v))"/>
    <define name="PyList_GET_SIZE(op)" value="Py_SIZE(op)"/>
    <define name="_PyList_ITEMS(op)" value="(((PyListObject *)(op))-&gt;ob_item)"/>

    <!-- longobject.h -->
    <define name="PyLong_Check(op)" value="PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_LONG_SUBCLASS)"/>
    <define name="PyLong_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyLong_Type)"/>
    <define name="PyLong_AS_LONG(op)" value="PyLong_AsLong(op)"/>

    <!-- memoryobject.h -->
    <define name="PyMemoryView_Check(op)" value="(Py_TYPE(op) == &amp;PyMemoryView_Type)"/>
    <define name="PyMemoryView_GET_BUFFER(op)" value="(&amp;((PyMemoryViewObject *)(op))-&gt;view)"/>
    <define name="PyMemoryView_GET_BASE(op)" value="(((PyMemoryViewObject *)(op))-&gt;view.obj)"/>

    <define name="_Py_MANAGED_BUFFER_RELEASED" value="0x001"/>
    <define name="_Py_MANAGED_BUFFER_FREE_FORMAT" value="0x002"/>

    <define name="_Py_MEMORYVIEW_RELEASED" value="0x001"/>
    <define name="_Py_MEMORYVIEW_C" value="0x002"/>
    <define name="_Py_MEMORYVIEW_FORTRAN" value="0x004"/>
    <define name="_Py_MEMORYVIEW_SCALAR" value="0x008"/>
    <define name="_Py_MEMORYVIEW_PIL" value="0x010"/>

    <!-- methodobject.h -->
    <define name="METH_VARARGS" value="0x0001"/>
    <define name="METH_KEYWORDS" value="0x0002"/>
    <define name="METH_NOARGS" value="0x0004"/>
    <define name="METH_O" value="0x0008"/>
    <define name="METH_CLASS" value="0x0010"/>
    <define name="METH_STATIC" value="0x0020"/>
    <define name="METH_COEXIST" value="0x0040"/>
    <define name="METH_FASTCALL" value="0x0080"/>

    <define name="PyCFunction_New(ML, SELF)" value="PyCFunction_NewEx((ML), (SELF), NULL)"/>
    <define name="PyCFunction_GET_FUNCTION(func)" value="(((PyCFunctionObject *)func) -&gt; m_ml -&gt; ml_meth)"/>
    <define name="PyCFunction_GET_SELF(func)" value="(((PyCFunctionObject *)func) -&gt; m_ml -&gt; ml_flags &amp; METH_STATIC ? NULL : ((PyCFunctionObject *)func) -&gt; m_self)"/>
    <define name="PyCFunction_GET_FLAGS(func)" value="(((PyCFunctionObject *)func) -&gt; m_ml -&gt; ml_flags)"/>

    <define name="PyCFunction_Check(op)" value="(Py_TYPE(op) == &amp;PyCFunction_Type)"/>

    <!-- modsupport.h -->
    <define name="PyArg_Parse" value="_PyArg_Parse_SizeT"/>
    <define name="PyArg_ParseTuple" value="_PyArg_ParseTuple_SizeT"/>
    <define name="PyArg_ParseTupleAndKeywords" value="_PyArg_ParseTupleAndKeywords_SizeT"/>
    <define name="PyArg_VaParse" value="_PyArg_VaParse_SizeT"/>
    <define name="PyArg_VaParseTupleAndKeywords" value="_PyArg_VaParseTupleAndKeywords_SizeT"/>
    <define name="Py_BuildValue" value="_Py_BuildValue_SizeT"/>
    <define name="Py_VaBuildValue" value="_Py_VaBuildValue_SizeT"/>
    <define name="_Py_VaBuildStack" value="_Py_VaBuildStack_SizeT"/>
    <define name="_PyArg_ParseTupleAndKeywordsFast" value="_PyArg_ParseTupleAndKeywordsFast_SizeT"/>
    <define name="_PyArg_ParseStack" value="_PyArg_ParseStack_SizeT"/>
    <define name="_PyArg_ParseStackAndKeywords" value="_PyArg_ParseStackAndKeywords_SizeT"/>
    <define name="_PyArg_VaParseTupleAndKeywordsFast" value="_PyArg_VaParseTupleAndKeywordsFast_SizeT"/>
    <define name="PyModule_AddIntMacro(m, c)" value="PyModule_AddIntConstant(m, #c, c)"/>
    <define name="PyModule_AddStringMacro(m, c)" value="PyModule_AddStringConstant(m, #c, c)"/>
    <define name="_PyArg_NoKeywords(funcname, kwargs)" value="((kwargs) == NULL || _PyArg_NoKeywords((funcname), (kwargs)))"/>
    <define name="_PyArg_NoPositional(funcname, args)" value="((args) == NULL || _PyArg_NoPositional((funcname), (args)))"/>
    <define name="Py_CLEANUP_SUPPORTED" value="0x20000"/>

    <define name="PYTHON_ABI_VERSION" value="3"/>
    <define name="PYTHON_ABI_STRING" value="&quot;3&quot;"/>
    <define name="PYTHON_API_VERSION" value="1013"/>
    <define name="PYTHON_API_STRING" value="&quot;1013&quot;"/>

    <define name="PyModule_Create(module)" value="PyModule_Create2(module, PYTHON_API_VERSION)"/>
    <define name="PyModule_FromDefAndSpec(module, spec)" value="PyModule_FromDefAndSpec2(module, spec, PYTHON_API_VERSION)"/>

    <!-- moduleobject.h -->
    <define name="PyModule_Check(op)" value="PyObject_TypeCheck(op, &amp;PyModule_Type)"/>
    <define name="PyModule_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyModule_Type)"/>
    <define name="PyModuleDef_HEAD_INIT" value="{PyObject_HEAD_INIT(NULL), NULL, 0, NULL,}"/>

    <define name="Py_mod_create" value="1"/>
    <define name="Py_mod_exec" value="2"/>

    <!-- object.h -->
    <define name="_PyObject_HEAD_EXTRA" value=""/>
    <define name="_PyObject_EXTRA_INIT" value=""/>
    <define name="PyObject_HEAD" value="PyObject ob_base;"/>
    <define name="PyObject_HEAD_INIT(type)" value="{ _PyObject_EXTRA_INIT 1, type },"/>
    <define name="PyVarObject_HEAD_INIT(type, size)" value="{ PyObject_HEAD_INIT(type) size },"/>
    <define name="PyObject_VAR_HEAD" value="PyObject ob_base;"/>
    <define name="Py_INVALID_SIZE" value="(Py_ssize_t)-1"/>

    <define name="Py_REFCNT(ob)" value="(((PyObject*)(ob))-&gt;ob_refcnt)"/>
    <define name="Py_TYPE(ob)" value="(((PyObject*)(ob))-&gt;ob_type)"/>
    <define name="Py_SIZE(ob)" value="(((PyVarObject*)(ob))-&gt;ob_size)"/>

    <define name="PyBUF_MAX_NDIM" value="64"/>

    <define name="PyBUF_SIMPLE" value="0"/>
    <define name="PyBUF_WRITABLE" value="0x0001"/>

    <define name="PyBUF_WRITEABLE" value="PyBUF_WRITABLE"/>
    <define name="PyBUF_FORMAT" value="0x0004"/>
    <define name="PyBUF_ND" value="0x0008"/>
    <define name="PyBUF_STRIDES" value="(0x0010 | PyBUF_ND)"/>
    <define name="PyBUF_C_CONTIGUOUS" value="(0x0020 | PyBUF_STRIDES)"/>
    <define name="PyBUF_F_CONTIGUOUS" value="(0x0040 | PyBUF_STRIDES)"/>
    <define name="PyBUF_ANY_CONTIGUOUS" value="(0x0080 | PyBUF_STRIDES)"/>
    <define name="PyBUF_INDIRECT" value="(0x0100 | PyBUF_STRIDES)"/>

    <define name="PyBUF_CONTIG" value="(PyBUF_ND | PyBUF_WRITABLE)"/>
    <define name="PyBUF_CONTIG_RO" value="(PyBUF_ND)"/>

    <define name="PyBUF_STRIDED" value="(PyBUF_STRIDES | PyBUF_WRITABLE)"/>
    <define name="PyBUF_STRIDED_RO" value="(PyBUF_STRIDES)"/>

    <define name="PyBUF_RECORDS" value="(PyBUF_STRIDES | PyBUF_WRITABLE | PyBUF_FORMAT)"/>
    <define name="PyBUF_RECORDS_RO" value="(PyBUF_STRIDES | PyBUF_FORMAT)"/>

    <define name="PyBUF_FULL" value="(PyBUF_INDIRECT | PyBUF_WRITABLE | PyBUF_FORMAT)"/>
    <define name="PyBUF_FULL_RO" value="(PyBUF_INDIRECT | PyBUF_FORMAT)"/>

    <define name="PyBUF_READ" value="0x100"/>
    <define name="PyBUF_WRITE" value="0x200"/>

    <define name="PyHeapType_GET_MEMBERS(etype)" value="((PyMemberDef *)(((char *)etype) + Py_TYPE(etype)-&gt;tp_basicsize))"/>
    <define name="PyObject_TypeCheck(ob, tp)" value="(Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))"/>
    <define name="PyType_Check(op)" value="PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)"/>
    <define name="PyType_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyType_Type)"/>

    <define name="Py_PRINT_RAW" value="1"/>

    <define name="Py_TPFLAGS_HEAPTYPE" value="(1UL &lt;&lt; 9)"/>
    <define name="Py_TPFLAGS_BASETYPE" value="(1UL &lt;&lt; 10)"/>
    <define name="Py_TPFLAGS_READY" value="(1UL &lt;&lt; 12)"/>
    <define name="Py_TPFLAGS_READYING" value="(1UL &lt;&lt; 13)"/>
    <define name="Py_TPFLAGS_HAVE_GC" value="(1UL &lt;&lt; 14)"/>
    <define name="Py_TPFLAGS_HAVE_STACKLESS_EXTENSION" value="(3UL &lt;&lt; 15)"/>

    <define name="Py_TPFLAGS_HAVE_VERSION_TAG" value="(1UL &lt;&lt; 18)"/>
    <define name="Py_TPFLAGS_VALID_VERSION_TAG" value="(1UL &lt;&lt; 19)"/>

    <define name="Py_TPFLAGS_IS_ABSTRACT" value="(1UL &lt;&lt; 20)"/>

    <define name="Py_TPFLAGS_LONG_SUBCLASS" value="(1UL &lt;&lt; 24)"/>
    <define name="Py_TPFLAGS_LIST_SUBCLASS" value="(1UL &lt;&lt; 25)"/>
    <define name="Py_TPFLAGS_TUPLE_SUBCLASS" value="(1UL &lt;&lt; 26)"/>
    <define name="Py_TPFLAGS_BYTES_SUBCLASS" value="(1UL &lt;&lt; 27)"/>
    <define name="Py_TPFLAGS_UNICODE_SUBCLASS" value="(1UL &lt;&lt; 28)"/>
    <define name="Py_TPFLAGS_DICT_SUBCLASS" value="(1UL &lt;&lt; 29)"/>
    <define name="Py_TPFLAGS_BASE_EXC_SUBCLASS" value="(1UL &lt;&lt; 30)"/>
    <define name="Py_TPFLAGS_TYPE_SUBCLASS" value="(1UL &lt;&lt; 31)"/>
    <define name="Py_TPFLAGS_DEFAULT" value="(Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | Py_TPFLAGS_HAVE_VERSION_TAG | 0)"/>
    <define name="Py_TPFLAGS_HAVE_FINALIZE" value="(1UL &lt;&lt; 0)"/>

    <define name="PyType_HasFeature(t,f)" value="(((t)-&gt;tp_flags &amp; (f)) != 0)"/>
    <define name="PyType_FastSubclass(t,f)" value="PyType_HasFeature(t,f)"/>

    <define name="_Py_INC_REFTOTAL" value=""/>
    <define name="_Py_DEC_REFTOTAL" value=""/>
    <define name="_Py_REF_DEBUG_COMMA" value=""/>
    <define name="_Py_CHECK_REFCNT(OP)" value=";"/>
    <define name="_Py_DEBUG_PRINT_TOTAL_REFS()" value=""/>

    <define name="_Py_INC_TPALLOCS(OP)" value=""/>
    <define name="_Py_INC_TPFREES(OP)" value=""/>
    <define name="_Py_DEC_TPFREES(OP)" value=""/>
    <define name="_Py_COUNT_ALLOCS_COMMA" value=""/>

    <define name="_Py_NewReference(op)" value="(_Py_INC_TPALLOCS(op) _Py_COUNT_ALLOCS_COMMA _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA Py_REFCNT(op) = 1)"/>
    <podtype name="_Py_ForgetReference(op)" value="_Py_INC_TPFREES(op)"/>
    <define name="_Py_Dealloc(op)" value="(_Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA (*Py_TYPE(op)-&gt;tp_dealloc)((PyObject *)(op)))"/>

    <define name="Py_INCREF(op)" value="(_Py_INC_REFTOTAL _Py_REF_DEBUG_COMMA ((PyObject *)(op))-&gt;ob_refcnt++)"/>
    <define name="Py_DECREF(op)" value="do { PyObject *_py_decref_tmp = (PyObject *)(op); if (_Py_DEC_REFTOTAL  _Py_REF_DEBUG_COMMA --(_py_decref_tmp)-&gt;ob_refcnt != 0) _Py_CHECK_REFCNT(_py_decref_tmp) else _Py_Dealloc(_py_decref_tmp); } while (0)"/>
    <define name="Py_CLEAR(op)" value="do { PyObject *_py_tmp = (PyObject *)(op); if (_py_tmp != NULL) { (op) = NULL; Py_DECREF(_py_tmp); }} while (0)"/>
    <define name="Py_XINCREF(op)" value="do { PyObject *_py_xincref_tmp = (PyObject *)(op); if (_py_xincref_tmp != NULL) Py_INCREF(_py_xincref_tmp); } while (0)"/>
    <define name="Py_XDECREF(op)" value="do { PyObject *_py_xdecref_tmp = (PyObject *)(op); if (_py_xdecref_tmp != NULL) Py_DECREF(_py_xdecref_tmp); } while (0)"/>
    <define name="Py_SETREF(op, op2)" value="do { PyObject *_py_tmp = (PyObject *)(op); (op) = (op2); Py_DECREF(_py_tmp); } while (0)"/>
    <define name="Py_XSETREF(op, op2)" value="do { PyObject *_py_tmp = (PyObject *)(op); (op) = (op2); Py_XDECREF(_py_tmp); } while (0)"/>

    <define name="Py_None" value="(&amp;_Py_NoneStruct)"/>
    <define name="Py_RETURN_NONE" value="return Py_INCREF(Py_None), Py_None"/>

    <define name="Py_NotImplemented" value="(&amp;_Py_NotImplementedStruct)"/>
    <define name="Py_RETURN_NOTIMPLEMENTED" value="return Py_INCREF(Py_NotImplemented), Py_NotImplemented"/>

    <define name="Py_LT" value="0"/>
    <define name="Py_LE" value="1"/>
    <define name="Py_EQ" value="2"/>
    <define name="Py_NE" value="3"/>
    <define name="Py_GT" value="4"/>
    <define name="Py_GE" value="5"/>

    <define name="PyTrash_UNWIND_LEVEL" value="50"/>

    <define name="Py_TRASHCAN_SAFE_BEGIN(op)" value="do { PyThreadState *_tstate = PyThreadState_GET(); if (_tstate-&gt;trash_delete_nesting &lt; PyTrash_UNWIND_LEVEL) { ++_tstate-&gt;trash_delete_nesting;"/>
    <define name="Py_TRASHCAN_SAFE_END(op)" value="--_tstate-&gt;trash_delete_nesting; if (_tstate-&gt;trash_delete_later &amp;&amp; _tstate-&gt;trash_delete_nesting &lt;= 0) _PyTrash_thread_destroy_chain(); } else _PyTrash_thread_deposit_object((PyObject*)op); } while (0)"/>

    <!-- objimpl.h -->
    <define name="PyObject_MALLOC" value="PyObject_Malloc"/>
    <define name="PyObject_REALLOC" value="PyObject_Realloc"/>
    <define name="PyObject_FREE" value="PyObject_Free"/>
    <define name="PyObject_Del" value="PyObject_Free"/>
    <define name="PyObject_DEL" value="PyObject_Free"/>

    <define name="PyObject_New(type, typeobj)" value="( (type *) _PyObject_New(typeobj) )"/>
    <define name="PyObject_NewVar(type, typeobj, n)" value="( (type *) _PyObject_NewVar((typeobj), (n)) )"/>
    <define name="PyObject_INIT(op, typeobj)" value="( Py_TYPE(op) = (typeobj), _Py_NewReference((PyObject *)(op)), (op) )"/>
    <define name="PyObject_INIT_VAR(op, typeobj, size)" value="( Py_SIZE(op) = (size), PyObject_INIT((op), (typeobj)) )"/>
    <define name="_PyObject_SIZE(typeobj)" value="( (typeobj)-&gt;tp_basicsize )"/>

    <define name="_PyObject_VAR_SIZE(typeobj, nitems)" value="_Py_SIZE_ROUND_UP((typeobj)-&gt;tp_basicsize + (nitems)*(typeobj)-&gt;tp_itemsize, SIZEOF_VOID_P)"/>
    <define name="PyObject_NEW(type, typeobj)" value="( (type *) PyObject_Init((PyObject *) PyObject_MALLOC( _PyObject_SIZE(typeobj) ), (typeobj)) )"/>
    <define name="PyObject_NEW_VAR(type, typeobj, n)" value="( (type *) PyObject_InitVar((PyVarObject *) PyObject_MALLOC(_PyObject_VAR_SIZE((typeobj),(n)) ),(typeobj), (n)) )"/>

    <define name="PyType_IS_GC(t)" value="PyType_HasFeature((t), Py_TPFLAGS_HAVE_GC)"/>
    <define name="PyObject_IS_GC(o)" value="(PyType_IS_GC(Py_TYPE(o)) &amp;&amp; (Py_TYPE(o)-&gt;tp_is_gc == NULL || Py_TYPE(o)-&gt;tp_is_gc(o)))"/>
    <define name="PyObject_GC_Resize(type, op, n)" value="( (type *) _PyObject_GC_Resize((PyVarObject *)(op), (n)) )"/>

    <define name="_Py_AS_GC(o)" value="((PyGC_Head *)(o)-1)"/>
    <define name="_PyGC_REFS_MASK_FINALIZED" value="(1 &lt;&lt; 0)"/>
    <define name="_PyGC_REFS_SHIFT" value="(1)"/>
    <define name="_PyGC_REFS_MASK" value="(((size_t) -1) &lt;&lt; _PyGC_REFS_SHIFT)"/>
    <define name="_PyGCHead_REFS(g)" value="((g)-&gt;gc.gc_refs &gt;&gt; _PyGC_REFS_SHIFT)"/>
    <define name="_PyGCHead_SET_REFS(g, v)" value="do { (g)-&gt;gc.gc_refs = ((g)-&gt;gc.gc_refs &amp; ~_PyGC_REFS_MASK) | (((size_t)(v)) &lt;&lt; _PyGC_REFS_SHIFT); } while (0)"/>
    <define name="_PyGCHead_DECREF(g)" value="((g)-&gt;gc.gc_refs -= 1 &lt;&lt; _PyGC_REFS_SHIFT)"/>
    <define name="_PyGCHead_FINALIZED(g)" value="(((g)-&gt;gc.gc_refs &amp; _PyGC_REFS_MASK_FINALIZED) != 0)"/>
    <define name="_PyGCHead_SET_FINALIZED(g, v)" value="do { (g)-&gt;gc.gc_refs = ((g)-&gt;gc.gc_refs &amp; ~_PyGC_REFS_MASK_FINALIZED) | (v != 0); } while (0)"/>
    <define name="_PyGC_FINALIZED(o)" value="_PyGCHead_FINALIZED(_Py_AS_GC(o))"/>
    <define name="_PyGC_SET_FINALIZED(o, v)" value="_PyGCHead_SET_FINALIZED(_Py_AS_GC(o), v)"/>
    <define name="_PyGC_REFS(o)" value="_PyGCHead_REFS(_Py_AS_GC(o))"/>
    <define name="_PyGC_REFS_UNTRACKED" value="(-2)"/>
    <define name="_PyGC_REFS_REACHABLE" value="(-3)"/>
    <define name="_PyGC_REFS_TENTATIVELY_UNREACHABLE" value="(-4)"/>
    <define name="_PyObject_GC_TRACK(o)" value="do { PyGC_Head *g = _Py_AS_GC(o); if (_PyGCHead_REFS(g) != _PyGC_REFS_UNTRACKED) Py_FatalError(&quot;GC object already tracked&quot;); _PyGCHead_SET_REFS(g, _PyGC_REFS_REACHABLE); g-&gt;gc.gc_next = _PyGC_generation0; g-&gt;gc.gc_prev = _PyGC_generation0-&gt;gc.gc_prev; g-&gt;gc.gc_prev-&gt;gc.gc_next = g; _PyGC_generation0-&gt;gc.gc_prev = g; } while (0)"/>
    <define name="_PyObject_GC_UNTRACK(o)" value="do { PyGC_Head *g = _Py_AS_GC(o); assert(_PyGCHead_REFS(g) != _PyGC_REFS_UNTRACKED); _PyGCHead_SET_REFS(g, _PyGC_REFS_UNTRACKED); g-&gt;gc.gc_prev-&gt;gc.gc_next = g-&gt;gc.gc_next; g-&gt;gc.gc_next-&gt;gc.gc_prev = g-&gt;gc.gc_prev; g-&gt;gc.gc_next = NULL; } while (0)"/>
    <define name="_PyObject_GC_IS_TRACKED(o)" value="(_PyGC_REFS(o) != _PyGC_REFS_UNTRACKED)"/>
    <define name="_PyObject_GC_MAY_BE_TRACKED(obj)" value="(PyObject_IS_GC(obj) &amp;&amp; (!PyTuple_CheckExact(obj) || _PyObject_GC_IS_TRACKED(obj)))"/>

    <define name="PyObject_GC_New(type, typeobj)" value="( (type *) _PyObject_GC_New(typeobj) )"/>
    <define name="PyObject_GC_NewVar(type, typeobj, n)" value="( (type *) _PyObject_GC_NewVar((typeobj), (n)) )"/>

    <define name="Py_VISIT(op)" value="do { if (op) { int vret = visit((PyObject *)(op), arg); if (vret) return vret; } } while (0)"/>
    <define name="PyType_SUPPORTS_WEAKREFS(t)" value="((t)-&gt;tp_weaklistoffset &gt; 0)"/>
    <define name="PyObject_GET_WEAKREFS_LISTPTR(o)" value="((PyObject **) (((char *) (o)) + Py_TYPE(o)-&gt;tp_weaklistoffset))"/>

    <!-- odictobject.h -->
    <define name="PyODict_Check(op)" value="PyObject_TypeCheck(op, &amp;PyODict_Type)"/>
    <define name="PyODict_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyODict_Type)"/>
    <define name="PyODict_SIZE(op)" value="PyDict_GET_SIZE((op))"/>
    <define name="PyODict_GetItem(od, key)" value="PyDict_GetItem((PyObject *)od, key)"/>
    <define name="PyODict_GetItemWithError(od, key)" value="PyDict_GetItemWithError((PyObject *)od, key)"/>
    <define name="PyODict_Contains(od, key)" value="PyDict_Contains((PyObject *)od, key)"/>
    <define name="PyODict_Size(od)" value="PyDict_Size((PyObject *)od)"/>
    <define name="PyODict_GetItemString(od, key)" value="PyDict_GetItemString((PyObject *)od, key)"/>

    <!-- pycapsule.h -->
    <define name="PyCapsule_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyCapsule_Type)"/>

    <!-- pyctype.h -->
    <define name="PY_CTF_LOWER" value="0x01"/>
    <define name="PY_CTF_UPPER" value="0x02"/>
    <define name="PY_CTF_ALPHA" value="(PY_CTF_LOWER|PY_CTF_UPPER)"/>
    <define name="PY_CTF_DIGIT" value="0x04"/>
    <define name="PY_CTF_ALNUM" value="(PY_CTF_ALPHA|PY_CTF_DIGIT)"/>
    <define name="PY_CTF_SPACE" value="0x08"/>
    <define name="PY_CTF_XDIGIT" value="0x10"/>

    <define name="Py_ISLOWER(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_LOWER)"/>
    <define name="Py_ISUPPER(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_UPPER)"/>
    <define name="Py_ISALPHA(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_ALPHA)"/>
    <define name="Py_ISDIGIT(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_DIGIT)"/>
    <define name="Py_ISXDIGIT(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_XDIGIT)"/>
    <define name="Py_ISALNUM(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_ALNUM)"/>
    <define name="Py_ISSPACE(c)" value="(_Py_ctype_table[Py_CHARMASK(c)] &amp; PY_CTF_SPACE)"/>

    <define name="Py_TOLOWER(c)" value="(_Py_ctype_tolower[Py_CHARMASK(c)])"/>
    <define name="Py_TOUPPER(c)" value="(_Py_ctype_toupper[Py_CHARMASK(c)])"/>

    <!-- pymacro.h -->
    <define name="Py_MIN(x, y)" value="(((x) &gt; (y)) ? (y) : (x))"/>
    <define name="Py_MAX(x, y)" value="(((x) &gt; (y)) ? (x) : (y))"/>
    <define name="Py_ABS(x)" value="((x) &lt; 0 ? -(x) : (x))"/>
    <define name="_Py_XSTRINGIFY(x)" value="#x"/>
    <define name="Py_STRINGIFY(x)" value="_Py_XSTRINGIFY(x)"/>
    <define name="Py_MEMBER_SIZE(type, member)" value="sizeof(((type *)0)-&gt;member)"/>
    <define name="Py_CHARMASK(c)" value="((unsigned char)((c) &amp; 0xff))"/>
    <define name="Py_ARRAY_LENGTH(array)" value="(sizeof(array) / sizeof((array)[0]))"/>
    <define name="Py_UNUSED(name)" value="_unused_ ## name"/>
    <define name="_Py_SIZE_ROUND_DOWN(n, a)" value="((size_t)(n) &amp; ~(size_t)((a) - 1))"/>
    <define name="_Py_SIZE_ROUND_UP(n, a)" value="(((size_t)(n) + (size_t)((a) - 1)) &amp; ~(size_t)((a) - 1))"/>
    <define name="_Py_ALIGN_DOWN(p, a)" value="((void *)((uintptr_t)(p) &amp; ~(uintptr_t)((a) - 1)))"/>
    <define name="_Py_ALIGN_UP(p, a)" value="((void *)(((uintptr_t)(p) + (uintptr_t)((a) - 1)) &amp; ~(uintptr_t)((a) - 1)))"/>
    <define name="_Py_IS_ALIGNED(p, a)" value="(!((uintptr_t)(p) &amp; (uintptr_t)((a) - 1)))"/>
    <define name="Py_UNUSED(name)" value="_unused_ ## name"/>
    <define name="Py_UNREACHABLE()" value="abort()"/>

    <!-- pymath.h -->
    <define name="Py_MATH_PIl" value="3.1415926535897932384626433832795029L"/>
    <define name="Py_MATH_PI" value="3.14159265358979323846"/>
    <define name="Py_MATH_El" value="2.7182818284590452353602874713526625L"/>
    <define name="Py_MATH_E" value="2.7182818284590452354"/>
    <define name="Py_MATH_TAU" value="6.2831853071795864769252867665590057683943L"/>

    <define name="Py_IS_NAN(X)" value="isnan(X)"/>
    <define name="Py_IS_INFINITY(X)" value="isinf(X)"/>
    <define name="Py_IS_FINITE(X)" value="isfinite(X)"/>
    <define name="Py_HUGE_VAL" value="HUGE_VAL"/>
    <define name="Py_NAN" value="(Py_HUGE_VAL * 0.)"/>
    <define name="Py_OVERFLOWED(X)" value="((X) != 0.0 &amp;&amp; (errno == ERANGE || (X) == Py_HUGE_VAL || (X) == -Py_HUGE_VAL))"/>

    <!-- pymem.h -->
    <define name="PyMem_MALLOC(n)" value="PyMem_Malloc(n)"/>
    <define name="PyMem_REALLOC(p, n)" value="PyMem_Realloc(p, n)"/>
    <define name="PyMem_FREE(p)" value="PyMem_Free(p)"/>

    <define name="PyMem_New(type, n)" value="( ((size_t)(n) &gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL : ( (type *) PyMem_Malloc((n) * sizeof(type)) ) )"/>
    <define name="PyMem_NEW(type, n)" value="( ((size_t)(n) &gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL : ( (type *) PyMem_MALLOC((n) * sizeof(type)) ) )"/>

    <define name="PyMem_Resize(p, type, n)" value="( (p) = ((size_t)(n) &gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL : (type *) PyMem_Realloc((p), (n) * sizeof(type)) )"/>
    <define name="PyMem_RESIZE(p, type, n)" value="( (p) = ((size_t)(n) &gt; PY_SSIZE_T_MAX / sizeof(type)) ? NULL : (type *) PyMem_REALLOC((p), (n) * sizeof(type)) )"/>

    <define name="PyMem_Del" value="PyMem_Free"/>
    <define name="PyMem_DEL" value="PyMem_FREE"/>

    <!-- pyport.h -->
    <define name="Py_PROTO(x)" value="x">
        <warn severity="warning">Obsolete define 'Py_PROTO' used.
Obsolete define 'Py_PROTO' used. This define should not be used. It's intended for backward compatibility only.
        </warn>
    </define>
    <define name="Py_FPROTO(x)" value="Py_PROTO(x)">
        <warn severity="warning">Obsolete define 'Py_FPROTO' used.
Obsolete define 'Py_FPROTO' used. This define should not be used. It's intended for backward compatibility only.
        </warn>
    </define>

    <define name="PY_LONG_LONG" value="long long"/>
    <define name="PY_LLONG_MIN" value="LLONG_MIN"/>
    <define name="PY_LLONG_MAX" value="LLONG_MAX"/>
    <define name="PY_ULLONG_MAX" value="ULLONG_MAX"/>

    <define name="PY_INT32_T" value="int32_t"/>
    <define name="PY_INT64_T" value="int64_t"/>
    <define name="PY_UINT32_T" value="uint32_t"/>
    <define name="PY_UINT64_T" value="uint64_t"/>

    <define name="PY_SIZE_MAX" value="SIZE_MAX"/>

    <define name="SIZEOF_PY_HASH_T" value="SIZEOF_SIZE_T"/>
    <define name="SIZEOF_PY_UHASH_T" value="SIZEOF_SIZE_T"/>

    <define name="PY_SSIZE_T_MAX" value="((Py_ssize_t)(((size_t)-1)&gt;&gt;1))"/>
    <define name="PY_SSIZE_T_MIN" value="(-PY_SSIZE_T_MAX-1)"/>

    <define name="Py_LOCAL(type)" value="static type"/>
    <define name="Py_LOCAL_INLINE(type)" value="static inline type"/>

    <define name="Py_MEMCPY" value="memcpy">
        <warn severity="warning">Unnecessary macro 'Py_MEMCPY' used.
Unnecessary macro 'Py_MEMCPY' used. Historically this macro was used to work around memcpy performance on Windows. However, now it's sufficient to simply replace usages of this macro with memcpy.

See https://bugs.python.org/issue28126 for more information.
        </warn>
    </define>

    <define name="Py_ARITHMETIC_RIGHT_SHIFT(TYPE, I, J)" value="((I) &lt; 0 ? -1-((-1-(I)) &gt;&gt; (J)) : (I) &gt;&gt; (J))"/>

    <define name="Py_FORCE_EXPANSION(X)" value="X"/>

    <define name="Py_SAFE_DOWNCAST(VALUE, WIDE, NARROW)" value="(NARROW)(VALUE)"/>

    <define name="_Py_SET_EDOM_FOR_NAN(X)" value=";"/>

    <define name="Py_SET_ERRNO_ON_MATH_ERROR(X)" value="do { if (errno == 0) { if ((X) == Py_HUGE_VAL || (X) == -Py_HUGE_VAL) errno = ERANGE; else _Py_SET_EDOM_FOR_NAN(X) } } while (0)"/>
    <define name="Py_SET_ERANGE_IF_OVERFLOW(X)" value="Py_SET_ERRNO_ON_MATH_ERROR(X)"/>

    <define name="Py_ADJUST_ERANGE1(X)" value="do { if (errno == 0) { if ((X) == Py_HUGE_VAL || (X) == -Py_HUGE_VAL) errno = ERANGE; } else if (errno == ERANGE &amp;&amp; (X) == 0.0) errno = 0; } while (0)"/>
    <define name="Py_ADJUST_ERANGE2(X, Y)" value="do { if ((X) == Py_HUGE_VAL || (X) == -Py_HUGE_VAL || (Y) == Py_HUGE_VAL || (Y) == -Py_HUGE_VAL) { if (errno == 0) errno = ERANGE; } else if (errno == ERANGE) errno = 0; } while (0)"/>

    <define name="PyAPI_FUNC(RTYPE)" value="RTYPE"/>
    <define name="PyAPI_DATA(RTYPE)" value="extern RTYPE"/>
    <define name="DL_EXPORT(RTYPE)" value="RTYPE">
        <warn severity="warning">Deprecated macro 'DL_EXPORT' used.
Deprecated macro 'DL_EXPORT' used.
        </warn>
    </define>
    <define name="DL_IMPORT(RTYPE)" value="RTYPE">
        <warn severity="warning">Deprecated macro 'DL_IMPORT' used.
Deprecated macro 'DL_IMPORT' used.
        </warn>
    </define>

    <define name="Py_GCC_ATTRIBUTE(x)" value=""/>
    <define name="Py_ALIGNED(x)" value=""/>

    <define name="Py_LL(x)" value="x##LL"/>
    <define name="Py_ULL(x)" value="Py_LL(x##U)"/>

    <define name="Py_VA_COPY" value="va_copy"/>

    <define name="PY_BIG_ENDIAN" value="0"/>
    <define name="PY_LITTLE_ENDIAN" value="1"/>

    <!-- pystate.h -->
    <define name="MAX_CO_EXTRA_USERS" value="255"/>

    <define name="PyTrace_CALL" value="0"/>
    <define name="PyTrace_EXCEPTION" value="1"/>
    <define name="PyTrace_LINE" value="2"/>
    <define name="PyTrace_RETURN" value="3"/>
    <define name="PyTrace_C_CALL" value="4"/>
    <define name="PyTrace_C_EXCEPTION" value="5"/>
    <define name="PyTrace_C_RETURN" value="6"/>

    <define name="PyThreadState_GET()" value="(_PyThreadState_Current)"/>

    <!-- pystrcmp.h -->
    <define name="PyOS_strnicmp" value="PyOS_mystrnicmp"/>
    <define name="PyOS_stricmp" value="PyOS_mystricmp"/>

    <!-- pystrtod.h -->
    <define name="Py_DTSF_SIGN" value="0x01 "/>
    <define name="Py_DTSF_ADD_DOT_0" value="0x02 "/>
    <define name="Py_DTSF_ALT" value="0x04 "/>

    <define name="Py_DTST_FINITE" value="0"/>
    <define name="Py_DTST_INFINITE" value="1"/>
    <define name="Py_DTST_NAN" value="2"/>

    <!-- pythread.h -->
    <define name="NOWAIT_LOCK" value="0"/>
    <define name="WAIT_LOCK" value="1"/>

    <define name="PY_TIMEOUT_T" value="long long"/>
    <define name="PY_TIMEOUT_MAX" value="PY_LLONG_MAX"/>

    <define name="PYTHREAD_INVALID_THREAD_ID" value="((unsigned long)-1)"/>
    <define name="Py_tss_NEEDS_INIT" value="{0}"/>

    <!-- pytime.h -->
    <define name="_PyTime_MIN" value="PY_LLONG_MIN"/>
    <define name="_PyTime_MAX" value="PY_LLONG_MAX"/>
    <define name="_PYTIME_FROMSECONDS(seconds)" value="((_PyTime_t)(seconds) * (1000 * 1000 * 1000))"/>

    <!-- rangeobject.h -->
    <define name="PyRange_Check(op)" value="(Py_TYPE(op) == &amp;PyRange_Type)"/>

    <!-- setobject.h -->
    <define name="PySet_MINSIZE" value="8"/>
    <define name="PySet_GET_SIZE(so)" value="(assert(PyAnySet_Check(so)),(((PySetObject *)(so))-&gt;used))"/>
    <define name="PyFrozenSet_CheckExact(ob)" value="(Py_TYPE(ob) == &amp;PyFrozenSet_Type)"/>
    <define name="PyAnySet_CheckExact(ob)" value="(Py_TYPE(ob) == &amp;PySet_Type || Py_TYPE(ob) == &amp;PyFrozenSet_Type)"/>
    <define name="PyAnySet_Check(ob)" value="(Py_TYPE(ob) == &amp;PySet_Type || Py_TYPE(ob) == &amp;PyFrozenSet_Type || PyType_IsSubtype(Py_TYPE(ob), &amp;PySet_Type) || PyType_IsSubtype(Py_TYPE(ob), &amp;PyFrozenSet_Type))"/>
    <define name="PySet_Check(ob)" value="(Py_TYPE(ob) == &amp;PySet_Type || PyType_IsSubtype(Py_TYPE(ob), &amp;PySet_Type))"/>
    <define name="PyFrozenSet_Check(ob)" value="(Py_TYPE(ob) == &amp;PyFrozenSet_Type || PyType_IsSubtype(Py_TYPE(ob), &amp;PyFrozenSet_Type))"/>

    <!-- sliceobject.h -->
    <define name="Py_Ellipsis" value="(&amp;_Py_EllipsisObject)"/>
    <define name="PySlice_Check(op)" value="(Py_TYPE(op) == &amp;PySlice_Type)"/>
    <define name="PySlice_GetIndicesEx(slice, length, start, stop, step, slicelen)" value="(PySlice_Unpack((slice), (start), (stop), (step)) &lt; 0 ? ((*(slicelen) = 0), -1) : ((*(slicelen) = PySlice_AdjustIndices((length), (start), (stop), *(step))), 0))"/>

    <!-- structmember.h -->
    <define name="T_SHORT" value="0"/>
    <define name="T_INT" value="1"/>
    <define name="T_LONG" value="2"/>
    <define name="T_FLOAT" value="3"/>
    <define name="T_DOUBLE" value="4"/>
    <define name="T_STRING" value="5"/>
    <define name="T_OBJECT" value="6"/>
    <define name="T_CHAR" value="7"/>
    <define name="T_BYTE" value="8"/>
    <define name="T_UBYTE" value="9"/>
    <define name="T_USHORT" value="10"/>
    <define name="T_UINT" value="11"/>
    <define name="T_ULONG" value="12"/>
    <define name="T_STRING_INPLACE" value="13"/>
    <define name="T_BOOL" value="14"/>

    <define name="T_OBJECT_EX" value="16"/>
    <define name="T_LONGLONG" value="17"/>
    <define name="T_ULONGLONG" value="18"/>

    <define name="T_PYSSIZET" value="19"/>
    <define name="T_NONE" value="20"/>

    <define name="READONLY" value="1"/>
    <define name="READ_RESTRICTED" value="2"/>
    <define name="PY_WRITE_RESTRICTED" value="4"/>
    <define name="RESTRICTED" value="(READ_RESTRICTED | PY_WRITE_RESTRICTED)"/>

    <!-- structseq.h -->
    <define name="PyStructSequence_SET_ITEM(op, i, v)" value="PyTuple_SET_ITEM(op, i, v)"/>
    <define name="PyStructSequence_GET_ITEM(op, i)" value="PyTuple_GET_ITEM(op, i)"/>

    <!-- symtable.h -->
    <define name="PySTEntry_Check(op)" value="(Py_TYPE(op) == &amp;PySTEntry_Type)"/>

    <!-- tupleobject.h -->
    <define name="PyTuple_Check(op)" value="PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)"/>
    <define name="PyTuple_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyTuple_Type)"/>
    <define name="PyTuple_GET_ITEM(op, i)" value="(((PyTupleObject *)(op))-&gt;ob_item[i])"/>
    <define name="PyTuple_GET_SIZE(op)" value="(assert(PyTuple_Check(op)),Py_SIZE(op))"/>
    <define name="PyTuple_SET_ITEM(op, i, v)" value="(((PyTupleObject *)(op))-&gt;ob_item[i] = v)"/>

    <!-- unicodeobject.h -->
    <define name="Py_UNICODE_SIZE" value="SIZEOF_WCHAR_T"/>
    <define name="PY_UNICODE_TYPE" value="wchar_t"/>

    <define name="Py_UNICODE_ISSPACE(ch)" value="((ch) &lt; 128U ? _Py_ascii_whitespace[(ch)] : _PyUnicode_IsWhitespace(ch))"/>
    <define name="Py_UNICODE_ISLOWER(ch)" value="_PyUnicode_IsLowercase(ch)"/>
    <define name="Py_UNICODE_ISUPPER(ch)" value="_PyUnicode_IsUppercase(ch)"/>
    <define name="Py_UNICODE_ISTITLE(ch)" value="_PyUnicode_IsTitlecase(ch)"/>
    <define name="Py_UNICODE_ISLINEBREAK(ch)" value="_PyUnicode_IsLinebreak(ch)"/>

    <define name="Py_UNICODE_TOLOWER(ch)" value="_PyUnicode_ToLowercase(ch)"/>
    <define name="Py_UNICODE_TOUPPER(ch)" value="_PyUnicode_ToUppercase(ch)"/>
    <define name="Py_UNICODE_TOTITLE(ch)" value="_PyUnicode_ToTitlecase(ch)"/>

    <define name="Py_UNICODE_ISDECIMAL(ch)" value="_PyUnicode_IsDecimalDigit(ch)"/>
    <define name="Py_UNICODE_ISDIGIT(ch)" value="_PyUnicode_IsDigit(ch)"/>
    <define name="Py_UNICODE_ISNUMERIC(ch)" value="_PyUnicode_IsNumeric(ch)"/>
    <define name="Py_UNICODE_ISPRINTABLE(ch)" value="_PyUnicode_IsPrintable(ch)"/>

    <define name="Py_UNICODE_TODECIMAL(ch)" value="_PyUnicode_ToDecimalDigit(ch)"/>
    <define name="Py_UNICODE_TODIGIT(ch)" value="_PyUnicode_ToDigit(ch)"/>
    <define name="Py_UNICODE_TONUMERIC(ch)" value="_PyUnicode_ToNumeric(ch)"/>

    <define name="Py_UNICODE_ISALPHA(ch)" value="_PyUnicode_IsAlpha(ch)"/>
    <define name="Py_UNICODE_ISALNUM(ch)" value="(Py_UNICODE_ISALPHA(ch) || Py_UNICODE_ISDECIMAL(ch) || Py_UNICODE_ISDIGIT(ch) || Py_UNICODE_ISNUMERIC(ch))"/>
    <define name="Py_UNICODE_COPY(target, source, length)" value="memcpy((target), (source), (length)*sizeof(Py_UNICODE))"/>
    <define name="Py_UNICODE_FILL(target, value, length)" value="do {Py_ssize_t i_; Py_UNICODE *t_ = (target); Py_UNICODE v_ = (value); for (i_ = 0; i_ &lt; (length); i_++) t_[i_] = v_; } while (0)"/>
    <define name="Py_UNICODE_IS_SURROGATE(ch)" value="(0xD800 &lt;= (ch) &amp;&amp; (ch) &lt;= 0xDFFF)"/>
    <define name="Py_UNICODE_IS_HIGH_SURROGATE(ch)" value="(0xD800 &lt;= (ch) &amp;&amp; (ch) &lt;= 0xDBFF)"/>
    <define name="Py_UNICODE_IS_LOW_SURROGATE(ch)" value="(0xDC00 &lt;= (ch) &amp;&amp; (ch) &lt;= 0xDFFF)"/>

    <define name="Py_UNICODE_JOIN_SURROGATES(high, low)" value="(((((Py_UCS4)(high) &amp; 0x03FF) &lt;&lt; 10) | ((Py_UCS4)(low) &amp; 0x03FF)) + 0x10000)"/>
    <define name="Py_UNICODE_HIGH_SURROGATE(ch)" value="(0xD800 - (0x10000 &gt;&gt; 10) + ((ch) &gt;&gt; 10))"/>
    <define name="Py_UNICODE_LOW_SURROGATE(ch)" value="(0xDC00 + ((ch) &amp; 0x3FF))"/>
    <define name="Py_UNICODE_MATCH(string, offset, substring)" value="((*((string)-&gt;wstr + (offset)) == *((substring)-&gt;wstr)) &amp;&amp; ((*((string)-&gt;wstr + (offset) + (substring)-&gt;wstr_length-1) == *((substring)-&gt;wstr + (substring)-&gt;wstr_length-1))) &amp;&amp; !memcmp((string)-&gt;wstr + (offset), (substring)-&gt;wstr, (substring)-&gt;wstr_length*sizeof(Py_UNICODE)))"/>
    <define name="PyUnicode_Check(op)" value="PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)"/>
    <define name="PyUnicode_CheckExact(op)" value="(Py_TYPE(op) == &amp;PyUnicode_Type)"/>

    <define name="PyUnicode_WSTR_LENGTH(op)" value="(PyUnicode_IS_COMPACT_ASCII(op) ? ((PyASCIIObject*)op)-&gt;length : ((PyCompactUnicodeObject*)op)-&gt;wstr_length)"/>
    <define name="PyUnicode_GET_SIZE(op)" value="(assert(PyUnicode_Check(op)), (((PyASCIIObject *)(op))-&gt;wstr) ? PyUnicode_WSTR_LENGTH(op) : ((void)PyUnicode_AsUnicode((PyObject *)(op)), assert(((PyASCIIObject *)(op))-&gt;wstr), PyUnicode_WSTR_LENGTH(op)))">
        <warn severity="warning">Deprecated macro 'PyUnicode_GET_SIZE' used.
Deprecated macro 'PyUnicode_GET_SIZE' used. This macro is deprecated in Python 3.3 and will be removed in Python 4.0, as it's part of the old Unicode API.

Consider migrating to using 'PyUnicode_GET_LENGTH' instead.
        </warn>
    </define>
    <define name="PyUnicode_GET_DATA_SIZE(op)" value="(PyUnicode_GET_SIZE(op) * Py_UNICODE_SIZE)">
        <warn severity="warning">Deprecated macro 'PyUnicode_GET_DATA_SIZE' used.
Deprecated macro 'PyUnicode_GET_DATA_SIZE' used. This macro is deprecated in Python 3.3 and will be removed in Python 4.0, as it's part of the old Unicode API.

Consider migrating to using 'PyUnicode_GET_LENGTH' instead.
        </warn>
    </define>
    <define name="PyUnicode_AS_UNICODE(op)" value="(assert(PyUnicode_Check(op)), (((PyASCIIObject *)(op))-&gt;wstr) ? (((PyASCIIObject *)(op))-&gt;wstr) : PyUnicode_AsUnicode((PyObject *)(op)))">
        <warn severity="warning">Deprecated macro 'PyUnicode_AS_UNICODE' used.
Deprecated macro 'PyUnicode_AS_UNICODE' used. This macro is deprecated in Python 3.3 and will be removed in Python 4.0, as it's part of the old Unicode API.

This macro is also now inefficient – because in many cases the Py_UNICODE representation does not exist and needs to be created – and can fail (return NULL with an exception set).

Consider migrating to using the'PyUnicode_nBYTE_DATA' family of macros or use 'PyUnicode_WRITE' or 'PyUnicode_READ' instead.
        </warn>
    </define>
    <define name="PyUnicode_AS_DATA(op)" value="((const char *)(PyUnicode_AS_UNICODE(op)))">
        <warn severity="warning">Deprecated macro 'PyUnicode_AS_UNICODE' used.
Deprecated macro 'PyUnicode_AS_UNICODE' used. This macro is deprecated in Python 3.3 and will be removed in Python 4.0, as it's part of the old Unicode API.

This macro is also now inefficient – because in many cases the Py_UNICODE representation does not exist and needs to be created – and can fail (return NULL with an exception set).

Consider migrating to using the 'PyUnicode_nBYTE_DATA' family of macros or use 'PyUnicode_WRITE' or 'PyUnicode_READ' instead.
        </warn>
    </define>

    <define name="SSTATE_NOT_INTERNED" value="0"/>
    <define name="SSTATE_INTERNED_MORTAL" value="1"/>
    <define name="SSTATE_INTERNED_IMMORTAL" value="2"/>

    <define name="PyUnicode_IS_ASCII(op)" value="(assert(PyUnicode_Check(op)), assert(PyUnicode_IS_READY(op)), ((PyASCIIObject*)op)-&gt;state.ascii)"/>
    <define name="PyUnicode_IS_COMPACT(op)" value="(((PyASCIIObject*)(op))-&gt;state.compact)"/>
    <define name="PyUnicode_IS_COMPACT_ASCII(op)" value="(((PyASCIIObject*)op)-&gt;state.ascii &amp;&amp; PyUnicode_IS_COMPACT(op))"/>

    <define name="PyUnicode_1BYTE_DATA(op)" value="((Py_UCS1*)PyUnicode_DATA(op))"/>
    <define name="PyUnicode_2BYTE_DATA(op)" value="((Py_UCS2*)PyUnicode_DATA(op))"/>
    <define name="PyUnicode_4BYTE_DATA(op)" value="((Py_UCS4*)PyUnicode_DATA(op))"/>

    <define name="PyUnicode_KIND(op)" value="(assert(PyUnicode_Check(op)), assert(PyUnicode_IS_READY(op)), ((PyASCIIObject *)(op))-&gt;state.kind)"/>
    <define name="_PyUnicode_COMPACT_DATA(op)" value="(PyUnicode_IS_ASCII(op) ? ((void*)((PyASCIIObject*)(op) + 1)) : ((void*)((PyCompactUnicodeObject*)(op) + 1)))"/>
    <define name="_PyUnicode_NONCOMPACT_DATA(op)" value="(assert(((PyUnicodeObject*)(op))-&gt;data.any), ((((PyUnicodeObject *)(op))-&gt;data.any)))"/>
    <define name="PyUnicode_DATA(op)" value="(assert(PyUnicode_Check(op)), PyUnicode_IS_COMPACT(op) ? _PyUnicode_COMPACT_DATA(op) : _PyUnicode_NONCOMPACT_DATA(op))"/>

    <define name="PyUnicode_WRITE(kind, data, index, value)" value="do { switch ((kind)) { case PyUnicode_1BYTE_KIND: { ((Py_UCS1 *)(data))[(index)] = (Py_UCS1)(value); break; } case PyUnicode_2BYTE_KIND: { ((Py_UCS2 *)(data))[(index)] = (Py_UCS2)(value); break; } default: { assert((kind) == PyUnicode_4BYTE_KIND); ((Py_UCS4 *)(data))[(index)] = (Py_UCS4)(value); } } } while (0)"/>
    <define name="PyUnicode_READ(kind, data, index)" value="((Py_UCS4) ((kind) == PyUnicode_1BYTE_KIND ? ((const Py_UCS1 *)(data))[(index)] : ((kind) == PyUnicode_2BYTE_KIND ? ((const Py_UCS2 *)(data))[(index)] : ((const Py_UCS4 *)(data))[(index)])))"/>
    <define name="PyUnicode_READ_CHAR(unicode, index)" value="(assert(PyUnicode_Check(unicode)), assert(PyUnicode_IS_READY(unicode)), (Py_UCS4) (PyUnicode_KIND((unicode)) == PyUnicode_1BYTE_KIND ? ((const Py_UCS1 *)(PyUnicode_DATA((unicode))))[(index)] : (PyUnicode_KIND((unicode)) == PyUnicode_2BYTE_KIND ? ((const Py_UCS2 *)(PyUnicode_DATA((unicode))))[(index)] : ((const Py_UCS4 *)(PyUnicode_DATA((unicode))))[(index)])))"/>
    <define name="PyUnicode_GET_LENGTH(op)" value="(assert(PyUnicode_Check(op)), assert(PyUnicode_IS_READY(op)), ((PyASCIIObject *)(op))-&gt;length)"/>
    <define name="PyUnicode_IS_READY(op)" value="(((PyASCIIObject*)op)-&gt;state.ready)"/>
    <define name="PyUnicode_READY(op)" value="(assert(PyUnicode_Check(op)), (PyUnicode_IS_READY(op) ? 0 : _PyUnicode_Ready((PyObject *)(op))))"/>
    <define name="PyUnicode_MAX_CHAR_VALUE(op)" value="(assert(PyUnicode_IS_READY(op)), (PyUnicode_IS_ASCII(op) ? (0x7f) : (PyUnicode_KIND(op) == PyUnicode_1BYTE_KIND ? (0xffU) : (PyUnicode_KIND(op) == PyUnicode_2BYTE_KIND ? (0xffffU) : (0x10ffffU)))))"/>
    <define name="Py_UNICODE_REPLACEMENT_CHARACTER" value="((Py_UCS4) 0xFFFD)"/>
    <define name="_PyUnicodeWriter_Prepare(WRITER, LENGTH, MAXCHAR)" value="(((MAXCHAR) &lt;= (WRITER)->maxchar &amp;&amp; (LENGTH) &lt;= (WRITER)->size - (WRITER)-&gt;pos) ? 0 : (((LENGTH) == 0) ? 0 : _PyUnicodeWriter_PrepareInternal((WRITER), (LENGTH), (MAXCHAR))))"/>
    <define name="_PyUnicodeWriter_PrepareKind(WRITER, KIND)" value="(assert((KIND) != PyUnicode_WCHAR_KIND), (KIND) &lt;= (WRITER)->kind ? 0 : _PyUnicodeWriter_PrepareKindInternal((WRITER), (KIND)))"/>
    <define name="PyUnicode_CHECK_INTERNED(op)" value="(((PyASCIIObject *)(op))-&gt;state.interned)"/>

    <!-- weakrefobject.h -->
    <define name="PyWeakref_CheckRef(op)" value="PyObject_TypeCheck(op, &amp;_PyWeakref_RefType)"/>
    <define name="PyWeakref_CheckRefExact(op)" value="(Py_TYPE(op) == &amp;_PyWeakref_RefType)"/>
    <define name="PyWeakref_CheckProxy(op)" value="((Py_TYPE(op) == &amp;_PyWeakref_ProxyType) || (Py_TYPE(op) == &amp;_PyWeakref_CallableProxyType))"/>
    <define name="PyWeakref_Check(op)" value="(PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))"/>
    <define name="PyWeakref_GET_OBJECT(ref)" value="(Py_REFCNT(((PyWeakReference *)(ref))-&gt;wr_object) &gt; 0 ? ((PyWeakReference *)(ref))-&gt;wr_object : Py_None)"/>

    <!-- - - - - -  -->
    <!-- Data types -->
    <!-- - - - - -  -->

    <!-- bytearrayobject.h -->
    <podtype name="PyByteArrayObject"/>

    <!-- bytesobject.h -->
    <podtype name="_PyBytesWriter"/>
    <podtype name="PyBytesObject"/>

    <!-- cellobject.h -->
    <podtype name="PyCellObject"/>

    <!-- classobject.h -->
    <podtype name="PyInstanceMethodObject"/>
    <podtype name="PyMethodObject"/>

    <!-- code.h -->
    <podtype name="_Py_CODEUNIT" sign="u" size="2"/>
    <podtype name="PyAddrPair"/>
    <podtype name="PyCodeObject"/>

    <!-- compile.h -->
    <podtype name="PyCompilerFlags"/>
    <podtype name="PyFutureFeatures"/>

    <!-- complexobject.h -->
    <podtype name="Py_complex"/>
    <podtype name="PyComplexObject"/>

    <!-- datetime.h -->
    <podtype name="_PyDateTime_BaseDateTime"/>
    <podtype name="_PyDateTime_BaseTime"/>
    <podtype name="_PyDateTime_BaseTZInfo"/>
    <podtype name="PyDateTime_CAPI"/>
    <podtype name="PyDateTime_Date"/>
    <podtype name="PyDateTime_DateTime"/>
    <podtype name="PyDateTime_Delta"/>
    <podtype name="PyDateTime_Time"/>
    <podtype name="PyDateTime_TZInfo"/>

    <!-- descrobject.h -->
    <podtype name="PyDescrObject"/>
    <podtype name="PyGetSetDef"/>
    <podtype name="PyGetSetDescrObject"/>
    <podtype name="PyMemberDescrObject"/>
    <podtype name="PyMethodDescrObject"/>
    <podtype name="PyWrapperDescrObject"/>

    <!-- dictobject.h -->
    <podtype name="_PyDictViewObject"/>
    <podtype name="PyDictKeysObject"/>
    <podtype name="PyDictObject"/>

    <!-- floatobject.h -->
    <podtype name="PyFloatObject"/>

    <!-- frameobject.h -->
    <podtype name="PyFrameObject"/>
    <podtype name="PyTryBlock"/>

    <!-- funcobject.h -->
    <podtype name="PyFunctionObject"/>

    <!-- genobject.h -->
    <podtype name="PyAsyncGenObject"/>
    <podtype name="PyCoroObject"/>
    <podtype name="PyGenObject"/>

    <!-- listobject.h -->
    <podtype name="PyListObject"/>

    <!-- longobject.h -->
    <podtype name="PyLongObject"/>

    <!-- memoryobject.h -->
    <podtype name="PyMemoryViewObject"/>

    <!-- methodobject.h -->
    <podtype name="_PyCFunctionFast"/>
    <podtype name="_PyCFunctionFastWithKeywords"/>
    <podtype name="PyCFunction"/>
    <podtype name="PyCFunctionObject"/>
    <podtype name="PyCFunctionWithKeywords"/>
    <podtype name="PyMethodDef"/>
    <podtype name="PyNoArgsFunction"/>

    <!-- modsupport.h -->
    <podtype name="_PyArg_Parser"/>

    <!-- moduleobject.h -->
    <podtype name="PyModuleDef"/>
    <podtype name="PyModuleDef_Base"/>
    <podtype name="PyModuleDef_Slot"/>

    <!-- node.h -->
    <podtype name="node"/>

    <!-- object.h -->
    <podtype name="PyAsyncMethods"/>
    <podtype name="Py_buffer"/>
    <podtype name="PyBufferProcs"/>
    <podtype name="PyHeapTypeObject"/>
    <podtype name="PyMappingMethods"/>
    <podtype name="PyNumberMethods"/>
    <podtype name="PyObject"/>
    <podtype name="PySequenceMethods"/>
    <podtype name="PyTypeObject"/>
    <podtype name="PyType_Slot"/>
    <podtype name="PyType_Spec"/>
    <podtype name="PyVarObject"/>

    <podtype name="allocfunc"/>
    <podtype name="binaryfunc"/>
    <podtype name="descrgetfunc"/>
    <podtype name="descrsetfunc"/>
    <podtype name="destructor"/>
    <podtype name="freefunc"/>
    <podtype name="getattrfunc"/>
    <podtype name="getattrofunc"/>
    <podtype name="getbufferproc"/>
    <podtype name="getiterfunc"/>
    <podtype name="hashfunc"/>
    <podtype name="initproc"/>
    <podtype name="inquiry"/>
    <podtype name="iternextfunc"/>
    <podtype name="lenfunc"/>
    <podtype name="newfunc"/>
    <podtype name="objobjargproc"/>
    <podtype name="objobjproc"/>
    <podtype name="printfunc"/>
    <podtype name="releasebufferproc"/>
    <podtype name="reprfunc"/>
    <podtype name="richcmpfunc"/>
    <podtype name="setattrfunc"/>
    <podtype name="setattrofunc"/>
    <podtype name="ssizeargfunc"/>
    <podtype name="ssizeobjargproc"/>
    <podtype name="ssizessizeargfunc"/>
    <podtype name="ssizessizeobjargproc"/>
    <podtype name="ternaryfunc"/>
    <podtype name="traverseproc"/>
    <podtype name="unaryfunc"/>
    <podtype name="visitproc"/>
    <podtype name="writebufferproc"/>

    <!-- objimpl.h -->
    <podtype name="PyGC_Head"/>
    <podtype name="PyObjectArenaAllocator"/>

    <!-- odictobject.h -->
    <podtype name="PyODictObject"/>

    <!-- parser.h -->
    <podtype name="parser_state"/>
    <podtype name="stack"/>
    <podtype name="stackentry"/>

    <!-- pyarena.h -->
    <podtype name="PyArena"/>

    <!-- pycapsule.h -->
    <podtype name="PyCapsule_Destructor"/>

    <!-- pyconfig.h -->
    <podtype name="ssize_t" sign="s"/>

    <!-- pyerrors.h -->
    <podtype name="PyBaseExceptionObject"/>
    <podtype name="PyEnvironmentErrorObject"/>
    <podtype name="PyImportErrorObject"/>
    <podtype name="PyOSErrorObject"/>
    <podtype name="PyStopIterationObject"/>
    <podtype name="PySyntaxErrorObject"/>
    <podtype name="PySystemExitObject"/>
    <podtype name="PyUnicodeErrorObject"/>
    <podtype name="PyWindowsErrorObject"/>

    <!-- pyhash.h -->
    <podtype name="PyHash_FuncDef"/>
    <podtype name="_Py_HashSecret_t"/>

    <!-- pylifecycle.h -->
    <podtype name="PyOS_sighandler_t"/>

    <!-- pymem.h -->
    <podtype name="_PyTraceMalloc_domain_t" sign="u"/>
    <podtype name="PyMemAllocatorDomain"/>
    <podtype name="PyMemAllocatorEx"/>

    <!-- pyport.h -->
    <podtype name="Py_hash_t" size="s"/>
    <podtype name="Py_intptr_t" sign="s"/>
    <podtype name="Py_ssize_t" sign="s"/>
    <podtype name="Py_ssize_clean_t" sign="s"/>
    <podtype name="Py_uhash_t" sign="u"/>
    <podtype name="Py_uintptr_t" sign="u"/>

    <!-- pystate.h -->
    <podtype name="PyGILState_STATE"/>
    <podtype name="PyInterpreterState"/>
    <podtype name="PyThreadFrameGetter"/>
    <podtype name="PyThreadState"/>
    <podtype name="Py_tracefunc"/>
    <podtype name="_PyErr_StackItem"/>

    <!-- pythread.h -->
    <podtype name="Py_tss_t"/>
    <podtype name="PyLockStatus"/>
    <podtype name="PyThread_type_lock"/>
    <podtype name="PyThread_type_sema"/>

    <!-- pytime.h -->
    <podtype name="_Py_clock_info_t"/>
    <podtype name="_PyTime_t" sign="s" size="8"/>
    <podtype name="_PyTime_round_t"/>

    <!-- setobject.h -->
    <podtype name="PySetObject"/>

    <!-- sliceobject.h -->
    <podtype name="PySliceObject"/>

    <!-- structmember.h -->
    <podtype name="PyMemberDef"/>

    <!-- structseq.h -->
    <podtype name="PyStructSequence"/>
    <podtype name="PyStructSequence_Desc"/>
    <podtype name="PyStructSequence_Field"/>

    <!-- symtable.h -->
    <podtype name="PySTEntryObject"/>
    <podtype name="symtable"/>

    <!-- tupleobject.h -->
    <podtype name="PyTupleObject"/>

    <!-- unicodeobject.h -->
    <podtype name="_PyUnicodeWriter"/>
    <podtype name="PyASCIIObject"/>
    <podtype name="PyCompactUnicodeObject"/>
    <podtype name="Py_UCS1" sign="u" size="1"/>
    <podtype name="Py_UCS2" sign="u" size="2"/>
    <podtype name="Py_UCS4" sign="u" size="4"/>
    <podtype name="Py_UNICODE">
        <warn severity="warning">Deprecated typedef 'Py_UNICODE' used.
Deprecated typedef 'Py_UNICODE' used. The 'Py_UNICODE*' representation has been deprecated since Python 3.3 and is also inefficient; it should be avoided in performance- or memory-sensitive situations.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393/#porting-guidelines).
        </warn>
    </podtype>
    <podtype name="PyUnicode_Kind"/>
    <podtype name="PyUnicodeObject"/>

    <!-- weakrefobject.h -->
    <podtype name="PyWeakReference"/>

    <!-- - - - - - -->
    <!-- Functions -->
    <!-- - - - - - -->

    <!-- Header: abstract.h | Source files: Objects/abstract.c, Objects/call.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_PyObject_FastCallDict</alloc>
        <alloc init="true">_PyMethodDef_RawFastCallDict</alloc>
        <alloc init="true">_PyCFunction_FastCallDict</alloc>
        <alloc init="true">_PyObject_FastCallKeywords</alloc>
        <alloc init="true">_PyFunction_FastCallDict</alloc>
        <alloc init="true">_PyFunction_FastCallKeywords</alloc>
        <alloc init="true">_PyMethodDef_RawFastCallKeywords</alloc>
        <alloc init="true">_PyCFunction_FastCallKeywords</alloc>
        <alloc init="true">_PyObject_FastCall_Prepend</alloc>
        <alloc init="true">_PyObject_CallFunction_SizeT</alloc>
        <alloc init="true">_PyObject_CallMethodId_SizeT></alloc>
        <alloc init="true">_PyObject_CallMethodIdObjArgs</alloc>
        <alloc init="true">_PyStack_AsDict</alloc>
        <alloc init="true">_PyStack_AsTuple</alloc>
        <alloc init="true">_PyStack_AsTupleSlice</alloc>
        <alloc init="true">PyEval_CallFunction</alloc>
        <alloc init="true">PyEval_CallMethod</alloc>
        <alloc init="true">PyEval_CallObjectWithKeywords</alloc>
        <alloc init="true">PyIter_Next</alloc>
        <alloc init="true">PyMapping_GetItemString</alloc>
        <alloc init="true">PyMapping_Items</alloc>
        <alloc init="true">PyMapping_Keys</alloc>
        <alloc init="true">PyMapping_Values</alloc>
        <alloc init="true">PyNumber_Absolute</alloc>
        <alloc init="true">PyNumber_Add</alloc>
        <alloc init="true">PyNumber_And</alloc>
        <alloc init="true">PyNumber_Divmod</alloc>
        <alloc init="true">PyNumber_Float</alloc>
        <alloc init="true">PyNumber_FloorDivide</alloc>
        <alloc init="true">PyNumber_Index</alloc>
        <alloc init="true">PyNumber_InPlaceAdd</alloc>
        <alloc init="true">PyNumber_InPlaceAnd</alloc>
        <alloc init="true">PyNumber_InPlaceFloorDivide</alloc>
        <alloc init="true">PyNumber_InPlaceLshift</alloc>
        <alloc init="true">PyNumber_InPlaceMatrixMultiply</alloc>
        <alloc init="true">PyNumber_InPlaceMultiply</alloc>
        <alloc init="true">PyNumber_InPlaceOr</alloc>
        <alloc init="true">PyNumber_InPlacePower</alloc>
        <alloc init="true">PyNumber_InPlaceRemainder</alloc>
        <alloc init="true">PyNumber_InPlaceRshift</alloc>
        <alloc init="true">PyNumber_InPlaceSubtract</alloc>
        <alloc init="true">PyNumber_InPlaceTrueDivide</alloc>
        <alloc init="true">PyNumber_InPlaceXor</alloc>
        <alloc init="true">PyNumber_Invert</alloc>
        <alloc init="true">PyNumber_Long</alloc>
        <alloc init="true">PyNumber_Lshift</alloc>
        <alloc init="true">PyNumber_MatrixMultiply</alloc>
        <alloc init="true">PyNumber_Multiply</alloc>
        <alloc init="true">PyNumber_Negative</alloc>
        <alloc init="true">PyNumber_Or</alloc>
        <alloc init="true">PyNumber_Positive</alloc>
        <alloc init="true">PyNumber_Power</alloc>
        <alloc init="true">PyNumber_Remainder</alloc>
        <alloc init="true">PyNumber_Rshift</alloc>
        <alloc init="true">PyNumber_Subtract</alloc>
        <alloc init="true">PyNumber_ToBase</alloc>
        <alloc init="true">PyNumber_TrueDivide</alloc>
        <alloc init="true">PyNumber_Xor</alloc>
        <alloc init="true">PyObject_Call</alloc>
        <alloc init="true">PyObject_CallFunction</alloc>
        <alloc init="true">PyObject_CallFunctionObjArgs</alloc>
        <alloc init="true">PyObject_CallMethod</alloc>
        <alloc init="true">PyObject_CallMethodObjArgs</alloc>
        <alloc init="true">PyObject_CallObject</alloc>
        <alloc init="true">PyObject_Format</alloc>
        <alloc init="true">PyObject_GetItem</alloc>
        <alloc init="true">PyObject_GetIter</alloc>
        <alloc init="true">PyObject_Type</alloc>
        <alloc init="true">PySequence_Concat</alloc>
        <alloc init="true">PySequence_Fast</alloc>
        <alloc init="true">PySequence_GetItem</alloc>
        <alloc init="true">PySequence_GetSlice</alloc>
        <alloc init="true">PySequence_InPlaceConcat</alloc>
        <alloc init="true">PySequence_InPlaceRepeat</alloc>
        <alloc init="true">PySequence_List</alloc>
        <alloc init="true">PySequence_Repeat</alloc>
        <alloc init="true">PySequence_Tuple</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <memory>
        <alloc init="true">_PySequence_BytesToCharpArray</alloc>
        <dealloc>_Py_FreeCharPArray</dealloc>
    </memory>
    <function name="_PyObject_HasFastCall">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_CheckFunctionResult">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyObject_FastCallDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyMethodDef_RawFastCallDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyCFunction_FastCallDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyObject_FastCallKeywords">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_Call">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyFunction_FastCallDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyFunction_FastCallKeywords">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyMethodDef_RawFastCallKeywords">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyCFunction_FastCallKeywords">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_Call">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyEval_CallObjectWithKeywords">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_CallObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyObject_FastCall_Prepend">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_CallFunction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyEval_CallFunction">
        <warn severity="warning">Obsolescent function 'PyEval_CallFunction' used.
Obsolescent function 'PyEval_CallFunction' used. This function is only kept in the API for backwards compatibility.

Consider using 'PyObject_CallFunction' instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyObject_CallFunction_SizeT">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyObject_CallMethod">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyEval_CallMethod">
        <warn severity="warning">Obsolescent function 'PyEval_CallMethod' used.
Obsolescent function 'PyEval_CallMethod' used. This function is only kept in the API for backwards compatibility.

Consider using 'PyObject_CallMethod' instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyObject_CallMethodId">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyObject_CallMethodId_SizeT">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyObject_CallMethodObjArgs">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_CallMethodIdObjArgs">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_CallFunctionObjArgs">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyStack_AsTuple">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyStack_AsTupleSlice">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyStack_AsDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyStack_UnpackDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/></arg>
        <arg nr="5"><not-bool/><not-null/></arg>
    </function>
    <function name="PyObject_Type">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_Length,PyObject_Size">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyObject_HasLen">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_LengthHint">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_GetItem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_SetItem">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_DelItem">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_DelItemString">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyObject_CheckReadBuffer">
        <warn severity="warning">Deprecated function 'PyObject_CheckReadBuffer' used.
Deprecated function 'PyObject_CheckReadBuffer' used. This function has been deprecated since Python 3.0.

This function is part of the "old buffer protocol" API in Python 2. This function is still exposed for the sole purpose of making the porting process easier.

It's recommended that 'PyObject_GetBuffer' be used to manually get a buffer view over an object, and to use 'PyBuffer_Release' when the buffer view can be released.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_AsCharBuffer">
        <warn severity="warning">Deprecated function 'PyObject_AsCharBuffer' used.
Deprecated function 'PyObject_AsCharBuffer' used. This function has been deprecated since Python 3.0.

This function is part of the "old buffer protocol" API in Python 2. This function is still exposed for the sole purpose of making the porting process easier.

It's recommended that 'PyObject_GetBuffer' be used to manually get a buffer view over an object, and to use 'PyBuffer_Release' when the buffer view can be released.
        </warn>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="PyObject_AsReadBuffer">
        <warn severity="warning">Deprecated function 'PyObject_AsReadBuffer' used.
Deprecated function 'PyObject_AsReadBuffer' used. This function has been deprecated since Python 3.0.

This function is part of the "old buffer protocol" API in Python 2. This function is still exposed for the sole purpose of making the porting process easier.

It's recommended that 'PyObject_GetBuffer' be used to manually get a buffer view over an object, and to use 'PyBuffer_Release' when the buffer view can be released.
        </warn>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="PyObject_AsWriteBuffer">
        <warn severity="warning">Deprecated function 'PyObject_AsWriteBuffer' used.
Deprecated function 'PyObject_AsWriteBuffer' used. This function has been deprecated since Python 3.0.

This function is part of the "old buffer protocol" API in Python 2. This function is still exposed for the sole purpose of making the porting process easier.

It's recommended that 'PyObject_GetBuffer' be used to manually get a buffer view over an object, and to use 'PyBuffer_Release' when the buffer view can be released.
        </warn>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="PyObject_Format">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
        <function name="PyObject_GetBuffer">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyBuffer_IsContiguous">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyBuffer_GetPointer">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_add_one_to_index_C,_Py_add_one_to_index_F">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyBuffer_FromContiguous">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_CopyData">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyBuffer_FillContiguousStrides">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyBuffer_FillInfo">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="4"/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="5"><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyBuffer_Release">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyNumber_Check">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyNumber_Add,PyNumber_And,PyNumber_Divmod,PyNumber_FloorDivide,PyNumber_InPlaceAdd,PyNumber_InPlaceAnd,PyNumber_InPlaceFloorDivide,PyNumber_InPlaceLshift,PyNumber_InMatrixMultiply,PyNumber_InPlaceMultiply,PyNumber_InPlaceOr,PyNumber_InPlaceRemainder,PyNumber_InPlaceRshift,PyNumber_InPlaceSubtract,PyNumber_InPlaceTrueDivide,PyNumber_InPlaceXor,PyNumber_Lshift,PyNumber_MatrixMultiply,PyNumber_Multiply,PyNumber_Or,PyNumber_Remainder,PyNumber_Rshift,PyNumber_Subtract,PyNumber_TrueDivide,PyNumber_Xor">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyNumber_InPlacePower,PyNumber_Power">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyNumber_Absolute,PyNumber_Invert,PyNumber_Negative,PyNumber_Positive">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyNumber_Index">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyNumber_AsSsize_t">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyNumber_Float,PyNumber_Long">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyNumber_ToBase">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>2,8,10,16</valid></arg>
    </function>
    <function name="PySequence_Check">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PySequence_Length,PySequence_Size">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySequence_Concat,PySequence_InPlaceConcat">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySequence_Repeat,PySequence_InPlaceRepeat">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PySequence_GetItem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PySequence_GetSlice">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PySequence_SetItem">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySequence_DelItem">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PySequence_SetSlice">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySequence_DelSlice">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PySequence_List,PySequence_Tuple">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySequence_Fast">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_PySequence_IterSearch">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PySequence_Count">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySequence_Contains">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySequence_In">
        <warn severity="warning">Deprecated function 'PySequence_In' used.
Deprecated function 'PySequence_In' used. This function is deprecated in Python 3.0 and is only kept for backward compatibility.

Consider migrating to using 'PySequence_Contains' instead.

See PEP 3100 for more information (https://www.python.org/dev/peps/pep-3100/).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySequence_Index">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMapping_Check">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyMapping_Length,PyMapping_Size">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMapping_GetItemString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyMapping_SetItemString">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMapping_HasKeyString">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyMapping_HasKey">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMapping_Items,PyMapping_Keys,PyMapping_Values">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_RealIsInstance,_PyObject_RealIsSubclass,PyObject_IsInstance,PyObject_IsSubclass">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_GetIter,PyIter_Next">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PySequence_BytesToCharpArray">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="char*const*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_FreeCharPArray">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: ast.h | Source files: Python/ast.c -->
    <function name="PyAST_Validate">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyAST_FromNode">
        <leak-ignore/>
        <returnValue type="mod_ty"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyAST_FromNodeObject">
        <leak-ignore/>
        <returnValue type="mod_ty"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: bitset.h | Source files: Parser/bitset.c -->
    <memory>
        <alloc init="true">newbitset</alloc>
        <dealloc>delbitset</dealloc>
    </memory>
    <function name="newbitset">
        <use-retval/>
        <returnValue type="bitset"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="delbitset">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="addbit">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="samebitset">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="mergebitset">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: boolobject.h | Source file: Objects/boolobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyBool_FromLong</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyBool_FromLong">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
    </function>

    <!-- Header: bytearrayobject.h | Source file: Objects/bytearrayobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyByteArray_FromObject</alloc>
        <alloc init="true">PyByteArray_FromStringAndSize</alloc>
        <alloc init="true">PyByteArray_Concat</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyByteArray_FromObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyByteArray_FromStringAndSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyByteArray_Concat">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyByteArray_Size">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyByteArray_AsString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyByteArray_Resize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: bytesobject.h | Source files: Objects/bytesobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_PyBytes_FormatEx</alloc>
        <alloc init="true">_PyBytes_FromHex</alloc>
        <alloc init="true">_PyBytes_Join</alloc>
        <alloc init="true">PyBytes_DecodeEscape</alloc>
        <alloc init="true">PyBytes_FromFormat</alloc>
        <alloc init="true">PyBytes_FromFormatV</alloc>
        <alloc init="true">PyBytes_FromObject</alloc>
        <alloc init="true">PyBytes_FromString</alloc>
        <alloc init="true">PyBytes_FromStringAndSize</alloc>
        <alloc init="true">PyBytes_Repr</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyBytes_FromFormat">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><formatstr/><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyBytes_FromFormatV">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyBytes_FromObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyBytes_FromString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyBytes_FromStringAndSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyBytes_FormatEx">
        <use-retval/>
        <returnValue type="PyObject"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>
    <function name="PyBytes_DecodeEscape">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyBytes_Size">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyBytes_AsString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyBytes_AsStringAndSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="PyBytes_Repr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="_PyBytes_Join">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyBytes_FromHex">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="PyBytes_Concat">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyBytes_ConcatAndDel">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyBytes_Resize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyBytes_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyBytesWriter_Init">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
    </function>
    <function name="_PyBytesWriter_Dealloc">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyBytesWriter_AsString">
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyBytesWriter_GetSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyBytesWriter_CheckConsistency">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyBytesWriter_Resize">
        <leak-ignore/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyBytesWriter_Prepare">
        <leak-ignore/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyBytesWriter_Alloc">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyBytesWriter_Finish">
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyBytesWriter_WriteBytes">
        <leak-ignore/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: bytes_methods.h | Source files: Objects/bytes_methods.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_Py_bytes_maketrans</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_Py_bytes_isalpha,_Py_bytes_isalpha,_Py_bytes_isalnum,_Py_bytes_isdigit,_Py_bytes_islower,_Py_bytes_isupper,_Py_bytes_istitle">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_Py_bytes_lower,_Py_bytes_upper,_Py_bytes_title,_Py_bytes_capitalize,_Py_bytes_swapcase">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_Py_bytes_find,_Py_bytes_index,_Py_bytes_rfind,_Py_bytes_rindex,_Py_bytes_count,_Py_bytes_startswith,_Py_bytes_endswith">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_bytes_contains">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_bytes_maketrans">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: cellobject.h | Source files: Objects/cellobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyCell_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyCell_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCell_Get">
        <leak-ignore/>
        <use-retval/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCell_Set">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header ceval.h | Source files: Python/ceval.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_Py_GetDXProfile</alloc>
        <alloc init="true">_PyEval_CallTracing</alloc>
        <alloc init="true">PyEval_EvalCode</alloc>
        <alloc init="true">PyEval_EvalCodeEx</alloc>
        <alloc init="true">PyEval_EvalFrame</alloc>
        <alloc init="true">PyEval_EvalFrameEx</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyEval_ThreadsInitialized">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyEval_FiniThreads">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyEval_InitThreads">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyEval_AcquireThread">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyEval_ReleaseThread">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyEval_AcquireLock">
        <warn severity="warning">Deprecated function 'PyEval_AcquireLock' used.
Deprecated function 'PyEval_AcquireLock' used. This function is deprecated in Python 3.2.

Consider migrating to 'PyEval_RestoreThread' or 'PyEval_AcquireThread' instead.
        </warn>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyEval_ReleaseLock">
        <warn severity="warning">Deprecated function 'PyEval_ReleaseLock' used.
Deprecated function 'PyEval_ReleaseLock' used. This function is deprecated in Python 3.2.

Consider migrating to 'PyEval_SaveThread' or 'PyEval_ReleaseThread' instead.
        </warn>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyEval_ReInitThreads">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyEval_SignalAsyncExc">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyEval_SaveThread">
        <use-retval/>
        <returnValue type="PyThreadState*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyEval_RestoreThread">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyEval_SignalReceived">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_AddPendingCall">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="Py_MakePendingCalls">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyEval_Initialize">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_GetRecursionLimit">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_SetRecursionLimit">
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_CheckRecursiveCall">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyEval_EvalCode">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyEval_EvalCodeEx">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/></arg>
        <arg nr="7"><not-bool/><not-uninit/></arg>
        <arg nr="8"><not-bool/></arg>
        <arg nr="9"><not-bool/><not-uninit/></arg>
        <arg nr="10"><not-bool/><not-uninit/></arg>
        <arg nr="11"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyEval_EvalFrame">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyEval_EvalFrameEx">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyEval_EvalFrameDefault">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyEval_EvalCodeWithName">
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-uninit/></arg>
        <arg nr="7"></arg>
        <arg nr="8"><not-bool/><not-uninit/></arg>
        <arg nr="9"><not-bool/><not-uninit/></arg>
        <arg nr="10"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="11"><not-bool/><not-uninit/></arg>
        <arg nr="12"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="13"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="14"><not-bool/><not-uninit/></arg>
        <arg nr="15"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyEval_CallTracing">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyEval_SetProfile,PyEval_SetTrace">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyEval_SetAsyncGenFinalizer,_PyEval_SetAsyncGenFirstiter,_PyEval_SetCoroutineWrapper">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyEval_GetAsyncGenFinalizer,_PyEval_GetAsyncGenFirstiter,_PyEval_GetCoroutineWrapper">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyEval_GetBuiltins,PyEval_GetGlobals,PyEval_GetLocals">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyEval_GetFrame">
        <use-retval/>
        <returnValue type="PyFrameObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyEval_MergeCompilerFlags">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyEval_GetFuncDesc,PyEval_GetFuncName">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_GetDXProfile">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyEval_RequestCodeExtraIndex">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: classobject.h | Source files: Objects/classobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyInstanceMethod_New</alloc>
        <alloc init="true">PyMethod_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyMethod_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMethod_Self">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyInstanceMethod_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyInstanceMethod_Function">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMethod_ClearFreeList">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: code.h | Source file: Objects/codeobject.c, Python/peephole.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyCode_New</alloc>
        <alloc init="true">PyCode_NewEmpty</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyCode_New">
        <use-retval/>
        <returnValue type="PyCodeObject*"/>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="7"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="8"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="9"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="10"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="11"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="12"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="13"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="14"><not-bool/><not-uninit/></arg>
        <arg nr="15"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCode_NewEmpty">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyCodeObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCode_Optimize">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: compile.h | Source files: Python/compile.c, Python/future.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyFuture_FromAST</alloc>
        <alloc init="true">PyFuture_FromASTObject</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyNode_Compile">
        <use-retval/>
        <returnValue type="PyCodeObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_Py_Mangle">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCompile_OpcodeStackEffect">
        <const/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyFuture_FromASTObject">
        <use-retval/>
        <returnValue type="PyFutureFeatures*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyFuture_FromAST">
        <use-retval/>
        <returnValue type="PyFutureFeatures*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>

    <!-- Header: complexobject.h | Source files: Objects/complexobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyComplex_FromCComplex</alloc>
        <alloc init="true">PyComplex_FromDoubles</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyComplex_FromCComplex">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
    </function>
    <function name="PyComplex_FromDoubles">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyComplex_RealAsDouble,PyComplex_ImagAsDouble">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyComplex_AsCComplex">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_complex"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_c_diff,_Py_c_pow,_Py_c_prod,_Py_c_quot,_Py_c_sum">
        <const/>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_complex"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="_Py_c_neg">
        <const/>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_complex"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
    </function>
    <function name="_Py_c_abs">
        <const/>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
    </function>

    <!-- Header: descrobject.h | Source file: Objects/descrobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyDescr_NewGetSet</alloc>
        <alloc init="true">PyDescr_NewMember</alloc>
        <alloc init="true">PyDescr_NewMethod</alloc>
        <alloc init="true">PyDescr_NewWrapper</alloc>
        <alloc init="true">PyDescr_NewClassMethod</alloc>
        <alloc init="true">PyWrapper_New</alloc>
        <alloc init="true">PyDictProxy_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyDescr_NewGetSet">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDescr_NewMember">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyDescr_NewMethod">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDescr_NewWrapper">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyDescr_NewClassMethod">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDictProxy_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyWrapper_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: dictobject.h | Source files: Objects/dictobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_PyDict_FromKeys</alloc>
        <alloc init="true">_PyDict_NewKeysForClass</alloc>
        <alloc init="true">_PyDict_NewPresized</alloc>
        <alloc init="true">_PyDict_Pop</alloc>
        <alloc init="true">_PyDict_Pop_KnownHash</alloc>
        <alloc init="true">_PyDictView_Intersect</alloc>
        <alloc init="true">_PyDictView_New</alloc>
        <alloc init="true">PyDict_Copy</alloc>
        <alloc init="true">PyDict_Items</alloc>
        <alloc init="true">PyDict_Keys</alloc>
        <alloc init="true">PyDict_New</alloc>
        <alloc init="true">PyDict_Values</alloc>
        <alloc init="true">PyObject_GenericGetDict</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyDict_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyDict_DebugMallocStats">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyDict_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyDict_HasOnlyStringKeys">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDict_MaybeUntrack">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDict_NewPresized">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyDict_GetItem,PyDict_GetItemWithError">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDict_GetItem_KnownHash">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyDict_GetItemIdWithError">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDict_LoadGlobal">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_SetItem">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDict_SetItem_KnownHash">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>:-2,0:</valid></arg>
    </function>
    <function name="PyDict_DelItem">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDict_DelItem_KnownHash">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>:-2,0:</valid></arg>
    </function>
    <function name="_PyDict_DelItemIf">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_Clear">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDict_Next">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/></arg>
        <arg nr="4"><not-bool/></arg>
        <arg nr="5"><not-bool/></arg>
    </function>
    <function name="PyDict_Next">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/></arg>
        <arg nr="4"><not-bool/></arg>
    </function>
    <function name="_PyDict_Pop_KnownHash">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyDict_Pop">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyDict_FromKeys">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_MergeFromSeq2">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="PyDict_Update">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_Merge,_PyDict_MergeEx">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="PyDict_Copy">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_Size">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_Items,PyDict_Keys,PyDict_Values">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_SetDefault">
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDict_KeysSize,_PyDict_SizeOf">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_Contains">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDict_Contains">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyDict_GetItemId">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_GetItemString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyDict_SetItemId">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_SetItemString">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDict_DelItemId">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyDict_DelItemString">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyDictView_New">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDictView_Intersect">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDict_NewKeysForClass">
        <use-retval/>
        <returnValue type="PyDictKeysObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyObject_GenericGetDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyObjectDict_SetItem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDictKeys_DecRef">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: fileobject.h | Source files: Objects/fileobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyFile_FromFd</alloc>
        <alloc init="true">PyFile_GetLine</alloc>
        <alloc init="true">PyFile_NewStdPrinter</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyFile_FromFd">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="6"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="7"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="8"><not-uninit/></arg>
    </function>
    <function name="PyFile_GetLine">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyFile_WriteObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyFile_WriteString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_AsFileDescriptor">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="Py_UniversalNewlineFgets">
        <leak-ignore/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"></arg>
    </function>
    <function name="PyFile_NewStdPrinter">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: fileutils.h | Source files: Python/fileutils.c -->
    <resource>
        <alloc init="true">_Py_open</alloc>
        <alloc init="true">_Py_open_noraise</alloc>
        <dealloc>close</dealloc>
    </resource>
    <resource>
        <alloc init="true">_Py_fopen</alloc>
        <alloc init="true">_Py_fopen_obj</alloc>
        <alloc init="true">_Py_wfopen</alloc>
        <dealloc>fclose</dealloc>
    </resource>
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_Py_device_encoding</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <memory>
        <alloc init="true">Py_DecodeLocale</alloc>
        <dealloc>PyMem_RawFree</dealloc>
    </memory>
    <memory>
        <alloc init="true">Py_EncodeLocale</alloc>
        <dealloc>PyMem_Free</dealloc>
    </memory>
    <function name="_Py_device_encoding">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="Py_DecodeLocale">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="wchar_t*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="Py_EncodeLocale">
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="_Py_time_t_to_FILE_TIME">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="_Py_fstat,_Py_fstat_noraise">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="_Py_stat">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="_Py_get_inheritable">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_set_inheritable">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="_Py_open,_Py_open_noraise">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_wfopen">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="FILE*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_Py_fopen,_Py_fopen_obj">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="FILE*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_Py_read">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-null/><valid>0:</valid></arg>
    </function>
    <function name="_Py_write,_Py_write_noraise">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_Py_wrealpath">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="wchar_t*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_Py_wgetcwd">
        <leak-ignore/>
        <returnValue type="wchar_t*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_Py_dup">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_get_blocking">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_set_blocking">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>

    <!-- Header: floatobject.h | Source files: Objects/floatobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyFloat_FromDouble</alloc>
        <alloc init="true">PyFloat_FromString</alloc>
        <alloc init="true">PyFloat_GetInfo</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyFloat_GetMax,PyFloat_GetMin">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
    </function>
    <function name="PyFloat_GetInfo">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyFloat_FromDouble">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyFloat_FromString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFloat_AsDouble">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyFloat_Init">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyFloat_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyFloat_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyFloat_DebugMallocStats">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyFloat_Pack2,_PyFloat_Pack4,_PyFloat_Pack8">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="_PyFloat_Unpack2,_PyFloat_Unpack4,_PyFloat_Unpack8">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>

    <!-- Header: frameobject.h | Source files: Objects/frameobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyFrame_New</alloc>
        <alloc init="true">_PyFrame_New_NoTrack</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyFrame_GetLineNumber">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyFrame_Init">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyFrame_New,_PyFrame_New_NoTrack">
        <use-retval/>
        <returnValue type="PyFrameObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFrame_BlockSetup">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyFrame_BlockPop">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyTryBlock*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFrame_FastToLocalsWithError">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFrame_FastToLocals">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFrame_LocalsToFast">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="PyFrame_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyFrame_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyFrame_DebugMallocStats">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: funcobject.h | Source files: Objects/funcobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyClassMethod_New</alloc>
        <alloc init="true">PyFunction_New</alloc>
        <alloc init="true">PyFunction_NewWithQualName</alloc>
        <alloc init="true">PyStaticMethod_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyFunction_NewWithQualName">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyFunction_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFunction_GetCode,PyFunction_GetGlobals,PyFunction_GetModule,PyFunction_GetDefaults,PyFunction_GetKwDefaults,PyFunction_GetClosure,PyFunction_GetAnnotations">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyFunction_SetDefaults,PyFunction_SetKwDefaults,PyFunction_SetClosure,PyFunction_SetAnnotations">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyClassMethod_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStaticMethod_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: genobject.h | Source files: Objects/genobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_PyGen_Send</alloc>
        <alloc init="true">_PyGen_yf</alloc>
        <alloc init="true">_PyAsyncGenValueWrapperNew</alloc>
        <alloc init="true">PyAsyncGen_New</alloc>
        <alloc init="true">PyCoro_New</alloc>
        <alloc init="true">PyGen_NewWithQualName</alloc>
        <alloc init="true">PyGen_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyGen_Finalize">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyGen_Send">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyGen_yf">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyGen_SetStopIterationValue">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyGen_FetchStopIterationValue">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyGen_NewWithQualName">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyGen_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyGen_NeedsFinalizing">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyCoro_GetAwaitableIter">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCoro_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyAsyncGen_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyAsyncGen_ClearFreeLists">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyAsyncGen_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyAsyncGenValueWrapperNew">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: grammar.h | Source files: Parser/grammar.c, Parser/grammar1.c, Parser/printgrammar.c -->
    <memory>
        <alloc init="true">newgrammar</alloc>
        <dealloc>freegrammar</dealloc>
    </memory>
    <function name="newgrammar">
        <use-retval/>
        <returnValue type="grammar*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="freegrammar">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="adddfa">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="dfa*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="addstate">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="addarc">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="addlabel">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="findlabel">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="translatelabels">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyGrammar_FindDFA">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="dfa*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyGrammar_LabelRepr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="printgrammar">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="printnonterminals">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="addfirstsets">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: import.h | Source files: Python/import.c, Python/importdl.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_PyImport_GetModuleId</alloc>
        <alloc init="true">_PyImport_LoadDynamicModuleWithSpec</alloc>
        <alloc init="true">PyImport_ExecCodeModule</alloc>
        <alloc init="true">PyImport_ExecCodeModuleEx</alloc>
        <alloc init="true">PyImport_ExecCodeModuleObject</alloc>
        <alloc init="true">PyImport_ExecCodeModuleWithPathnames</alloc>
        <alloc init="true">PyImport_GetImporter</alloc>
        <alloc init="true">PyImport_GetModule</alloc>
        <alloc init="true">PyImport_Import</alloc>
        <alloc init="true">PyImport_ImportModule</alloc>
        <alloc init="true">PyImport_ImportModuleLevel</alloc>
        <alloc init="true">PyImport_ImportModuleLevelObject</alloc>
        <alloc init="true">PyImport_ImportModuleNoBlock</alloc>
        <alloc init="true">PyImport_ReloadModule</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyImport_Init,_PyImportHooks_Init,_PyImportZip_Init,_PyImport_AcquireLock,_PyImport_ReInitLock,_PyImport_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyImport_ReleaseLock">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyImport_LoadDynamicModuleWithSpec">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyImport_GetModuleDict">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyImport_IsInitialized">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyImport_GetModuleId">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyImport_SetModule">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyImport_SetModuleString">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyImport_GetModule">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyImport_Cleanup">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyImport_GetMagicNumber">
        <use-retval/>
        <returnValue type="long"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyImport_GetMagicTag">
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyImport_FixupExtensionObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyImport_FixupBuiltin">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyImport_FindExtensionObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyImport_FindExtensionObjectEx">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyImport_FindBuiltin">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyImport_AddModuleObject">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyImport_AddModuleObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyImport_AddModule">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyImport_ExecCodeModule">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyImport_ExecCodeModuleEx">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyImport_ExecCodeModuleWithPathnames">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyImport_ExecCodeModuleObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyImport_GetImporter">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyImport_ImportFrozenModuleObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyImport_ImportFrozenModule">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyImport_ImportModule">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyImport_ImportModuleNoBlock">
        <warn severity="warning">Deprecated function 'PyImport_ImportModuleNoBlock' used.
Deprecated function 'PyImport_ImportModuleNoBlock' used.

This function is now simply an alias for 'PyImport_ImportModule' as of Python 3.3. Consider migrating to it instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyImport_ImportModuleLevelObject">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyImport_ImportModuleLevel">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyImport_ReloadModule">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyImport_Import">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyImport_ExtendInittab">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyImport_AppendInittab">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: intrcheck.h | Source files: Modules/posixmodule.c, Modules/signalmodule.c -->
    <function name="PyOS_AfterFork_Parent,PyOS_AfterFork_Child,PyOS_BeforeFork">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyOS_AfterFork">
        <warn severity="warning">Deprecated function 'PyOS_AfterFork' used.
Deprecated function 'PyOS_AfterFork' used. The function is deprecated in Python 3.7. It is recommended to migrate to using function 'PyOS_AfterFork_Child' instead.

For more details, see b.p.o 16500: https://bugs.python.org/issue16500
        </warn>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyOS_InterruptOccurred">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyOS_InitInterrupts">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: iterobject.h | Source files: Objects/iterobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PySeqIter_New</alloc>
        <alloc init="true">PyCallIter_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PySeqIter_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCallIter_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: listobject.h | Source files: Objects/listobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyList_New</alloc>
        <alloc init="true">PyList_GetSlice</alloc>
        <alloc init="true">PyList_AsTuple</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyList_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyList_Size">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_GetItem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyList_SetItem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_Insert">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_Append">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_GetSlice">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyList_SetSlice">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyList_Sort">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_Reverse">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_AsTuple">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyList_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"></arg>
    </function>

    <!-- Header: longobject.h | Source files: Objects/longobject.c, Python/mystrtoul.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">_PyLong_New</alloc>
        <alloc init="true">_PyLong_Copy</alloc>
        <alloc init="true">_PyLong_DivmodNear</alloc>
        <alloc init="true">_PyLong_FromByteArray</alloc>
        <alloc init="true">_PyLong_FromBytes</alloc>
        <alloc init="true">_PyLong_FromNbInt</alloc>
        <alloc init="true">_PyLong_GCD</alloc>
        <alloc init="true">PyLong_FromLong></alloc>
        <alloc init="true">PyLong_FromUnsignedLong</alloc>
        <alloc init="true">PyLong_FromDouble</alloc>
        <alloc init="true">PyLong_FromVoidPtr</alloc>
        <alloc init="true">PyLong_FromUnsignedLongLong</alloc>
        <alloc init="true">PyLong_FromSsize_t</alloc>
        <alloc init="true">PyLong_FromSize_t</alloc>
        <alloc init="true">PyLong_FromString</alloc>
        <alloc init="true">PyLong_FromUnicode</alloc>
        <alloc init="true">PyLong_FromUnicodeObject</alloc>
        <alloc init="true">PyLong_GetInfo</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyLong_New">
        <use-retval/>
        <returnValue type="PyLongObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyLong_Copy">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_FromLong,PyLong_FromUnsignedLong,PyLong_FromDouble,PyLong_FromLongLong,PyLong_FromVoidPtr,PyLong_FromUnsignedLongLong,PyLong_FromSsize_t,PyLong_FromSize_t">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsLongAndOverflow">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="PyLong_AsLong">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsSsize_t">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsUnsignedLong">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsSize_t">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="size_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsUnsignedLongMask">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyLong_AsInt">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsVoidPtr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsLongLong">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="long long*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsLongLongAndOverflow">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="long long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="PyLong_AsDouble">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_AsUnsignedLongLong,PyLong_AsUnsignedLongLongMask">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned long long*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyLong_FromString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>2:36</valid></arg>
    </function>
    <function name="PyLong_FromUnicode">
        <warn severity="warning">Deprecated function 'PyLong_FromUnicode' used.
Deprecated function 'PyLong_FromUnicode' used. This function has been deprecated since Python 3.3 and is going to be removed in 4.0. This function is part of the old-style Py_UNICODE API.

Consider migrating to using 'PyLong_FromUnicodeObject' instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>2:36</valid></arg>
    </function>
    <function name="PyLong_FromUnicodeObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>2:36</valid></arg>
    </function>
    <function name="_PyLong_FromBytes">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0,2:36</valid></arg>
    </function>
    <function name="_PyLong_Sign">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyLong_NumBits">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="size_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyLong_GCD">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyLong_DivmodNear">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyLong_FromByteArray">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-uninit/></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>
    <function name="_PyLong_AsByteArray">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-bool/><valid>0:</valid></arg>
        <arg nr="4"><not-uninit/></arg>
        <arg nr="5"><not-uninit/></arg>
    </function>
    <function name="_PyLong_FromNbInt">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyLongObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyLong_Format">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>2,8,10,16</valid></arg>
    </function>
    <function name="PyLong_GetInfo">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyLong_Frexp">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="_PyLong_Init">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyLong_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyOS_strtoul">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="unsigned long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0,2:36</valid></arg>
    </function>
    <function name="PyOS_strtol">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0,2:36</valid></arg>
    </function>

    <!-- Header: marshal.h | Source files: Python/marshal.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyMarshal_ReadLastObjectFromFile</alloc>
        <alloc init="true">PyMarshal_ReadObjectFromFile</alloc>
        <alloc init="true">PyMarshal_ReadObjectFromString</alloc>
        <alloc init="true">PyMarshal_WriteObjectToString</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyMarshal_WriteLongToFile">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyMarshal_WriteObjectToFile">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyMarshal_ReadShortFromFile">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMarshal_ReadLongFromFile">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMarshal_ReadLastObjectFromFile,PyMarshal_ReadObjectFromFile">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMarshal_ReadObjectFromString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMarshal_WriteObjectToString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyMarshal_Init">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: memoryobject.h | Source files: Objects/memoryobject.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyMemoryView_FromMemory</alloc>
        <alloc init="true">PyMemoryView_FromObject</alloc>
        <alloc init="true">PyMemoryView_GetContiguous</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyMemoryView_FromMemory">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyMemoryView_FromObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMemoryView_GetContiguous">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: metagrammar.h | Source files: Parser/metagrammar.c -->
    <function name="meta_grammar,Py_meta_grammar">
        <use-retval/>
        <returnValue type="grammar*"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: methodobject.h | Source files: Objects/methodobject.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyCFunction_New</alloc>
        <alloc init="true">PyCFunction_NewEx</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyCFunction_New">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_NewEx">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_GetFunction">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_GetSelf">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_GetFlags">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCFunction_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyCFunction_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyCFunction_DebugMallocStats">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: modsupport.h | Source files: Python/getargs.c, Python/modsupport.c -->
    <memory>
        <alloc init="true">_Py_BuildValue_SizeT</alloc>
        <alloc init="true">_Py_VaBuildValue_SizeT</alloc>
        <alloc init="true">Py_BuildValue</alloc>
        <alloc init="true">Py_VaBuildValue</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_Py_convert_optional_to_ssize_t">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="_Py_BuildValue_SizeT,Py_BuildValue">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><formatstr/><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_Py_VaBuildValue_SizeT,Py_VaBuildValue">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_VaBuildStack,_Py_VaBuildStack_SizeT">
        <use-retval/>
        <returnValue type="PyObject**"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/></arg>
    </function>
    <function name="PyModule_AddObject">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_AddIntConstant">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyModule_AddStringConstant">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>

    <!-- Header: moduleobject.h | Source files: Objects/moduleobject.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyModule_NewObject</alloc>
        <alloc init="true">PyModule_New</alloc>
        <alloc init="true">PyModule_Create</alloc>
        <alloc init="true">PyModule_Create2</alloc>
        <alloc init="true">PyModule_FromDefAndSpec</alloc>
        <alloc init="true">PyModule_FromDefAndSpec2</alloc>
        <alloc init="true">PyModule_GetNameObject</alloc>
        <alloc init="true">PyModule_GetFilenameObject</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyModuleDef_Init">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_NewObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_New">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyModule_Create">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_Create2">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyModule_FromDefAndSpec">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyModule_FromDefAndSpec2">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyModule_ExecDef">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_AddFunctions">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_SetDocString">
        <leak-ignore/>
        <use-retval/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyModule_GetDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetNameObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetName">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetFilenameObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetFilename">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetDef">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyModuleDef*"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyModule_GetState">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyModule_Clear">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyModule_ClearDict">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: namespaceobject.h | Source files: Objects/namespaceobjects.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">_PyNamespace_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyNamespace_New">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: node.h | Source files: Parser/node.c, Parser/listnode.c -->
    <memory>
        <alloc init="true">PyNode_New</alloc>
        <dealloc>PyNode_Free</dealloc>
    </memory>
    <function name="PyNode_New">
        <use-retval/>
        <returnValue type="node*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyNode_Free">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyNode_AddChild">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyNode_SizeOf">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyNode_ListTree">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: object.h | Source files: Objects/object.c, Objects/typeobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_PyObject_GenericGetAttrWithDict</alloc>
        <alloc init="true">_PyObject_GetAttrId</alloc>
        <alloc init="true">_PyObject_GetBuiltin</alloc>
        <alloc init="true">_PyType_GetDocFromInternalDoc</alloc>
        <alloc init="true">_PyType_GetTextSignatureFromInternalDoc</alloc>
        <alloc init="true">_PyType_Lookup</alloc>
        <alloc init="true">_PyType_LookupId</alloc>
        <alloc init="true">_PyObject_LookupSpecial</alloc>
        <alloc init="true">PyType_FromSpec</alloc>
        <alloc init="true">PyType_FromSpecWithBases</alloc>
        <alloc init="true">PyType_GenericAlloc</alloc>
        <alloc init="true">PyType_GenericNew</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <!-- TODO: Should probably flag these two as 'allocations' and 'deallocations'   -->
    <!--       even though they really affect the reference count of the give object -->
    <!--       Need to see if there's a decent way of tracking these.                -->
    <function name="Py_IncRef,Py_DecRef">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyType_FromSpec">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyType_FromSpecWithBases">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyType_GetSlot">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyType_GenericAlloc">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyType_GenericNew">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyType_IsSubtype">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyType_ClearCache">
        <returnValue type="unsigned int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyType_Modified">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyType_GetDocFromInternalDoc,_PyType_GetTextSignatureFromInternalDoc">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_Py_BreakPoint">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyType_Name">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyType_GetFlags">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="unsigned long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyType_Lookup">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyType_LookupId">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_LookupSpecial">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyType_CalculateMetaclass">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyTypeObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyType_Ready">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_Dump">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_IsAbstract">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_GetAttrId">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_HasAttrId">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_SetAttrId">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_GetDictPtr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject**"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_GetBuiltin">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyObject_GetMethod">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="_PyObject_GenericGetAttrWithDict">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_GenericSetAttrWithDict">
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyTrash_thread_deposit_object">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyTrash_destroy_chain">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyTrash_thread_destroy_chain">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: objimpl.h | Source files: Modules/gcmodule.c Objects/object.c, Objects/typeobject.c -->
    <memory>
        <alloc init="false">PyObject_Malloc</alloc>
        <alloc init="true">PyObject_Calloc</alloc>
        <alloc init="true">_PyObject_New</alloc>
        <alloc init="true">_PyObject_NewVar</alloc>
        <dealloc>PyObject_Free</dealloc>
    </memory>
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyObject_Repr</alloc>
        <alloc init="true">PyObject_Str</alloc>
        <alloc init="true">PyObject_ASCII</alloc>
        <alloc init="true">PyObject_Bytes</alloc>
        <alloc init="true">PyObject_RichCompare</alloc>
        <alloc init="true">PyObject_GetAttrString</alloc>
        <alloc init="true">PyObject_GetAttr</alloc>
        <alloc init="true">PyObject_Dir</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
        <memory>
        <alloc>_PyObject_GC_Malloc</alloc>
        <alloc init="true">_PyObject_GC_Calloc</alloc>
        <alloc init="true">_PyObject_GC_New</alloc>
        <alloc init="true">_PyObject_GC_NewVar</alloc>
        <dealloc>PyObject_GC_Del</dealloc>
    </memory>
    <function name="PyObject_Malloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyObject_Calloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyObject_Realloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_Py_GetAllocatedBlocks">
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyObject_Init">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_InitVar">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyVarObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyObject_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_NewVar">
        <use-retval/>
        <returnValue type="PyVarObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_CallFinalizer">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_CallFinalizerFromDealloc">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_Print">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_Repr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_Str">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_ASCII">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_Bytes">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_RichCompare">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_RichCompareBool">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_HashNotImplemented">
        <leak-ignore/>
        <returnValue type="Py_hash_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_Hash">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_hash_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_GetAttrString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyObject_HasAttrString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyObject_SetAttrString">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_GetAttr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_HasAttr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_SetAttr">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_SelfIter">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name=" _PyObject_NextNotImplemented">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_GenericGetAttr">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_GenericSetDict">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_IsTrue">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_Not">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCallable_Check">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_Dir">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_NewReference">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
    </function>
    <function name="_Py_ForgetReference">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_Dealloc">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_PrintReferences,_Py_PrintReferenceAddresses">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_GetObjects">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="Py_ReprEnter">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="Py_ReprLeave">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyTrash_deposit_object,_PyTrash_thread_deposit_object">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyTrash_destroy_chain,_PyTrash_thread_destroy_chain">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyGC_Collect">
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyGC_CollectIfEnabled">
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyGC_CollectNoFail">
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyGC_DumpShutdownStats">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyGC_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyGC_Dump">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyObject_GC_Track">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_GC_UnTrack">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_GC_Malloc">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyObject_GC_Calloc">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyObject_GC_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyObject_GC_NewVar">
        <use-retval/>
        <returnValue type="PyVarObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyObject_GC_Resize">
        <use-retval/>
        <returnValue type="PyVarObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyObject_GC_Del">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyDebugAllocatorStats">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyObject_DebugMallocStats">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: odictobject.h | Source files: Objects/odictobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyODict_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyODict_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyODict_SetItem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyODict_DelItem">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: osmodule.h | Source files: Modules/posixmodule.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyOS_FSPath</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyOS_FSPath">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: parser.h | Source files: Parser/acceler.c, Parser/parser.c -->
    <memory>
        <alloc init="true">PyParser_New</alloc>
        <dealloc>PyParser_Delete</dealloc>
    </memory>
    <function name="PyParser_New">
        <use-retval/>
        <returnValue type="parser_state*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyParser_Delete">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyParser_AddToken">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/></arg>
    </function>
    <function name="PyGrammar_AddAccelerators">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyGrammar_RemoveAccelerators">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: pyarena.h | Source file: Object/pyarena.c -->
    <memory>
        <alloc init="true">PyArena_New</alloc>
        <dealloc>PyArena_Free</dealloc>
    </memory>

    <function name="PyArena_New">
        <use-retval/>
        <returnValue type="PyArena*"/>
    </function>
    <function name="PyArena_Free">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyArena_Malloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyArena_AddPyObject">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: pycapsule.h | Source files: Objects/capsule.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyCapsule_New</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyCapsule_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_GetPointer">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyCapsule_GetDestructor">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyCapsule_Destructor"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_GetContext">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_GetName">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_Import">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_IsValid">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyCapsule_SetContext">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_SetDestructor">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyCapsule_SetName">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyCapsule_SetPointer">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: pyerrors.h, warnings.h | Source files: Module/signalmodule.c, Python/errors.c, Python/_warnings.c, Python/pylifecycle.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyErr_NewException</alloc>
        <alloc init="true">PyErr_NewExceptionWithDoc</alloc>
        <alloc init="true">PyException_GetTraceback</alloc>
        <alloc init="true">PyException_GetContext</alloc>
        <alloc init="true">PyException_GetCause</alloc>
        <alloc init="true">PyUnicodeDecodeError_Create</alloc>
        <alloc init="true">PyUnicodeEncodeError_Create</alloc>
        <alloc init="true">PyUnicodeTranslateError_Create</alloc>
        <alloc init="true">PyUnicodeDecodeError_GetEncoding</alloc>
        <alloc init="true">PyUnicodeEncodeError_GetEncoding</alloc>
        <alloc init="true">PyUnicodeDecodeError_GetObject</alloc>
        <alloc init="true">PyUnicodeEncodeError_GetObject</alloc>
        <alloc init="true">PyUnicodeTranslateError_GetObject</alloc>
        <alloc init="true">PyUnicodeDecodeError_GetReason</alloc>
        <alloc init="true">PyUnicodeEncodeError_GetReason</alloc>
        <alloc init="true">PyUnicodeTranslateError_GetReason</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyErr_Clear">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_FatalError">
        <returnValue type="void"/>
        <noreturn>true</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_WriteUnraisable">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetString">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_SetObject">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyErr_Format">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><formatstr/><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_FormatV">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="_PyErr_FormatFromCause">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><formatstr/><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_SetNone">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyErr_GetTopmostException">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="_PyErr_StackItem*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyErr_BadArgument">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_NoMemory">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_SetFromErrno">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetFromErrnoWithFilenameObject">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetFromErrnoWithFilenameObjects">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetFromErrnoWithFilename">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_SetFromWindowsErr">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetExcFromWindowsErr">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetFromWindowsErrWithFilename">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_SetExcFromWindowsErrWithFilenameObject">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetExcFromWindowsErrWithFilenameObjects">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetExcFromWindowsErrWithFilename">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_SetImportError">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SyntaxLocationObject">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SyntaxLocationEx">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SyntaxLocation">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_BadInternalCall">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_WarnEx">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_SetImportErrorSubclass">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_WarnExplicitObject">
        <leak-ignore/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_WarnExplicit">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_WarnFormat">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyErr_ResourceWarning">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><formatstr/><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyOS_snprintf">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>1:</valid></arg>
        <arg nr="3"><formatstr/><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyOS_vsnprintf">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>1:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/></arg>
    </function>
    <function name="PyErr_Occurred">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_ExceptionMatches">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_GivenExceptionMatches">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_Fetch">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="PyErr_Restore">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_NormalizeException">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="PyErr_GetExcInfo">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="PyErr_SetExcInfo">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_CheckSignals">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_SetInterrupt">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PySignal_SetWakeupFd">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_NewException">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_NewExceptionWithDoc">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyException_GetTraceback,PyException_GetContext,PyException_GetCause">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyException_SetTraceback">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyException_SetContext">
        <use-retval/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyException_SetCause">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_Create,PyUnicodeEncodeError_Create,PyUnicodeTranslateError_Create">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicodeDecodeError_GetEncoding,PyUnicodeEncodeError_GetEncoding">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_GetObject,PyUnicodeEncodeError_GetObject,PyUnicodeTranslateError_GetObject">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_GetStart,PyUnicodeEncodeError_GetStart,PyUnicodeTranslateError_GetStart">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="PyUnicodeDecodeError_SetStart,PyUnicodeEncodeError_SetStart,PyUnicodeTranslateError_SetStart">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_GetEnd,PyUnicodeEncodeError_GetEnd,PyUnicodeTranslateError_GetEnd">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="PyUnicodeDecodeError_SetEnd,PyUnicodeEncodeError_SetEnd,PyUnicodeTranslateError_SetEnd">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_GetReason,PyUnicodeEncodeError_GetReason,PyUnicodeTranslateError_GetReason">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicodeDecodeError_SetReason,PyUnicodeEncodeError_SetReason,PyUnicodeTranslateError_SetReason">
        <leak-ignore/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>

    <!-- Header: pyhash.h | Source files: Python/pyhash.c -->
    <function name="_Py_HashDouble">
        <const/>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_hash_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_HashPointer">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_hash_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_HashBytes">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_hash_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyHash_GetFuncDef">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="PyHash_FuncDef*"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: pylifecycle.h | Source files: PC/getpathp.c, Python/pylifecycle.c, Python/sysmodule.c -->
    <function name="_PyRuntime_Initialize,_PyRuntime_Finalize">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_Py_IsFinalizing">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_Py_IsCoreInitialized">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_Py_CoerceLegacyLocale">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_Py_SetLocaleFromEnv">
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_InitializeCore">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_Py_ReadMainInterpreterConfig">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_InitializeMainInterpreter">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_Py_InitializeEx_Private">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="PyModule_GetWarningsModule">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_Initialize">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_InitializeEx">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/><valid>0:1</valid></arg>
    </function>
    <function name="Py_Finalize">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_FinalizeEx">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_IsInitialized">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_SetStandardStreamEncoding">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_SetProgramName">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_GetProgramName,Py_GetPrefix,Py_GetExecPrefix,Py_GetProgramFullPath,Py_GetPath,Py_GetPythonHome">
        <use-retval/>
        <returnValue type="wchar_t*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_SetPath">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="Py_GetVersion,Py_GetPlatform,Py_GetCopyright,Py_GetCompiler,Py_GetBuildInfo">
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PySys_SetArgv">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PySys_SetArgvEx">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="Py_SetPythonHome">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_FdIsInteractive">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_Exit">
        <returnValue type="void"/>
        <noreturn>true</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="Py_AtExit">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyOS_getsig">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyOS_sighandler_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyOS_setsig">
        <leak-ignore/>
        <returnValue type="PyOS_sighandler_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: pymem.h | Source file: Object/obmalloc.c -->
    <memory>
        <alloc init="false">PyMem_RawMalloc</alloc>
        <alloc init="true">PyMem_RawCalloc</alloc>
        <alloc init="true">PyMem_RawStrdup</alloc>
        <dealloc>PyMem_RawFree</dealloc>
    </memory>
    <memory>
        <alloc init="false">PyMem_Malloc</alloc>
        <alloc init="true">PyMem_Calloc</alloc>
        <alloc init="true">PyMem_Strdup</alloc>
        <dealloc>PyMem_Free</dealloc>
    </memory>

    <function name="_PyMem_SetupAllocators">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyMem_Initialize">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
    </function>
    <function name="_PyMem_DebugEnabled">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyMem_PymallocEnabled">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyTraceMalloc_Track">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyTraceMalloc_Untrack">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyTraceMalloc_GetTraceback">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_RawMalloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_RawCalloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_RawRealloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_RawFree">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyMem_Malloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_Calloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_Realloc">
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyMem_Free">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyMem_RawStrdup">
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyMem_Strdup">
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyMem_GetAllocator">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:2</valid></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="PyMem_SetAllocator">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:2</valid></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMem_SetupDebugHooks">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: pystate.h | Source files: Python/pystate.c -->
    <memory>
        <alloc init="true">PyInterpreterState_New</alloc>
        <dealloc>PyInterpreterState_Delete</dealloc>
    </memory>
    <memory>
        <alloc init="true">PyThreadState_New</alloc>
        <alloc init="true">_PyThreadState_Prealloc</alloc>
        <dealloc>PyThreadState_Delete</dealloc>
    </memory>
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_PyThread_CurrentFrames</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyState_AddModule">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyState_ClearModules">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyThreadState_Prealloc">
        <use-retval/>
        <returnValue type="PyThreadState*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyThreadState_UncheckedGet">
        <use-retval/>
        <returnValue type="PyThreadState*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyGILState_GetInterpreterStateUnsafe">
        <use-retval/>
        <returnValue type="PyInterpreterState*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyInterpreterState_New">
        <use-retval/>
        <returnValue type="PyInterpreterState*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyInterpreterState_Clear">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyInterpreterState_Delete">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyInterpreterState_GetID">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int64_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThreadState_New">
        <use-retval/>
        <returnValue type="PyThreadState*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThreadState_Clear">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThreadState_Delete">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThreadState_GetDict">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThreadState_DeleteCurrent">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThreadState_Get">
        <use-retval/>
        <returnValue type="PyThreadState*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThreadState_Swap">
        <returnValue type="PyThreadState*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThreadState_SetAsyncExc">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyState_FindModule">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyState_AddModule">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyState_RemoveModule">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyInterpreterState_Head,PyInterpreterState_Main">
        <use-retval/>
        <returnValue type="PyInterpreterState*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyInterpreterState_Next">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyInterpreterState*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyInterpreterState_ThreadHead">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyThreadState*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThreadState_Next">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyThreadState*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyGILState_GetThisThreadState">
        <use-retval/>
        <returnValue type="PyThreadState*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyGILState_Check">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyGILState_Ensure">
        <use-retval/>
        <returnValue type="PyGILState_STATE"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyGILState_Release">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: pystrcmp.h | Source files: Python/pystrcmp.c -->
    <function name="PyOS_mystrnicmp">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyOS_mystricmp">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>

    <!-- Header: pystrhex.h | Source file: Python/pystrhex.c -->
    <function name="_Py_strhex,_Py_strhex_bytes">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>

    <!-- Header: pystrtod.h | Source file: Python/pystrtod.c -->
    <memory>
        <alloc init="true">PyOS_double_to_string</alloc>
        <dealloc>PyMem_Free</dealloc>
    </memory>
    <function name="PyOS_string_to_double">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
        <arg nr="3"><not-bool/></arg>
    </function>
    <function name="PyOS_double_to_string">
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/></arg>
    </function>
    <function name="PyOS_ascii_atof">
        <warn severity="warning">Obsolete function 'PyOS_ascii_atof' used.
Obsolete function 'PyOS_ascii_atof' used. This function is deprecated in Python 3.1 and removed in Python 3.2. 'PyOS_string_to_double' should be used instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyOS_ascii_formatd">
        <warn severity="warning">Obsolete function 'PyOS_ascii_formatd' used.
Obsolete function 'PyOS_ascii_formatd' used. This function is removed in Python 2.7 and 3.1. 'PyOS_double_to_string' should be used instead.
        </warn>
        <leak-ignore/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyOS_ascii_strtod">
        <warn severity="warning">Obsolete function 'PyOS_ascii_strtod' used.
Obsolete function 'PyOS_ascii_strtod' used. This function is deprecated in Python 2.7 and 3.1 and removed in Python 3.2. 'PyOS_string_to_double' should be used instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="_Py_parse_inf_or_nan">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="_Py_string_to_number_with_underscores">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/></arg>
        <arg nr="6"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: pythonrun | Source files: Python/pythonrun.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">Py_CompileString</alloc>
        <alloc init="true">Py_CompileStringExFlags</alloc>
        <alloc init="true">Py_CompileStringFlags</alloc>
        <alloc init="true">Py_CompileStringObject</alloc>
        <alloc init="true">PyRun_File</alloc>
        <alloc init="true">PyRun_FileEx</alloc>
        <alloc init="true">PyRun_FileExFlags</alloc>
        <alloc init="true">PyRun_FileFlags</alloc>
        <alloc init="true">PyRun_String</alloc>
        <alloc init="true">PyRun_StringFlags</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <memory>
        <alloc init="true">Py_SymtableString</alloc>
        <alloc init="true">Py_SymtableStringObject</alloc>
        <dealloc>PySymtable_Free</dealloc>
    </memory>
    <function name="PyErr_Display">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyErr_Print">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyErr_PrintEx">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-uninit/></arg>
    </function>
    <function name="PyRun_AnyFileExFlags,PyRun_SimpleFileExFlags">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyRun_AnyFileEx,PyRun_SimpleFileEx">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="PyRun_AnyFileFlags">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyRun_AnyFile,PyRun_SimpleFile">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyRun_InteractiveLoopFlags">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyRun_InteractiveLoop">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyRun_InteractiveOneObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyRun_InteractiveOneFlags">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyRun_InteractiveOne">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyRun_SimpleStringFlags">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyRun_SimpleString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyRun_StringFlags">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyRun_FileExFlags">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="6"><not-uninit/></arg>
        <arg nr="7"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyRun_FileFlags">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="6"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyRun_FileEx">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="6"><not-uninit/></arg>
    </function>
    <function name="PyRun_File">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="Py_CompileStringObject">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/><valid>-1,0,1,2</valid></arg>
    </function>
    <function name="Py_CompileStringExFlags">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/><valid>-1,0,1,2</valid></arg>
    </function>
    <function name="Py_CompileStringFlags">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="Py_CompileString">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="Py_SymtableStringObject">
        <use-retval/>
        <returnValue type="symtable*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="Py_SymtableString">
        <use-retval/>
        <returnValue type="symtable*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyOS_CheckStack">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: pythread.h | Source files: -->
    <resource>
        <alloc init="true">PyThread_create_key</alloc>
        <dealloc>PyThread_delete_key</dealloc>
    </resource>
    <resource>
        <alloc init="true">PyThread_tss_alloc</alloc>
        <dealloc>PyThread_tss_free</dealloc>
    </resource>
    <resource>
        <alloc init="true">PyThread_allocate_lock</alloc>
        <dealloc>PyThread_free_lock</dealloc>
    </resource>
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyThread_GetInfo</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyThread_init_thread">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_start_new_thread">
        <returnValue type="unsigned long"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="PyThread_exit_thread">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_get_thread_ident">
        <use-retval/>
        <returnValue type="unsigned long"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_allocate_lock">
        <use-retval/>
        <returnValue type="PyThread_type_lock"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_free_lock">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThread_acquire_lock">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="PyThread_acquire_lock_timed">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyLockStatus"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-uninit/></arg>
    </function>
    <function name="PyThread_release_lock">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThread_get_stacksize">
        <use-retval/>
        <returnValue type="size_t"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_set_stacksize">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyThread_GetInfo">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_create_key">
        <warn severity="warning">Deprecated function 'PyThread_create_key' used.
Deprecated function 'PyThread_create_key' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_delete_key">
        <warn severity="warning">Deprecated function 'PyThread_delete_key' used.
Deprecated function 'PyThread_delete_key' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThread_set_key_value">
        <warn severity="warning">Deprecated function 'PyThread_set_key_value' used.
Deprecated function 'PyThread_set_key_value' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThread_get_key_value">
        <warn severity="warning">Deprecated function 'PyThread_get_key_value' used.
Deprecated function 'PyThread_get_key_value' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThread_delete_key_value">
        <warn severity="warning">Deprecated function 'PyThread_delete_key_value' used.
Deprecated function 'PyThread_delete_key_value' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThread_ReInitTLS">
        <warn severity="warning">Deprecated function 'PyThread_ReInitTLS' used.
Deprecated function 'PyThread_ReInitTLS' used. The Python TLS API is deprecated as of Python 3.7.

This API has been superseded by the Thread Specific Storage (TSS) API.
        </warn>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_tss_alloc">
        <use-retval/>
        <returnValue type="Py_tss_t*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyThread_tss_free">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThread_tss_is_created">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThread_tss_create">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThread_tss_delete">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyThread_tss_set">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyThread_tss_get">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: pytime.h | Source files: Python/pytime.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_PyTime_AsNanosecondsObject</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyLong_AsTime_t">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="time_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyTime_ObjectToTime_t">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyTime_ObjectToTimespec,_PyTime_ObjectToTimeval">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyTime_FromNanoseconds,_PyTime_FromSeconds">
        <const/>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="_PyTime_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyTime_FromMillisecondsObject,_PyTime_FromSecondsObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyTime_AsSecondsDouble">
        <const/>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="double"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyTime_AsNanosecondsObject">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyTime_AsMicroseconds,_PyTime_AsMilliseconds">
        <const/>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="_PyTime_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyTime_AsTimeval,_PyTime_AsTimeval_noraise">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyTime_AsTimevalTime_t">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyTime_AsTimespec">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="_PyTime_GetMonotonicClock,_PyTime_GetPerfCounter,_PyTime_GetSystemClock">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="_PyTime_t"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyTime_GetMonotonicClockWithInfo,_PyTime_GetPerfCounterWithInfo,_PyTime_GetSystemClockWithInfo">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyTime_Init">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyTime_gmtime,_PyTime_localtime">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>

    <!-- Header: setobject.h | Source files: Objects/setobject.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PySet_New</alloc>
        <alloc init="true">PyFrozenSet_New</alloc>
        <alloc init="true">PySet_Pop</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PySet_New,PyFrozenSet_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PySet_Size">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySet_Clear">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySet_Contains">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySet_Discard">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PySet_Add">
        <leak-ignore/> <!-- TODO: May need to remove this, unfortunately individual parameters can't be leak ignored :/ -->
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="PySet_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PySet_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PySet_Pop">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PySet_Update">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: sliceobject.h | Source files: Objects/sliceobject.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PySlice_New</alloc>
        <alloc init="true">_PySlice_FromIndices</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PySlice_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PySlice_FromIndices">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PySlice_GetIndices">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
        <arg nr="4"><not-bool/><not-null/></arg>
        <arg nr="5"><not-bool/><not-null/></arg>
    </function>
    <function name="PySlice_Unpack">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
        <arg nr="4"><not-bool/><not-null/></arg>
    </function>
    <function name="PySlice_AdjustIndices">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PySlice_GetLongIndices">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
        <arg nr="4"><not-bool/><not-null/></arg>
        <arg nr="5"><not-bool/><not-null/></arg>
    </function>

    <!-- Header: structmember.h | Source file: Python/structmember.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyMember_GetOne</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyMember_GetOne">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyMember_SetOne">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: structseq.h | Source files: Objects/structseq.c -->
    <!-- TODO: See how false-positive-ey this is. May need to remove the memory block -->
    <!--       if it's flagging a lot of them (or double frees, etc)                  -->
    <memory>
        <alloc init="true">PyStructSequence_New</alloc>
        <alloc init="true">PyStructSequence_NewType</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="PyStructSequence_InitType">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStructSequence_InitType2">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStructSequence_New">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStructSequence_NewType">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyTypeObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStructSequence_SetItem">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyStructSequence_GetItem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>

    <!-- Header: tupleobject.h | Source files: Objects/tupleobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyTuple_GetSlice</alloc>
        <alloc init="true">PyTuple_New</alloc>
        <alloc init="true">PyTuple_Pack</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyTuple_DebugMallocStats">
        <leak-ignore/>
        <returnValue type="void"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyTuple_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyTuple_Size">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyTuple_GetItem">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyTuple_SetItem">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyTuple_MaybeUntrack">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyTuple_Pack">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyTuple_GetSlice">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyTuple_Resize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyTuple_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyTuple_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>

    <!-- Header: unicodeobject.h | Source files: Objects/unicodeobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">_PyUnicode_AsASCIIString</alloc>
        <alloc init="true">_PyUnicode_AsLatin1String</alloc>
        <alloc init="true">_PyUnicode_AsUTF8String</alloc>
        <alloc init="true">_PyUnicode_Copy</alloc>
        <alloc init="true">_PyUnicode_DecodeUnicodeEscape</alloc>
        <alloc init="true">_PyUnicode_EncodeCharmap</alloc>
        <alloc init="true">_PyUnicode_EncodeUTF7</alloc>
        <alloc init="true">_PyUnicode_EncodeUTF16</alloc>
        <alloc init="true">_PyUnicode_EncodeUTF32</alloc>
        <alloc init="true">_PyUnicode_FormatLong</alloc>
        <alloc init="true">_PyUnicode_FromASCII</alloc>
        <alloc init="true">_PyUnicode_FromId</alloc>
        <alloc init="true">_PyUnicode_JoinArray</alloc>
        <alloc init="true">_PyUnicode_XStrip</alloc>
        <alloc init="true">PyUnicode_AsASCIIString</alloc>
        <alloc init="true">PyUnicode_AsCharmapString</alloc>
        <alloc init="true">PyUnicode_AsDecodedObject</alloc>
        <alloc init="true">PyUnicode_AsDecodedUnicode</alloc>
        <alloc init="true">PyUnicode_AsEncodedObject</alloc>
        <alloc init="true">PyUnicode_AsEncodedString</alloc>
        <alloc init="true">PyUnicode_AsEncodedUnicode</alloc>
        <alloc init="true">PyUnicode_AsLatin1String</alloc>
        <alloc init="true">PyUnicode_AsMBCSString</alloc>
        <alloc init="true">PyUnicode_AsRawUnicodeEscapeString</alloc>
        <alloc init="true">PyUnicode_AsUnicodeEscapeString</alloc>
        <alloc init="true">PyUnicode_AsUTF8String</alloc>
        <alloc init="true">PyUnicode_AsUTF16String</alloc>
        <alloc init="true">PyUnicode_AsUTF32String</alloc>
        <alloc init="true">PyUnicode_BuildEncodingMap</alloc>
        <alloc init="true">PyUnicode_Concat</alloc>
        <alloc init="true">PyUnicode_Decode</alloc>
        <alloc init="true">PyUnicode_DecodeASCII</alloc>
        <alloc init="true">PyUnicode_DecodeCharmap</alloc>
        <alloc init="true">PyUnicode_DecodeCodePageStateful</alloc>
        <alloc init="true">PyUnicode_DecodeFSDefault</alloc>
        <alloc init="true">PyUnicode_DecodeFSDefaultAndSize</alloc>
        <alloc init="true">PyUnicode_DecodeLatin1</alloc>
        <alloc init="true">PyUnicode_DecodeLocale</alloc>
        <alloc init="true">PyUnicode_DecodeLocaleAndSize</alloc>
        <alloc init="true">PyUnicode_DecodeMBCS</alloc>
        <alloc init="true">PyUnicode_DecodeMBCSStateful</alloc>
        <alloc init="true">PyUnicode_DecodeRawUnicodeEscape</alloc>
        <alloc init="true">PyUnicode_DecodeUnicodeEscape</alloc>
        <alloc init="true">PyUnicode_DecodeUTF7</alloc>
        <alloc init="true">PyUnicode_DecodeUTF7Stateful</alloc>
        <alloc init="true">PyUnicode_DecodeUTF8</alloc>
        <alloc init="true">PyUnicode_DecodeUTF8Stateful</alloc>
        <alloc init="true">PyUnicode_DecodeUTF16</alloc>
        <alloc init="true">PyUnicode_DecodeUTF16Stateful</alloc>
        <alloc init="true">PyUnicode_DecodeUTF32</alloc>
        <alloc init="true">PyUnicode_DecodeUTF32Stateful</alloc>
        <alloc init="true">PyUnicode_Encode</alloc>
        <alloc init="true">PyUnicode_EncodeCharmap</alloc>
        <alloc init="true">PyUnicode_EncodeCodePage</alloc>
        <alloc init="true">PyUnicode_EncodeFSDefault</alloc>
        <alloc init="true">PyUnicode_EncodeLatin1</alloc>
        <alloc init="true">PyUnicode_EncodeLocale</alloc>
        <alloc init="true">PyUnicode_EncodeMBCS</alloc>
        <alloc init="true">PyUnicode_EncodeRawUnicodeEscape</alloc>
        <alloc init="true">PyUnicode_EncodeUnicodeEscape</alloc>
        <alloc init="true">PyUnicode_EncodeUTF7</alloc>
        <alloc init="true">PyUnicode_EncodeUTF8</alloc>
        <alloc init="true">PyUnicode_EncodeUTF16</alloc>
        <alloc init="true">PyUnicode_EncodeUTF32</alloc>
        <alloc init="true">PyUnicode_Format</alloc>
        <alloc init="true">PyUnicode_FromEncodedObject</alloc>
        <alloc init="true">PyUnicode_FromFormat</alloc>
        <alloc init="true">PyUnicode_FromFormatV</alloc>
        <alloc init="true">PyUnicode_FromKindAndData</alloc>
        <alloc init="true">PyUnicode_FromObject</alloc>
        <alloc init="true">PyUnicode_FromOrdinal</alloc>
        <alloc init="true">PyUnicode_FromString</alloc>
        <alloc init="true">PyUnicode_FromStringAndSize</alloc>
        <alloc init="true">PyUnicode_FromUnicode</alloc>
        <alloc init="true">PyUnicode_FromWideChar</alloc>
        <alloc init="true">PyUnicode_InternFromString</alloc>
        <alloc init="true">PyUnicode_Join</alloc>
        <alloc init="true">PyUnicode_New</alloc>
        <alloc init="true">PyUnicode_Partition</alloc>
        <alloc init="true">PyUnicode_Replace</alloc>
        <alloc init="true">PyUnicode_RPartition</alloc>
        <alloc init="true">PyUnicode_RSplit</alloc>
        <alloc init="true">PyUnicode_Split</alloc>
        <alloc init="true">PyUnicode_Splitlines</alloc>
        <alloc init="true">PyUnicode_Substring</alloc>
        <alloc init="true">PyUnicode_Translate</alloc>
        <alloc init="true">PyUnicode_TranslateCharmap</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <memory>
        <alloc init="true">_PyUnicode_AsKind</alloc>
        <!-- PyUnicode_AsUCS4 may need to be removed. 2nd param is also the returned pointer, so it can function as an out param,-->
        <!-- leading to false positives, since the return value isn't required to be used. -->
        <alloc init="true">PyUnicode_AsUCS4</alloc>
        <alloc init="true">PyUnicode_AsUCS4Copy</alloc>
        <alloc init="true">PyUnicode_AsUnicodeCopy</alloc>
        <alloc init="true">PyUnicode_AsWideCharString</alloc>
        <dealloc>PyMem_Del</dealloc>
        <dealloc>PyMem_Free</dealloc>
        <dealloc>PyMem_FREE</dealloc>
    </memory>
    <memory>
        <alloc init="true">_Py_DecodeUTF8_surrogateescape</alloc>
        <dealloc>PyMem_RawFree</dealloc>
    </memory>
    <function name="PyUnicode_GetMax">
        <warn severity="warning">Deprecated function 'PyUnicode_GetMax' used.
Deprecated function 'PyUnicode_GetMax' used. This function is deprecated in Python 3.3.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <const/>
        <returnValue type="PyUNICODE"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyUnicode_CheckConsistency">
        <leak-ignore/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_Dump">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_New">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_FastCopyCharacters">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyUnicode_CopyCharacters">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyUnicode_Ready">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_Resize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyUnicode_FromUnicode">
        <warn severity="warning">Deprecated function 'PyUnicode_FromUnicode' used.
Deprecated function 'PyUnicode_FromUnicode' used. This function is deprecated in Python 3.3.

Consider migrating to using 'PyUnicode_FromKindAndData', 'PyUnicode_FromWideChar', or 'PyUnicode_New' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <!-- Note that passing NULL as the first argument is deprecated in favor of PyUnicode_New -->
    <function name="PyUnicode_FromStringAndSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyUnicode_FromWideChar">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <!-- Note that passing NULL as the first argument is deprecated in favor of PyUnicode_New -->
    <function name="PyUnicode_FromString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_PyUnicode_FromId">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_ClearStaticStrings">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyUnicode_FromASCII">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_FromKindAndData">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyUnicode_FindMaxChar">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_UCS4"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_Copy">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_AsKind">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="void*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyUnicode_AsUCS4">
        <leak-ignore/>
        <returnValue type="Py_UCS4*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>
    <function name="PyUnicode_AsUCS4Copy">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_UCS4*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_FromFormat">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><formatstr/><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_FromFormatV">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_AsWideChar">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyUnicode_AsWideCharString">
        <use-retval/>
        <returnValue type="wchar_t*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="PyUnicode_FromObject,PyUnicode_FromOrdinal">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyUnicode_FromEncodedObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="_Py_normalize_encoding">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyUnicode_Decode">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_AsDecodedObject">
        <warn severity="warning">Deprecated function 'PyUnicode_AsDecodedObject' used.
Deprecated function 'PyUnicode_AsDecodedObject' used. This function is deprecated in Python 3.6.

Consider using 'PyCodec_Decode' instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_AsDecodedUnicode">
        <warn severity="warning">Deprecated function 'PyUnicode_AsDecodedUnicode' used.
Deprecated function 'PyUnicode_AsDecodedUnicode' used. This function is deprecated in Python 3.6.

Consider using 'PyCodec_Decode' instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_Encode">
        <warn severity="warning">Deprecated function 'PyUnicode_Encode' used.
Deprecated function 'PyUnicode_Encode' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_AsEncodedObject">
        <warn severity="warning">Deprecated function 'PyUnicode_AsEncodedObject' used.
Deprecated function 'PyUnicode_AsEncodedObject' used. This function is deprecated in Python 3.6.

It is superseded by 'PyUnicode_AsEncodedString' since all standard encodings (except rot13) encode str to bytes. Use 'PyCodec_Encode' for encoding with rot13 and non-standard codecs that encode form str to non-bytes.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_EncodeLocale">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_EncodeFSDefault">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_AsEncodedString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_AsEncodedUnicode">
        <warn severity="warning">Deprecated function 'PyUnicode_AsEncodedUnicode' used.
Deprecated function 'PyUnicode_AsEncodedUnicode' used. This function is deprecated in Python 3.6.

Consider using 'PyCodec_Decode' instead.
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_DecodeLocaleAndSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_DecodeLocale">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_DecodeFSDefault">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_DecodeFSDefaultAndSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyUnicode_FSConverter">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_FSDecoder">
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
    </function>
    <function name="PyUnicode_AsUTF8AndSize">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="PyUnicode_AsUTF8">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_AsUnicodeAndSize">
        <warn severity="warning">Deprecated function 'PyUnicode_AsUnicodeAndSize' used.
Deprecated function 'PyUnicode_AsUnicodeAndSize' used. This function is deprecated in Python 3.3.

Consider migrating to using 'PyUnicode_AsUCS4', 'PyUnicode_AsWideChar', 'PyUnicode_ReadChar' or similar new APIs instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_UNICODE*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/></arg>
    </function>
    <function name="PyUnicode_AsUnicode">
        <warn severity="warning">Deprecated function 'PyUnicode_AsUnicode' used.
Deprecated function 'PyUnicode_AsUnicode' used. This function is deprecated in Python 3.3.

Consider migrating to using 'PyUnicode_AsUCS4', 'PyUnicode_AsWideChar', 'PyUnicode_ReadChar' or similar new APIs instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_UNICODE*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_AsUnicode">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="const Py_UNICODE*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_GetSize">
        <warn severity="warning">Deprecated function 'PyUnicode_GetSize' used.
Deprecated function 'PyUnicode_GetSize' used. This function is deprecated in Python 3.3.

Please migrate to using 'PyUnicode_GetLength' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-bool/><not-null/></arg>
    </function>
    <function name="PyUnicode_GetLength">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-bool/><not-null/></arg>
    </function>
    <function name="PyUnicode_ReadChar">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_UCS4"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyUnicode_WriteChar">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_GetDefaultEncoding">
        <const/>
        <use-retval/>
        <returnValue type="const char*"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyUnicode_DecodeUTF7,PyUnicode_DecodeUTF8">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_DecodeUTF7Stateful,PyUnicode_DecodeUTF8Stateful">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/></arg>
    </function>
    <function name="_PyUnicode_EncodeUTF7">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
        <arg nr="3"><not-uninit/></arg>
        <arg nr="4"><not-uninit/></arg>
    </function>
    <function name="PyUnicode_EncodeUTF7">
        <warn severity="warning">Deprecated function 'PyUnicode_EncodeUTF7' used.
Deprecated function 'PyUnicode_EncodeUTF7' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_AsEncodedString' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-uninit/></arg>
        <arg nr="4"><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_Py_DecodeUTF8_surrogateescape">
        <use-retval/>
        <returnValue type="wchar_t*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyUnicode_AsASCIIString,_PyUnicode_AsLatin1String,_PyUnicode_AsUTF8String">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_EncodeUTF8">
        <warn severity="warning">Deprecated function 'PyUnicode_EncodeUTF8' used.
Deprecated function 'PyUnicode_EncodeUTF8' used. This function is deprecated in Python 3.3.

Consider migrating to using 'PyUnicode_AsUTF8String', 'PyUnicode_UTF8AndSize', or 'PyUnicode_AsEncodedString' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_AsUTF8String">
        <leak-ignore/>
        <use-retval/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_DecodeUTF16,PyUnicode_DecodeUTF32">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/></arg>
    </function>
    <function name="PyUnicode_DecodeUTF16Stateful,PyUnicode_DecodeUTF32Stateful">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/></arg>
        <arg nr="5"><not-bool/></arg>
    </function>
    <function name="_PyUnicode_EncodeUTF16,_PyUnicode_EncodeUTF32">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>-1:1</valid></arg>
    </function>
    <function name="PyUnicode_EncodeUTF32">
        <warn severity="warning">Deprecated function 'PyUnicode_EncodeUTF32' used.
Deprecated function 'PyUnicode_EncodeUTF32' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_AsUTF32String' or 'PyUnicode_AsEncodedString' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>-1:1</valid></arg>
    </function>
    <function name="PyUnicode_AsUTF16String,PyUnicode_AsUTF32String">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_EncodeUTF16">
        <warn severity="warning">Deprecated function 'PyUnicode_EncodeUTF16' used.
Deprecated function 'PyUnicode_EncodeUTF16' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_AsUTF16String' or 'PyUnicode_AsEncodedString' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>-1:1</valid></arg>
    </function>
    <function name="_PyUnicode_DecodeUnicodeEscape">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-null/></arg>
    </function>
    <function name="PyUnicode_DecodeASCII,PyUnicode_DecodeLatin1,PyUnicode_DecodeRawUnicodeEscape,PyUnicode_DecodeUnicodeEscape">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_AsASCIIString,PyUnicode_AsLatin1String,PyUnicode_AsMBCSString,PyUnicode_AsRawUnicodeEscapeString,PyUnicode_AsUnicodeEscapeString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_EncodeUnicodeEscape">
        <warn severity="warning">Deprecated function 'PyUnicode_EncodeUnicodeEscape' used.
Deprecated function 'PyUnicode_EncodeUnicodeEscape' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_AsUnicodeEscapeString' or 'PyUnicode_AsEncodedString' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_EncodeRawUnicodeEscape">
        <warn severity="warning">Deprecated function 'PyUnicode_EncodeRawUnicodeEscape' used.
Deprecated function 'PyUnicode_EncodeRawUnicodeEscape' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_AsRawUnicodeEscapeString' or 'PyUnicode_AsEncodedString' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_EncodeLatin1">
        <warn severity="warning">Deprecated function 'PyUnicode_EncodeLatin1' used.
Deprecated function 'PyUnicode_EncodeLatin1' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_AsLatin1String' or 'PyUnicode_AsEncodedString' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_EncodeASCII">
        <warn severity="warning">Deprecated function 'PyUnicode_EncodeASCII' used.
Deprecated function 'PyUnicode_EncodeASCII' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_AsASCIIString' or 'PyUnicode_AsEncodedString' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_DecodeCodePageStateful">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="4"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="5"><not-bool/></arg>
    </function>
    <function name="PyUnicode_DecodeCharmap,PyUnicode_DecodeMBCSStateful">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/></arg>
    </function>
    <function name="PyUnicode_DecodeMBCS">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_EncodeMBCS">
        <warn severity="warning">Deprecated function 'PyUnicode_EncodeMBCS' used.
Deprecated function 'PyUnicode_EncodeMBCS' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_AsMBCString', 'PyUnicode_EncodeCodePage', or 'PyUnicode_AsEncodedString' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_EncodeCodePage">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_DecodeCharmap">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/><minsize type="argvalue" arg="2"/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_BuildEncodingMap">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_EncodeCharmap">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_EncodeCharmap">
        <warn severity="warning">Deprecated function 'PyUnicode_EncodeCharmap' used.
Deprecated function 'PyUnicode_EncodeCharmap' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_AsCharmapString' or 'PyUnicode_AsEncodedString'.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_AsCharmapString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_TranslateCharmap">
        <warn severity="warning">Deprecated function 'PyUnicode_TranslateCharmap' used.
Deprecated function 'PyUnicode_TranslateCharmap' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_Translate' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_Translate">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_EncodeDecimal">
        <warn severity="warning">Deprecated function 'PyUnicode_EncodeDecimal' used.
Deprecated function 'PyUnicode_EncodeDecimal' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_Count">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_Find">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/><valid>-1,1</valid></arg>
    </function>
    <function name="PyUnicode_FindChar">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/><valid>-1,1</valid></arg>
    </function>
    <function name="PyUnicode_Tailmatch">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
        <arg nr="5"><not-bool/><not-uninit/><valid>-1,1</valid></arg>
    </function>
    <function name="PyUnicode_Concat">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_Join">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_JoinArray">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyUnicode_FastFill">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_Fill">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_Splitlines">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_EqualToASCIIId,_PyUnicode_EQ,PyUnicode_Compare,PyUnicode_Contains">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_EqualToASCIIString,PyUnicode_CompareWithASCIIString">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyUnicode_RichCompare">
        <leak-ignore/>
        <pure/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_Append">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_AppendAndDel">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_XStrip">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_Substring">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/><valid>0:</valid></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyUnicode_Replace">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="PyUnicode_Partition,PyUnicode_RPartition">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_RSplit,PyUnicode_Split">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="_PyUnicode_FormatLong">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
        <arg nr="3"><not-bool/><not-uninit/></arg>
        <arg nr="4"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_Format">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyUnicode_Init">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyUnicode_ClearFreeList">
        <returnValue type="int"/>
        <noreturn>false</noreturn>
    </function>
    <function name="_PyUnicode_Fini">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="PyUnicode_InternInPlace">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_InternImmortal">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_InternFromString">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="_Py_ReleaseInternedUnicodeStrings">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
    </function>
    <function name="Py_UNICODE_strlen">
        <warn severity="warning">Deprecated function 'Py_UNICODE_strlen' used.
Deprecated function 'Py_UNICODE_strlen' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_GetLength' or 'PyUnicode_GET_LENGTH' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="size_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_UNICODE_strcpy">
        <warn severity="warning">Deprecated function 'Py_UNICODE_strcpy' used.
Deprecated function 'Py_UNICODE_strcpy' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_CopyCharacters' or 'PyUnicode_Substring' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <returnValue type="Py_UNICODE*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_UNICODE_strcat">
        <warn severity="warning">Deprecated function 'Py_UNICODE_strcat' used.
Deprecated function 'Py_UNICODE_strcat' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_CopyCharacters' or 'PyUnicode_FromFormat' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <returnValue type="Py_UNICODE*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_UNICODE_strcmp">
        <warn severity="warning">Deprecated function 'Py_UNICODE_strcmp' used.
Deprecated function 'Py_UNICODE_strcmp' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_Compare' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="Py_UNICODE_strncmp">
        <warn severity="warning">Deprecated function 'Py_UNICODE_strncmp' used.
Deprecated function 'Py_UNICODE_strncmp' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_Tailmatch' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/><strz/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><minsize type="argvalue" arg="3"/><strz/></arg>
        <arg nr="3"><not-bool/><not-uninit/><valid>0:</valid></arg>
    </function>
    <function name="Py_UNICODE_strchr">
        <warn severity="warning">Deprecated function 'Py_UNICODE_strchr' used.
Deprecated function 'Py_UNICODE_strchr' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_FindChar' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_UNICODE*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="Py_UNICODE_strrchr">
        <warn severity="warning">Deprecated function 'Py_UNICODE_strrchr' used.
Deprecated function 'Py_UNICODE_strrchr' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_FindChar' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_UNICODE*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyUnicode_AsUnicodeCopy">
        <warn severity="warning">Deprecated function 'PyUnicode_AsUnicodeCopy' used.
Deprecated function 'PyUnicode_AsUnicodeCopy' used. This function is deprecated in Python 3.3 and will be removed in Python 4.0.

Consider migrating to using 'PyUnicode_AsUCS4Copy' or 'PyUnicode_AsWideCharString' instead.

See PEP 393 for more information (https://www.python.org/dev/peps/pep-0393).
        </warn>
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: weakrefobject.h | Source files: Objects/weakrefobject.c -->
    <!-- TODO: See if this produces more false-positives than it's worth -->
    <memory>
        <alloc init="true">PyWeakref_NewProxy</alloc>
        <alloc init="true">PyWeakref_NewRef</alloc>
        <dealloc>Py_DECREF</dealloc>
        <dealloc>Py_DecRef</dealloc>
        <dealloc>Py_XDECREF</dealloc>
    </memory>
    <function name="_PyWeakref_GetWeakrefCount">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="Py_ssize_t"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="_PyWeakref_ClearRef">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyWeakref_NewRef">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyWeakref_NewProxy">
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyWeakref_GetObject">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="PyObject*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyObject_ClearWeakRefs">
        <leak-ignore/>
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>

    <!-- Header: Parser/tokenizer.h | Source files: Parser/tokenizer.c -->
    <memory>
        <alloc init="true">PyTokenizer_FromFile</alloc>
        <alloc init="true">PyTokenizer_FromString</alloc>
        <alloc init="true">PyTokenizer_FromUTF8</alloc>
        <dealloc>PyTokenizer_Free</dealloc>
    </memory>
    <memory>
        <alloc init="true">PyTokenizer_FindEncoding</alloc>
        <alloc init="true">PyTokenizer_FindEncodingFilename</alloc>
        <dealloc>PyMem_Free</dealloc>
    </memory>
    <function name="PyTokenizer_FromString,PyTokenizer_FromUTF8">
        <use-retval/>
        <returnValue type="struct tok_state*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyTokenizer_FromFile">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="struct tok_state*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="3"><not-bool/><not-null/><not-uninit/><strz/></arg>
        <arg nr="4"><not-bool/><not-null/><not-uninit/><strz/></arg>
    </function>
    <function name="PyTokenizer_Free">
        <returnValue type="void"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
    </function>
    <function name="PyTokenizer_Get">
        <leak-ignore/>
        <use-retval/>
        <returnValue type="int"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-null/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-null/></arg>
        <arg nr="3"><not-bool/><not-null/></arg>
    </function>
    <function name="PyTokenizer_FindEncodingFilename">
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
        <arg nr="2"><not-bool/><not-uninit/></arg>
    </function>
    <function name="PyTokenizer_FindEncoding">
        <use-retval/>
        <returnValue type="char*"/>
        <noreturn>false</noreturn>
        <arg nr="1"><not-bool/><not-uninit/></arg>
    </function>
</def>
